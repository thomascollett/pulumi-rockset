// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Collett.Rockset
{
    /// <summary>
    /// Manages a Rockset [Role](https://rockset.com/docs/iam/).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Rockset = Collett.Rockset;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var query_onlyRocksetRole = new Rockset.RocksetRole("query-onlyRocksetRole", new()
    ///     {
    ///         Description = "This role can only query collections in the prod workspace in the usw2a1 cluster",
    ///         Privileges = new[]
    ///         {
    ///             new Rockset.Inputs.RocksetRolePrivilegeArgs
    ///             {
    ///                 Action = "QUERY_DATA_WS",
    ///                 ResourceName = "prod",
    ///                 Cluster = "usw2a1",
    ///             },
    ///             new Rockset.Inputs.RocksetRolePrivilegeArgs
    ///             {
    ///                 Action = "EXECUTE_QUERY_LAMBDA_WS",
    ///                 ResourceName = "prod",
    ///                 Cluster = "usw2a1",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var query_onlyRocksetApiKey = new Rockset.RocksetApiKey("query-onlyRocksetApiKey", new()
    ///     {
    ///         Role = query_onlyRocksetRole.Name,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [RocksetResourceType("rockset:index/rocksetRole:RocksetRole")]
    public partial class RocksetRole : global::Pulumi.CustomResource
    {
        /// <summary>
        /// When the role was created.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Who created the role.
        /// </summary>
        [Output("createdBy")]
        public Output<string> CreatedBy { get; private set; } = null!;

        /// <summary>
        /// Role description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Role name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The email of the user who currently owns the role.
        /// </summary>
        [Output("ownerEmail")]
        public Output<string> OwnerEmail { get; private set; } = null!;

        /// <summary>
        /// Privileges associated with the role. For a full list see [API documentation](https://rockset.com/docs/iam/#supported-privileges)
        /// </summary>
        [Output("privileges")]
        public Output<ImmutableArray<Outputs.RocksetRolePrivilege>> Privileges { get; private set; } = null!;


        /// <summary>
        /// Create a RocksetRole resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RocksetRole(string name, RocksetRoleArgs? args = null, CustomResourceOptions? options = null)
            : base("rockset:index/rocksetRole:RocksetRole", name, args ?? new RocksetRoleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RocksetRole(string name, Input<string> id, RocksetRoleState? state = null, CustomResourceOptions? options = null)
            : base("rockset:index/rocksetRole:RocksetRole", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/thomascollett",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RocksetRole resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RocksetRole Get(string name, Input<string> id, RocksetRoleState? state = null, CustomResourceOptions? options = null)
        {
            return new RocksetRole(name, id, state, options);
        }
    }

    public sealed class RocksetRoleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Role description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Role name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("privileges")]
        private InputList<Inputs.RocksetRolePrivilegeArgs>? _privileges;

        /// <summary>
        /// Privileges associated with the role. For a full list see [API documentation](https://rockset.com/docs/iam/#supported-privileges)
        /// </summary>
        public InputList<Inputs.RocksetRolePrivilegeArgs> Privileges
        {
            get => _privileges ?? (_privileges = new InputList<Inputs.RocksetRolePrivilegeArgs>());
            set => _privileges = value;
        }

        public RocksetRoleArgs()
        {
        }
        public static new RocksetRoleArgs Empty => new RocksetRoleArgs();
    }

    public sealed class RocksetRoleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// When the role was created.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Who created the role.
        /// </summary>
        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        /// <summary>
        /// Role description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Role name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The email of the user who currently owns the role.
        /// </summary>
        [Input("ownerEmail")]
        public Input<string>? OwnerEmail { get; set; }

        [Input("privileges")]
        private InputList<Inputs.RocksetRolePrivilegeGetArgs>? _privileges;

        /// <summary>
        /// Privileges associated with the role. For a full list see [API documentation](https://rockset.com/docs/iam/#supported-privileges)
        /// </summary>
        public InputList<Inputs.RocksetRolePrivilegeGetArgs> Privileges
        {
            get => _privileges ?? (_privileges = new InputList<Inputs.RocksetRolePrivilegeGetArgs>());
            set => _privileges = value;
        }

        public RocksetRoleState()
        {
        }
        public static new RocksetRoleState Empty => new RocksetRoleState();
    }
}
