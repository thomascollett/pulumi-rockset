// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Collett.Rockset
{
    /// <summary>
    /// Manages a collection created from a Kafka source. The `use_v3` field must match the integration which the collection is created from.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Rockset = Collett.Rockset;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var bootstrapServers = config.RequireObject&lt;dynamic&gt;("bootstrapServers");
    ///     var apikey = config.RequireObject&lt;dynamic&gt;("apikey");
    ///     var secret = config.RequireObject&lt;dynamic&gt;("secret");
    ///     var confluentRocksetKafkaIntegration = new Rockset.RocksetKafkaIntegration("confluentRocksetKafkaIntegration", new()
    ///     {
    ///         Description = "Integration to ingest documents from Confluent Cloud",
    ///         UseV3 = true,
    ///         BootstrapServers = bootstrapServers,
    ///         SecurityConfig = 
    ///         {
    ///             { "api_key", apikey },
    ///             { "secret", secret },
    ///         },
    ///     });
    /// 
    ///     var confluentRocksetWorkspace = new Rockset.RocksetWorkspace("confluentRocksetWorkspace", new()
    ///     {
    ///         Description = "Collections from Confluent Cloud topics.",
    ///     });
    /// 
    ///     var test = new Rockset.RocksetKafkaCollection("test", new()
    ///     {
    ///         Workspace = confluentRocksetWorkspace.Name,
    ///         Description = "Collection from a Confluent Cloud topic.",
    ///         RetentionSecs = 3600,
    ///         Sources = new[]
    ///         {
    ///             new Rockset.Inputs.RocksetKafkaCollectionSourceArgs
    ///             {
    ///                 IntegrationName = confluentRocksetKafkaIntegration.Name,
    ///                 UseV3 = true,
    ///                 TopicName = "test_json",
    ///                 OffsetResetPolicy = "EARLIEST",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [RocksetResourceType("rockset:index/rocksetKafkaCollection:RocksetKafkaCollection")]
    public partial class RocksetKafkaCollection : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Text describing the collection.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// **Deprecated** use ingest_transformation instead
        /// </summary>
        [Output("fieldMappingQuery")]
        public Output<string?> FieldMappingQuery { get; private set; } = null!;

        /// <summary>
        /// Ingest transformation SQL query. Turns the collection into insert_only mode.
        /// </summary>
        [Output("ingestTransformation")]
        public Output<string?> IngestTransformation { get; private set; } = null!;

        /// <summary>
        /// Unique identifier for the collection. Can contain alphanumeric or dash characters.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Number of seconds after which data is purged. Based on event time.
        /// </summary>
        [Output("retentionSecs")]
        public Output<int?> RetentionSecs { get; private set; } = null!;

        /// <summary>
        /// Defines a source for this collection.
        /// </summary>
        [Output("sources")]
        public Output<ImmutableArray<Outputs.RocksetKafkaCollectionSource>> Sources { get; private set; } = null!;

        /// <summary>
        /// Wait until the collection is ready.
        /// </summary>
        [Output("waitForCollection")]
        public Output<bool?> WaitForCollection { get; private set; } = null!;

        /// <summary>
        /// Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.
        /// </summary>
        [Output("waitForDocuments")]
        public Output<int?> WaitForDocuments { get; private set; } = null!;

        /// <summary>
        /// The name of the workspace.
        /// </summary>
        [Output("workspace")]
        public Output<string> Workspace { get; private set; } = null!;


        /// <summary>
        /// Create a RocksetKafkaCollection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RocksetKafkaCollection(string name, RocksetKafkaCollectionArgs args, CustomResourceOptions? options = null)
            : base("rockset:index/rocksetKafkaCollection:RocksetKafkaCollection", name, args ?? new RocksetKafkaCollectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RocksetKafkaCollection(string name, Input<string> id, RocksetKafkaCollectionState? state = null, CustomResourceOptions? options = null)
            : base("rockset:index/rocksetKafkaCollection:RocksetKafkaCollection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/thomascollett",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RocksetKafkaCollection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RocksetKafkaCollection Get(string name, Input<string> id, RocksetKafkaCollectionState? state = null, CustomResourceOptions? options = null)
        {
            return new RocksetKafkaCollection(name, id, state, options);
        }
    }

    public sealed class RocksetKafkaCollectionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Text describing the collection.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// **Deprecated** use ingest_transformation instead
        /// </summary>
        [Input("fieldMappingQuery")]
        public Input<string>? FieldMappingQuery { get; set; }

        /// <summary>
        /// Ingest transformation SQL query. Turns the collection into insert_only mode.
        /// </summary>
        [Input("ingestTransformation")]
        public Input<string>? IngestTransformation { get; set; }

        /// <summary>
        /// Unique identifier for the collection. Can contain alphanumeric or dash characters.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Number of seconds after which data is purged. Based on event time.
        /// </summary>
        [Input("retentionSecs")]
        public Input<int>? RetentionSecs { get; set; }

        [Input("sources")]
        private InputList<Inputs.RocksetKafkaCollectionSourceArgs>? _sources;

        /// <summary>
        /// Defines a source for this collection.
        /// </summary>
        public InputList<Inputs.RocksetKafkaCollectionSourceArgs> Sources
        {
            get => _sources ?? (_sources = new InputList<Inputs.RocksetKafkaCollectionSourceArgs>());
            set => _sources = value;
        }

        /// <summary>
        /// Wait until the collection is ready.
        /// </summary>
        [Input("waitForCollection")]
        public Input<bool>? WaitForCollection { get; set; }

        /// <summary>
        /// Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.
        /// </summary>
        [Input("waitForDocuments")]
        public Input<int>? WaitForDocuments { get; set; }

        /// <summary>
        /// The name of the workspace.
        /// </summary>
        [Input("workspace", required: true)]
        public Input<string> Workspace { get; set; } = null!;

        public RocksetKafkaCollectionArgs()
        {
        }
        public static new RocksetKafkaCollectionArgs Empty => new RocksetKafkaCollectionArgs();
    }

    public sealed class RocksetKafkaCollectionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Text describing the collection.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// **Deprecated** use ingest_transformation instead
        /// </summary>
        [Input("fieldMappingQuery")]
        public Input<string>? FieldMappingQuery { get; set; }

        /// <summary>
        /// Ingest transformation SQL query. Turns the collection into insert_only mode.
        /// </summary>
        [Input("ingestTransformation")]
        public Input<string>? IngestTransformation { get; set; }

        /// <summary>
        /// Unique identifier for the collection. Can contain alphanumeric or dash characters.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Number of seconds after which data is purged. Based on event time.
        /// </summary>
        [Input("retentionSecs")]
        public Input<int>? RetentionSecs { get; set; }

        [Input("sources")]
        private InputList<Inputs.RocksetKafkaCollectionSourceGetArgs>? _sources;

        /// <summary>
        /// Defines a source for this collection.
        /// </summary>
        public InputList<Inputs.RocksetKafkaCollectionSourceGetArgs> Sources
        {
            get => _sources ?? (_sources = new InputList<Inputs.RocksetKafkaCollectionSourceGetArgs>());
            set => _sources = value;
        }

        /// <summary>
        /// Wait until the collection is ready.
        /// </summary>
        [Input("waitForCollection")]
        public Input<bool>? WaitForCollection { get; set; }

        /// <summary>
        /// Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.
        /// </summary>
        [Input("waitForDocuments")]
        public Input<int>? WaitForDocuments { get; set; }

        /// <summary>
        /// The name of the workspace.
        /// </summary>
        [Input("workspace")]
        public Input<string>? Workspace { get; set; }

        public RocksetKafkaCollectionState()
        {
        }
        public static new RocksetKafkaCollectionState Empty => new RocksetKafkaCollectionState();
    }
}
