// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rockset

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Rockset view.
type RocksetView struct {
	pulumi.CustomResourceState

	// The user who created the view.
	CreatedBy pulumi.StringOutput `pulumi:"createdBy"`
	// Text describing the collection.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique name for the view in the workspace. Can contain alphanumeric or dash characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// SQL query used for thw view.
	Query pulumi.StringOutput `pulumi:"query"`
	// Workspace name.
	Workspace pulumi.StringOutput `pulumi:"workspace"`
}

// NewRocksetView registers a new resource with the given unique name, arguments, and options.
func NewRocksetView(ctx *pulumi.Context,
	name string, args *RocksetViewArgs, opts ...pulumi.ResourceOption) (*RocksetView, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Query == nil {
		return nil, errors.New("invalid value for required argument 'Query'")
	}
	if args.Workspace == nil {
		return nil, errors.New("invalid value for required argument 'Workspace'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RocksetView
	err := ctx.RegisterResource("rockset:index/rocksetView:RocksetView", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRocksetView gets an existing RocksetView resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRocksetView(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RocksetViewState, opts ...pulumi.ResourceOption) (*RocksetView, error) {
	var resource RocksetView
	err := ctx.ReadResource("rockset:index/rocksetView:RocksetView", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RocksetView resources.
type rocksetViewState struct {
	// The user who created the view.
	CreatedBy *string `pulumi:"createdBy"`
	// Text describing the collection.
	Description *string `pulumi:"description"`
	// Unique name for the view in the workspace. Can contain alphanumeric or dash characters.
	Name *string `pulumi:"name"`
	// SQL query used for thw view.
	Query *string `pulumi:"query"`
	// Workspace name.
	Workspace *string `pulumi:"workspace"`
}

type RocksetViewState struct {
	// The user who created the view.
	CreatedBy pulumi.StringPtrInput
	// Text describing the collection.
	Description pulumi.StringPtrInput
	// Unique name for the view in the workspace. Can contain alphanumeric or dash characters.
	Name pulumi.StringPtrInput
	// SQL query used for thw view.
	Query pulumi.StringPtrInput
	// Workspace name.
	Workspace pulumi.StringPtrInput
}

func (RocksetViewState) ElementType() reflect.Type {
	return reflect.TypeOf((*rocksetViewState)(nil)).Elem()
}

type rocksetViewArgs struct {
	// Text describing the collection.
	Description *string `pulumi:"description"`
	// Unique name for the view in the workspace. Can contain alphanumeric or dash characters.
	Name *string `pulumi:"name"`
	// SQL query used for thw view.
	Query string `pulumi:"query"`
	// Workspace name.
	Workspace string `pulumi:"workspace"`
}

// The set of arguments for constructing a RocksetView resource.
type RocksetViewArgs struct {
	// Text describing the collection.
	Description pulumi.StringPtrInput
	// Unique name for the view in the workspace. Can contain alphanumeric or dash characters.
	Name pulumi.StringPtrInput
	// SQL query used for thw view.
	Query pulumi.StringInput
	// Workspace name.
	Workspace pulumi.StringInput
}

func (RocksetViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rocksetViewArgs)(nil)).Elem()
}

type RocksetViewInput interface {
	pulumi.Input

	ToRocksetViewOutput() RocksetViewOutput
	ToRocksetViewOutputWithContext(ctx context.Context) RocksetViewOutput
}

func (*RocksetView) ElementType() reflect.Type {
	return reflect.TypeOf((**RocksetView)(nil)).Elem()
}

func (i *RocksetView) ToRocksetViewOutput() RocksetViewOutput {
	return i.ToRocksetViewOutputWithContext(context.Background())
}

func (i *RocksetView) ToRocksetViewOutputWithContext(ctx context.Context) RocksetViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetViewOutput)
}

// RocksetViewArrayInput is an input type that accepts RocksetViewArray and RocksetViewArrayOutput values.
// You can construct a concrete instance of `RocksetViewArrayInput` via:
//
//	RocksetViewArray{ RocksetViewArgs{...} }
type RocksetViewArrayInput interface {
	pulumi.Input

	ToRocksetViewArrayOutput() RocksetViewArrayOutput
	ToRocksetViewArrayOutputWithContext(context.Context) RocksetViewArrayOutput
}

type RocksetViewArray []RocksetViewInput

func (RocksetViewArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocksetView)(nil)).Elem()
}

func (i RocksetViewArray) ToRocksetViewArrayOutput() RocksetViewArrayOutput {
	return i.ToRocksetViewArrayOutputWithContext(context.Background())
}

func (i RocksetViewArray) ToRocksetViewArrayOutputWithContext(ctx context.Context) RocksetViewArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetViewArrayOutput)
}

// RocksetViewMapInput is an input type that accepts RocksetViewMap and RocksetViewMapOutput values.
// You can construct a concrete instance of `RocksetViewMapInput` via:
//
//	RocksetViewMap{ "key": RocksetViewArgs{...} }
type RocksetViewMapInput interface {
	pulumi.Input

	ToRocksetViewMapOutput() RocksetViewMapOutput
	ToRocksetViewMapOutputWithContext(context.Context) RocksetViewMapOutput
}

type RocksetViewMap map[string]RocksetViewInput

func (RocksetViewMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocksetView)(nil)).Elem()
}

func (i RocksetViewMap) ToRocksetViewMapOutput() RocksetViewMapOutput {
	return i.ToRocksetViewMapOutputWithContext(context.Background())
}

func (i RocksetViewMap) ToRocksetViewMapOutputWithContext(ctx context.Context) RocksetViewMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetViewMapOutput)
}

type RocksetViewOutput struct{ *pulumi.OutputState }

func (RocksetViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RocksetView)(nil)).Elem()
}

func (o RocksetViewOutput) ToRocksetViewOutput() RocksetViewOutput {
	return o
}

func (o RocksetViewOutput) ToRocksetViewOutputWithContext(ctx context.Context) RocksetViewOutput {
	return o
}

// The user who created the view.
func (o RocksetViewOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v *RocksetView) pulumi.StringOutput { return v.CreatedBy }).(pulumi.StringOutput)
}

// Text describing the collection.
func (o RocksetViewOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocksetView) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique name for the view in the workspace. Can contain alphanumeric or dash characters.
func (o RocksetViewOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RocksetView) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// SQL query used for thw view.
func (o RocksetViewOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v *RocksetView) pulumi.StringOutput { return v.Query }).(pulumi.StringOutput)
}

// Workspace name.
func (o RocksetViewOutput) Workspace() pulumi.StringOutput {
	return o.ApplyT(func(v *RocksetView) pulumi.StringOutput { return v.Workspace }).(pulumi.StringOutput)
}

type RocksetViewArrayOutput struct{ *pulumi.OutputState }

func (RocksetViewArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocksetView)(nil)).Elem()
}

func (o RocksetViewArrayOutput) ToRocksetViewArrayOutput() RocksetViewArrayOutput {
	return o
}

func (o RocksetViewArrayOutput) ToRocksetViewArrayOutputWithContext(ctx context.Context) RocksetViewArrayOutput {
	return o
}

func (o RocksetViewArrayOutput) Index(i pulumi.IntInput) RocksetViewOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RocksetView {
		return vs[0].([]*RocksetView)[vs[1].(int)]
	}).(RocksetViewOutput)
}

type RocksetViewMapOutput struct{ *pulumi.OutputState }

func (RocksetViewMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocksetView)(nil)).Elem()
}

func (o RocksetViewMapOutput) ToRocksetViewMapOutput() RocksetViewMapOutput {
	return o
}

func (o RocksetViewMapOutput) ToRocksetViewMapOutputWithContext(ctx context.Context) RocksetViewMapOutput {
	return o
}

func (o RocksetViewMapOutput) MapIndex(k pulumi.StringInput) RocksetViewOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RocksetView {
		return vs[0].(map[string]*RocksetView)[vs[1].(string)]
	}).(RocksetViewOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetViewInput)(nil)).Elem(), &RocksetView{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetViewArrayInput)(nil)).Elem(), RocksetViewArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetViewMapInput)(nil)).Elem(), RocksetViewMap{})
	pulumi.RegisterOutputType(RocksetViewOutput{})
	pulumi.RegisterOutputType(RocksetViewArrayOutput{})
	pulumi.RegisterOutputType(RocksetViewMapOutput{})
}
