// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rockset

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RocksetDynamodbCollectionSource struct {
	// AWS region name of DynamoDB table, by default us-west-2 is used.
	AwsRegion *string `pulumi:"awsRegion"`
	// The name of the Rockset DynamoDB integration.
	IntegrationName string `pulumi:"integrationName"`
	// Max RCU usage for scan.
	Rcu *int `pulumi:"rcu"`
	// DynamoDB scan end time.
	ScanEndTime *string `pulumi:"scanEndTime"`
	// Number of records inserted using scan.
	ScanRecordsProcessed *int `pulumi:"scanRecordsProcessed"`
	// DynamoDB scan start time.
	ScanStartTime *string `pulumi:"scanStartTime"`
	// Number of records in DynamoDB table at time of scan.
	ScanTotalRecords *int `pulumi:"scanTotalRecords"`
	// State of current ingest for this table.
	State *string `pulumi:"state"`
	// ISO-8601 date when source was last processed.
	StreamLastProcessedAt *string `pulumi:"streamLastProcessedAt"`
	// Name of DynamoDB table containing data.
	TableName string `pulumi:"tableName"`
	// Whether the initial table scan should use the DynamoDB scan API. If false, export will be performed using an S3 bucket.
	UseScanApi *bool `pulumi:"useScanApi"`
}

// RocksetDynamodbCollectionSourceInput is an input type that accepts RocksetDynamodbCollectionSourceArgs and RocksetDynamodbCollectionSourceOutput values.
// You can construct a concrete instance of `RocksetDynamodbCollectionSourceInput` via:
//
//	RocksetDynamodbCollectionSourceArgs{...}
type RocksetDynamodbCollectionSourceInput interface {
	pulumi.Input

	ToRocksetDynamodbCollectionSourceOutput() RocksetDynamodbCollectionSourceOutput
	ToRocksetDynamodbCollectionSourceOutputWithContext(context.Context) RocksetDynamodbCollectionSourceOutput
}

type RocksetDynamodbCollectionSourceArgs struct {
	// AWS region name of DynamoDB table, by default us-west-2 is used.
	AwsRegion pulumi.StringPtrInput `pulumi:"awsRegion"`
	// The name of the Rockset DynamoDB integration.
	IntegrationName pulumi.StringInput `pulumi:"integrationName"`
	// Max RCU usage for scan.
	Rcu pulumi.IntPtrInput `pulumi:"rcu"`
	// DynamoDB scan end time.
	ScanEndTime pulumi.StringPtrInput `pulumi:"scanEndTime"`
	// Number of records inserted using scan.
	ScanRecordsProcessed pulumi.IntPtrInput `pulumi:"scanRecordsProcessed"`
	// DynamoDB scan start time.
	ScanStartTime pulumi.StringPtrInput `pulumi:"scanStartTime"`
	// Number of records in DynamoDB table at time of scan.
	ScanTotalRecords pulumi.IntPtrInput `pulumi:"scanTotalRecords"`
	// State of current ingest for this table.
	State pulumi.StringPtrInput `pulumi:"state"`
	// ISO-8601 date when source was last processed.
	StreamLastProcessedAt pulumi.StringPtrInput `pulumi:"streamLastProcessedAt"`
	// Name of DynamoDB table containing data.
	TableName pulumi.StringInput `pulumi:"tableName"`
	// Whether the initial table scan should use the DynamoDB scan API. If false, export will be performed using an S3 bucket.
	UseScanApi pulumi.BoolPtrInput `pulumi:"useScanApi"`
}

func (RocksetDynamodbCollectionSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RocksetDynamodbCollectionSource)(nil)).Elem()
}

func (i RocksetDynamodbCollectionSourceArgs) ToRocksetDynamodbCollectionSourceOutput() RocksetDynamodbCollectionSourceOutput {
	return i.ToRocksetDynamodbCollectionSourceOutputWithContext(context.Background())
}

func (i RocksetDynamodbCollectionSourceArgs) ToRocksetDynamodbCollectionSourceOutputWithContext(ctx context.Context) RocksetDynamodbCollectionSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetDynamodbCollectionSourceOutput)
}

// RocksetDynamodbCollectionSourceArrayInput is an input type that accepts RocksetDynamodbCollectionSourceArray and RocksetDynamodbCollectionSourceArrayOutput values.
// You can construct a concrete instance of `RocksetDynamodbCollectionSourceArrayInput` via:
//
//	RocksetDynamodbCollectionSourceArray{ RocksetDynamodbCollectionSourceArgs{...} }
type RocksetDynamodbCollectionSourceArrayInput interface {
	pulumi.Input

	ToRocksetDynamodbCollectionSourceArrayOutput() RocksetDynamodbCollectionSourceArrayOutput
	ToRocksetDynamodbCollectionSourceArrayOutputWithContext(context.Context) RocksetDynamodbCollectionSourceArrayOutput
}

type RocksetDynamodbCollectionSourceArray []RocksetDynamodbCollectionSourceInput

func (RocksetDynamodbCollectionSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RocksetDynamodbCollectionSource)(nil)).Elem()
}

func (i RocksetDynamodbCollectionSourceArray) ToRocksetDynamodbCollectionSourceArrayOutput() RocksetDynamodbCollectionSourceArrayOutput {
	return i.ToRocksetDynamodbCollectionSourceArrayOutputWithContext(context.Background())
}

func (i RocksetDynamodbCollectionSourceArray) ToRocksetDynamodbCollectionSourceArrayOutputWithContext(ctx context.Context) RocksetDynamodbCollectionSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetDynamodbCollectionSourceArrayOutput)
}

type RocksetDynamodbCollectionSourceOutput struct{ *pulumi.OutputState }

func (RocksetDynamodbCollectionSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RocksetDynamodbCollectionSource)(nil)).Elem()
}

func (o RocksetDynamodbCollectionSourceOutput) ToRocksetDynamodbCollectionSourceOutput() RocksetDynamodbCollectionSourceOutput {
	return o
}

func (o RocksetDynamodbCollectionSourceOutput) ToRocksetDynamodbCollectionSourceOutputWithContext(ctx context.Context) RocksetDynamodbCollectionSourceOutput {
	return o
}

// AWS region name of DynamoDB table, by default us-west-2 is used.
func (o RocksetDynamodbCollectionSourceOutput) AwsRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocksetDynamodbCollectionSource) *string { return v.AwsRegion }).(pulumi.StringPtrOutput)
}

// The name of the Rockset DynamoDB integration.
func (o RocksetDynamodbCollectionSourceOutput) IntegrationName() pulumi.StringOutput {
	return o.ApplyT(func(v RocksetDynamodbCollectionSource) string { return v.IntegrationName }).(pulumi.StringOutput)
}

// Max RCU usage for scan.
func (o RocksetDynamodbCollectionSourceOutput) Rcu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RocksetDynamodbCollectionSource) *int { return v.Rcu }).(pulumi.IntPtrOutput)
}

// DynamoDB scan end time.
func (o RocksetDynamodbCollectionSourceOutput) ScanEndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocksetDynamodbCollectionSource) *string { return v.ScanEndTime }).(pulumi.StringPtrOutput)
}

// Number of records inserted using scan.
func (o RocksetDynamodbCollectionSourceOutput) ScanRecordsProcessed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RocksetDynamodbCollectionSource) *int { return v.ScanRecordsProcessed }).(pulumi.IntPtrOutput)
}

// DynamoDB scan start time.
func (o RocksetDynamodbCollectionSourceOutput) ScanStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocksetDynamodbCollectionSource) *string { return v.ScanStartTime }).(pulumi.StringPtrOutput)
}

// Number of records in DynamoDB table at time of scan.
func (o RocksetDynamodbCollectionSourceOutput) ScanTotalRecords() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RocksetDynamodbCollectionSource) *int { return v.ScanTotalRecords }).(pulumi.IntPtrOutput)
}

// State of current ingest for this table.
func (o RocksetDynamodbCollectionSourceOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocksetDynamodbCollectionSource) *string { return v.State }).(pulumi.StringPtrOutput)
}

// ISO-8601 date when source was last processed.
func (o RocksetDynamodbCollectionSourceOutput) StreamLastProcessedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocksetDynamodbCollectionSource) *string { return v.StreamLastProcessedAt }).(pulumi.StringPtrOutput)
}

// Name of DynamoDB table containing data.
func (o RocksetDynamodbCollectionSourceOutput) TableName() pulumi.StringOutput {
	return o.ApplyT(func(v RocksetDynamodbCollectionSource) string { return v.TableName }).(pulumi.StringOutput)
}

// Whether the initial table scan should use the DynamoDB scan API. If false, export will be performed using an S3 bucket.
func (o RocksetDynamodbCollectionSourceOutput) UseScanApi() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RocksetDynamodbCollectionSource) *bool { return v.UseScanApi }).(pulumi.BoolPtrOutput)
}

type RocksetDynamodbCollectionSourceArrayOutput struct{ *pulumi.OutputState }

func (RocksetDynamodbCollectionSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RocksetDynamodbCollectionSource)(nil)).Elem()
}

func (o RocksetDynamodbCollectionSourceArrayOutput) ToRocksetDynamodbCollectionSourceArrayOutput() RocksetDynamodbCollectionSourceArrayOutput {
	return o
}

func (o RocksetDynamodbCollectionSourceArrayOutput) ToRocksetDynamodbCollectionSourceArrayOutputWithContext(ctx context.Context) RocksetDynamodbCollectionSourceArrayOutput {
	return o
}

func (o RocksetDynamodbCollectionSourceArrayOutput) Index(i pulumi.IntInput) RocksetDynamodbCollectionSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RocksetDynamodbCollectionSource {
		return vs[0].([]RocksetDynamodbCollectionSource)[vs[1].(int)]
	}).(RocksetDynamodbCollectionSourceOutput)
}

type RocksetGcsCollectionSource struct {
	// GCS bucket containing the target data.
	Bucket string                         `pulumi:"bucket"`
	Csv    *RocksetGcsCollectionSourceCsv `pulumi:"csv"`
	// Format of the data. One of: json, csv, xml. xml and csv blocks can only be set for their respective formats.
	Format string `pulumi:"format"`
	// The name of the Rockset GCS integration.
	IntegrationName string `pulumi:"integrationName"`
	// Simple path prefix to GCS key.
	Prefix *string                        `pulumi:"prefix"`
	Xml    *RocksetGcsCollectionSourceXml `pulumi:"xml"`
}

// RocksetGcsCollectionSourceInput is an input type that accepts RocksetGcsCollectionSourceArgs and RocksetGcsCollectionSourceOutput values.
// You can construct a concrete instance of `RocksetGcsCollectionSourceInput` via:
//
//	RocksetGcsCollectionSourceArgs{...}
type RocksetGcsCollectionSourceInput interface {
	pulumi.Input

	ToRocksetGcsCollectionSourceOutput() RocksetGcsCollectionSourceOutput
	ToRocksetGcsCollectionSourceOutputWithContext(context.Context) RocksetGcsCollectionSourceOutput
}

type RocksetGcsCollectionSourceArgs struct {
	// GCS bucket containing the target data.
	Bucket pulumi.StringInput                    `pulumi:"bucket"`
	Csv    RocksetGcsCollectionSourceCsvPtrInput `pulumi:"csv"`
	// Format of the data. One of: json, csv, xml. xml and csv blocks can only be set for their respective formats.
	Format pulumi.StringInput `pulumi:"format"`
	// The name of the Rockset GCS integration.
	IntegrationName pulumi.StringInput `pulumi:"integrationName"`
	// Simple path prefix to GCS key.
	Prefix pulumi.StringPtrInput                 `pulumi:"prefix"`
	Xml    RocksetGcsCollectionSourceXmlPtrInput `pulumi:"xml"`
}

func (RocksetGcsCollectionSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RocksetGcsCollectionSource)(nil)).Elem()
}

func (i RocksetGcsCollectionSourceArgs) ToRocksetGcsCollectionSourceOutput() RocksetGcsCollectionSourceOutput {
	return i.ToRocksetGcsCollectionSourceOutputWithContext(context.Background())
}

func (i RocksetGcsCollectionSourceArgs) ToRocksetGcsCollectionSourceOutputWithContext(ctx context.Context) RocksetGcsCollectionSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetGcsCollectionSourceOutput)
}

// RocksetGcsCollectionSourceArrayInput is an input type that accepts RocksetGcsCollectionSourceArray and RocksetGcsCollectionSourceArrayOutput values.
// You can construct a concrete instance of `RocksetGcsCollectionSourceArrayInput` via:
//
//	RocksetGcsCollectionSourceArray{ RocksetGcsCollectionSourceArgs{...} }
type RocksetGcsCollectionSourceArrayInput interface {
	pulumi.Input

	ToRocksetGcsCollectionSourceArrayOutput() RocksetGcsCollectionSourceArrayOutput
	ToRocksetGcsCollectionSourceArrayOutputWithContext(context.Context) RocksetGcsCollectionSourceArrayOutput
}

type RocksetGcsCollectionSourceArray []RocksetGcsCollectionSourceInput

func (RocksetGcsCollectionSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RocksetGcsCollectionSource)(nil)).Elem()
}

func (i RocksetGcsCollectionSourceArray) ToRocksetGcsCollectionSourceArrayOutput() RocksetGcsCollectionSourceArrayOutput {
	return i.ToRocksetGcsCollectionSourceArrayOutputWithContext(context.Background())
}

func (i RocksetGcsCollectionSourceArray) ToRocksetGcsCollectionSourceArrayOutputWithContext(ctx context.Context) RocksetGcsCollectionSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetGcsCollectionSourceArrayOutput)
}

type RocksetGcsCollectionSourceOutput struct{ *pulumi.OutputState }

func (RocksetGcsCollectionSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RocksetGcsCollectionSource)(nil)).Elem()
}

func (o RocksetGcsCollectionSourceOutput) ToRocksetGcsCollectionSourceOutput() RocksetGcsCollectionSourceOutput {
	return o
}

func (o RocksetGcsCollectionSourceOutput) ToRocksetGcsCollectionSourceOutputWithContext(ctx context.Context) RocksetGcsCollectionSourceOutput {
	return o
}

// GCS bucket containing the target data.
func (o RocksetGcsCollectionSourceOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v RocksetGcsCollectionSource) string { return v.Bucket }).(pulumi.StringOutput)
}

func (o RocksetGcsCollectionSourceOutput) Csv() RocksetGcsCollectionSourceCsvPtrOutput {
	return o.ApplyT(func(v RocksetGcsCollectionSource) *RocksetGcsCollectionSourceCsv { return v.Csv }).(RocksetGcsCollectionSourceCsvPtrOutput)
}

// Format of the data. One of: json, csv, xml. xml and csv blocks can only be set for their respective formats.
func (o RocksetGcsCollectionSourceOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v RocksetGcsCollectionSource) string { return v.Format }).(pulumi.StringOutput)
}

// The name of the Rockset GCS integration.
func (o RocksetGcsCollectionSourceOutput) IntegrationName() pulumi.StringOutput {
	return o.ApplyT(func(v RocksetGcsCollectionSource) string { return v.IntegrationName }).(pulumi.StringOutput)
}

// Simple path prefix to GCS key.
func (o RocksetGcsCollectionSourceOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocksetGcsCollectionSource) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

func (o RocksetGcsCollectionSourceOutput) Xml() RocksetGcsCollectionSourceXmlPtrOutput {
	return o.ApplyT(func(v RocksetGcsCollectionSource) *RocksetGcsCollectionSourceXml { return v.Xml }).(RocksetGcsCollectionSourceXmlPtrOutput)
}

type RocksetGcsCollectionSourceArrayOutput struct{ *pulumi.OutputState }

func (RocksetGcsCollectionSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RocksetGcsCollectionSource)(nil)).Elem()
}

func (o RocksetGcsCollectionSourceArrayOutput) ToRocksetGcsCollectionSourceArrayOutput() RocksetGcsCollectionSourceArrayOutput {
	return o
}

func (o RocksetGcsCollectionSourceArrayOutput) ToRocksetGcsCollectionSourceArrayOutputWithContext(ctx context.Context) RocksetGcsCollectionSourceArrayOutput {
	return o
}

func (o RocksetGcsCollectionSourceArrayOutput) Index(i pulumi.IntInput) RocksetGcsCollectionSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RocksetGcsCollectionSource {
		return vs[0].([]RocksetGcsCollectionSource)[vs[1].(int)]
	}).(RocksetGcsCollectionSourceOutput)
}

type RocksetGcsCollectionSourceCsv struct {
	ColumnNames            []string `pulumi:"columnNames"`
	ColumnTypes            []string `pulumi:"columnTypes"`
	Encoding               *string  `pulumi:"encoding"`
	EscapeChar             *string  `pulumi:"escapeChar"`
	FirstLineAsColumnNames *bool    `pulumi:"firstLineAsColumnNames"`
	QuoteChar              *string  `pulumi:"quoteChar"`
	Separator              *string  `pulumi:"separator"`
}

// RocksetGcsCollectionSourceCsvInput is an input type that accepts RocksetGcsCollectionSourceCsvArgs and RocksetGcsCollectionSourceCsvOutput values.
// You can construct a concrete instance of `RocksetGcsCollectionSourceCsvInput` via:
//
//	RocksetGcsCollectionSourceCsvArgs{...}
type RocksetGcsCollectionSourceCsvInput interface {
	pulumi.Input

	ToRocksetGcsCollectionSourceCsvOutput() RocksetGcsCollectionSourceCsvOutput
	ToRocksetGcsCollectionSourceCsvOutputWithContext(context.Context) RocksetGcsCollectionSourceCsvOutput
}

type RocksetGcsCollectionSourceCsvArgs struct {
	ColumnNames            pulumi.StringArrayInput `pulumi:"columnNames"`
	ColumnTypes            pulumi.StringArrayInput `pulumi:"columnTypes"`
	Encoding               pulumi.StringPtrInput   `pulumi:"encoding"`
	EscapeChar             pulumi.StringPtrInput   `pulumi:"escapeChar"`
	FirstLineAsColumnNames pulumi.BoolPtrInput     `pulumi:"firstLineAsColumnNames"`
	QuoteChar              pulumi.StringPtrInput   `pulumi:"quoteChar"`
	Separator              pulumi.StringPtrInput   `pulumi:"separator"`
}

func (RocksetGcsCollectionSourceCsvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RocksetGcsCollectionSourceCsv)(nil)).Elem()
}

func (i RocksetGcsCollectionSourceCsvArgs) ToRocksetGcsCollectionSourceCsvOutput() RocksetGcsCollectionSourceCsvOutput {
	return i.ToRocksetGcsCollectionSourceCsvOutputWithContext(context.Background())
}

func (i RocksetGcsCollectionSourceCsvArgs) ToRocksetGcsCollectionSourceCsvOutputWithContext(ctx context.Context) RocksetGcsCollectionSourceCsvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetGcsCollectionSourceCsvOutput)
}

func (i RocksetGcsCollectionSourceCsvArgs) ToRocksetGcsCollectionSourceCsvPtrOutput() RocksetGcsCollectionSourceCsvPtrOutput {
	return i.ToRocksetGcsCollectionSourceCsvPtrOutputWithContext(context.Background())
}

func (i RocksetGcsCollectionSourceCsvArgs) ToRocksetGcsCollectionSourceCsvPtrOutputWithContext(ctx context.Context) RocksetGcsCollectionSourceCsvPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetGcsCollectionSourceCsvOutput).ToRocksetGcsCollectionSourceCsvPtrOutputWithContext(ctx)
}

// RocksetGcsCollectionSourceCsvPtrInput is an input type that accepts RocksetGcsCollectionSourceCsvArgs, RocksetGcsCollectionSourceCsvPtr and RocksetGcsCollectionSourceCsvPtrOutput values.
// You can construct a concrete instance of `RocksetGcsCollectionSourceCsvPtrInput` via:
//
//	        RocksetGcsCollectionSourceCsvArgs{...}
//
//	or:
//
//	        nil
type RocksetGcsCollectionSourceCsvPtrInput interface {
	pulumi.Input

	ToRocksetGcsCollectionSourceCsvPtrOutput() RocksetGcsCollectionSourceCsvPtrOutput
	ToRocksetGcsCollectionSourceCsvPtrOutputWithContext(context.Context) RocksetGcsCollectionSourceCsvPtrOutput
}

type rocksetGcsCollectionSourceCsvPtrType RocksetGcsCollectionSourceCsvArgs

func RocksetGcsCollectionSourceCsvPtr(v *RocksetGcsCollectionSourceCsvArgs) RocksetGcsCollectionSourceCsvPtrInput {
	return (*rocksetGcsCollectionSourceCsvPtrType)(v)
}

func (*rocksetGcsCollectionSourceCsvPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RocksetGcsCollectionSourceCsv)(nil)).Elem()
}

func (i *rocksetGcsCollectionSourceCsvPtrType) ToRocksetGcsCollectionSourceCsvPtrOutput() RocksetGcsCollectionSourceCsvPtrOutput {
	return i.ToRocksetGcsCollectionSourceCsvPtrOutputWithContext(context.Background())
}

func (i *rocksetGcsCollectionSourceCsvPtrType) ToRocksetGcsCollectionSourceCsvPtrOutputWithContext(ctx context.Context) RocksetGcsCollectionSourceCsvPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetGcsCollectionSourceCsvPtrOutput)
}

type RocksetGcsCollectionSourceCsvOutput struct{ *pulumi.OutputState }

func (RocksetGcsCollectionSourceCsvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RocksetGcsCollectionSourceCsv)(nil)).Elem()
}

func (o RocksetGcsCollectionSourceCsvOutput) ToRocksetGcsCollectionSourceCsvOutput() RocksetGcsCollectionSourceCsvOutput {
	return o
}

func (o RocksetGcsCollectionSourceCsvOutput) ToRocksetGcsCollectionSourceCsvOutputWithContext(ctx context.Context) RocksetGcsCollectionSourceCsvOutput {
	return o
}

func (o RocksetGcsCollectionSourceCsvOutput) ToRocksetGcsCollectionSourceCsvPtrOutput() RocksetGcsCollectionSourceCsvPtrOutput {
	return o.ToRocksetGcsCollectionSourceCsvPtrOutputWithContext(context.Background())
}

func (o RocksetGcsCollectionSourceCsvOutput) ToRocksetGcsCollectionSourceCsvPtrOutputWithContext(ctx context.Context) RocksetGcsCollectionSourceCsvPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RocksetGcsCollectionSourceCsv) *RocksetGcsCollectionSourceCsv {
		return &v
	}).(RocksetGcsCollectionSourceCsvPtrOutput)
}

func (o RocksetGcsCollectionSourceCsvOutput) ColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RocksetGcsCollectionSourceCsv) []string { return v.ColumnNames }).(pulumi.StringArrayOutput)
}

func (o RocksetGcsCollectionSourceCsvOutput) ColumnTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RocksetGcsCollectionSourceCsv) []string { return v.ColumnTypes }).(pulumi.StringArrayOutput)
}

func (o RocksetGcsCollectionSourceCsvOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocksetGcsCollectionSourceCsv) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

func (o RocksetGcsCollectionSourceCsvOutput) EscapeChar() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocksetGcsCollectionSourceCsv) *string { return v.EscapeChar }).(pulumi.StringPtrOutput)
}

func (o RocksetGcsCollectionSourceCsvOutput) FirstLineAsColumnNames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RocksetGcsCollectionSourceCsv) *bool { return v.FirstLineAsColumnNames }).(pulumi.BoolPtrOutput)
}

func (o RocksetGcsCollectionSourceCsvOutput) QuoteChar() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocksetGcsCollectionSourceCsv) *string { return v.QuoteChar }).(pulumi.StringPtrOutput)
}

func (o RocksetGcsCollectionSourceCsvOutput) Separator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocksetGcsCollectionSourceCsv) *string { return v.Separator }).(pulumi.StringPtrOutput)
}

type RocksetGcsCollectionSourceCsvPtrOutput struct{ *pulumi.OutputState }

func (RocksetGcsCollectionSourceCsvPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RocksetGcsCollectionSourceCsv)(nil)).Elem()
}

func (o RocksetGcsCollectionSourceCsvPtrOutput) ToRocksetGcsCollectionSourceCsvPtrOutput() RocksetGcsCollectionSourceCsvPtrOutput {
	return o
}

func (o RocksetGcsCollectionSourceCsvPtrOutput) ToRocksetGcsCollectionSourceCsvPtrOutputWithContext(ctx context.Context) RocksetGcsCollectionSourceCsvPtrOutput {
	return o
}

func (o RocksetGcsCollectionSourceCsvPtrOutput) Elem() RocksetGcsCollectionSourceCsvOutput {
	return o.ApplyT(func(v *RocksetGcsCollectionSourceCsv) RocksetGcsCollectionSourceCsv {
		if v != nil {
			return *v
		}
		var ret RocksetGcsCollectionSourceCsv
		return ret
	}).(RocksetGcsCollectionSourceCsvOutput)
}

func (o RocksetGcsCollectionSourceCsvPtrOutput) ColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RocksetGcsCollectionSourceCsv) []string {
		if v == nil {
			return nil
		}
		return v.ColumnNames
	}).(pulumi.StringArrayOutput)
}

func (o RocksetGcsCollectionSourceCsvPtrOutput) ColumnTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RocksetGcsCollectionSourceCsv) []string {
		if v == nil {
			return nil
		}
		return v.ColumnTypes
	}).(pulumi.StringArrayOutput)
}

func (o RocksetGcsCollectionSourceCsvPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocksetGcsCollectionSourceCsv) *string {
		if v == nil {
			return nil
		}
		return v.Encoding
	}).(pulumi.StringPtrOutput)
}

func (o RocksetGcsCollectionSourceCsvPtrOutput) EscapeChar() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocksetGcsCollectionSourceCsv) *string {
		if v == nil {
			return nil
		}
		return v.EscapeChar
	}).(pulumi.StringPtrOutput)
}

func (o RocksetGcsCollectionSourceCsvPtrOutput) FirstLineAsColumnNames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RocksetGcsCollectionSourceCsv) *bool {
		if v == nil {
			return nil
		}
		return v.FirstLineAsColumnNames
	}).(pulumi.BoolPtrOutput)
}

func (o RocksetGcsCollectionSourceCsvPtrOutput) QuoteChar() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocksetGcsCollectionSourceCsv) *string {
		if v == nil {
			return nil
		}
		return v.QuoteChar
	}).(pulumi.StringPtrOutput)
}

func (o RocksetGcsCollectionSourceCsvPtrOutput) Separator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocksetGcsCollectionSourceCsv) *string {
		if v == nil {
			return nil
		}
		return v.Separator
	}).(pulumi.StringPtrOutput)
}

type RocksetGcsCollectionSourceXml struct {
	AttributePrefix *string `pulumi:"attributePrefix"`
	DocTag          *string `pulumi:"docTag"`
	Encoding        *string `pulumi:"encoding"`
	RootTag         *string `pulumi:"rootTag"`
	ValueTag        *string `pulumi:"valueTag"`
}

// RocksetGcsCollectionSourceXmlInput is an input type that accepts RocksetGcsCollectionSourceXmlArgs and RocksetGcsCollectionSourceXmlOutput values.
// You can construct a concrete instance of `RocksetGcsCollectionSourceXmlInput` via:
//
//	RocksetGcsCollectionSourceXmlArgs{...}
type RocksetGcsCollectionSourceXmlInput interface {
	pulumi.Input

	ToRocksetGcsCollectionSourceXmlOutput() RocksetGcsCollectionSourceXmlOutput
	ToRocksetGcsCollectionSourceXmlOutputWithContext(context.Context) RocksetGcsCollectionSourceXmlOutput
}

type RocksetGcsCollectionSourceXmlArgs struct {
	AttributePrefix pulumi.StringPtrInput `pulumi:"attributePrefix"`
	DocTag          pulumi.StringPtrInput `pulumi:"docTag"`
	Encoding        pulumi.StringPtrInput `pulumi:"encoding"`
	RootTag         pulumi.StringPtrInput `pulumi:"rootTag"`
	ValueTag        pulumi.StringPtrInput `pulumi:"valueTag"`
}

func (RocksetGcsCollectionSourceXmlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RocksetGcsCollectionSourceXml)(nil)).Elem()
}

func (i RocksetGcsCollectionSourceXmlArgs) ToRocksetGcsCollectionSourceXmlOutput() RocksetGcsCollectionSourceXmlOutput {
	return i.ToRocksetGcsCollectionSourceXmlOutputWithContext(context.Background())
}

func (i RocksetGcsCollectionSourceXmlArgs) ToRocksetGcsCollectionSourceXmlOutputWithContext(ctx context.Context) RocksetGcsCollectionSourceXmlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetGcsCollectionSourceXmlOutput)
}

func (i RocksetGcsCollectionSourceXmlArgs) ToRocksetGcsCollectionSourceXmlPtrOutput() RocksetGcsCollectionSourceXmlPtrOutput {
	return i.ToRocksetGcsCollectionSourceXmlPtrOutputWithContext(context.Background())
}

func (i RocksetGcsCollectionSourceXmlArgs) ToRocksetGcsCollectionSourceXmlPtrOutputWithContext(ctx context.Context) RocksetGcsCollectionSourceXmlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetGcsCollectionSourceXmlOutput).ToRocksetGcsCollectionSourceXmlPtrOutputWithContext(ctx)
}

// RocksetGcsCollectionSourceXmlPtrInput is an input type that accepts RocksetGcsCollectionSourceXmlArgs, RocksetGcsCollectionSourceXmlPtr and RocksetGcsCollectionSourceXmlPtrOutput values.
// You can construct a concrete instance of `RocksetGcsCollectionSourceXmlPtrInput` via:
//
//	        RocksetGcsCollectionSourceXmlArgs{...}
//
//	or:
//
//	        nil
type RocksetGcsCollectionSourceXmlPtrInput interface {
	pulumi.Input

	ToRocksetGcsCollectionSourceXmlPtrOutput() RocksetGcsCollectionSourceXmlPtrOutput
	ToRocksetGcsCollectionSourceXmlPtrOutputWithContext(context.Context) RocksetGcsCollectionSourceXmlPtrOutput
}

type rocksetGcsCollectionSourceXmlPtrType RocksetGcsCollectionSourceXmlArgs

func RocksetGcsCollectionSourceXmlPtr(v *RocksetGcsCollectionSourceXmlArgs) RocksetGcsCollectionSourceXmlPtrInput {
	return (*rocksetGcsCollectionSourceXmlPtrType)(v)
}

func (*rocksetGcsCollectionSourceXmlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RocksetGcsCollectionSourceXml)(nil)).Elem()
}

func (i *rocksetGcsCollectionSourceXmlPtrType) ToRocksetGcsCollectionSourceXmlPtrOutput() RocksetGcsCollectionSourceXmlPtrOutput {
	return i.ToRocksetGcsCollectionSourceXmlPtrOutputWithContext(context.Background())
}

func (i *rocksetGcsCollectionSourceXmlPtrType) ToRocksetGcsCollectionSourceXmlPtrOutputWithContext(ctx context.Context) RocksetGcsCollectionSourceXmlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetGcsCollectionSourceXmlPtrOutput)
}

type RocksetGcsCollectionSourceXmlOutput struct{ *pulumi.OutputState }

func (RocksetGcsCollectionSourceXmlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RocksetGcsCollectionSourceXml)(nil)).Elem()
}

func (o RocksetGcsCollectionSourceXmlOutput) ToRocksetGcsCollectionSourceXmlOutput() RocksetGcsCollectionSourceXmlOutput {
	return o
}

func (o RocksetGcsCollectionSourceXmlOutput) ToRocksetGcsCollectionSourceXmlOutputWithContext(ctx context.Context) RocksetGcsCollectionSourceXmlOutput {
	return o
}

func (o RocksetGcsCollectionSourceXmlOutput) ToRocksetGcsCollectionSourceXmlPtrOutput() RocksetGcsCollectionSourceXmlPtrOutput {
	return o.ToRocksetGcsCollectionSourceXmlPtrOutputWithContext(context.Background())
}

func (o RocksetGcsCollectionSourceXmlOutput) ToRocksetGcsCollectionSourceXmlPtrOutputWithContext(ctx context.Context) RocksetGcsCollectionSourceXmlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RocksetGcsCollectionSourceXml) *RocksetGcsCollectionSourceXml {
		return &v
	}).(RocksetGcsCollectionSourceXmlPtrOutput)
}

func (o RocksetGcsCollectionSourceXmlOutput) AttributePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocksetGcsCollectionSourceXml) *string { return v.AttributePrefix }).(pulumi.StringPtrOutput)
}

func (o RocksetGcsCollectionSourceXmlOutput) DocTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocksetGcsCollectionSourceXml) *string { return v.DocTag }).(pulumi.StringPtrOutput)
}

func (o RocksetGcsCollectionSourceXmlOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocksetGcsCollectionSourceXml) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

func (o RocksetGcsCollectionSourceXmlOutput) RootTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocksetGcsCollectionSourceXml) *string { return v.RootTag }).(pulumi.StringPtrOutput)
}

func (o RocksetGcsCollectionSourceXmlOutput) ValueTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocksetGcsCollectionSourceXml) *string { return v.ValueTag }).(pulumi.StringPtrOutput)
}

type RocksetGcsCollectionSourceXmlPtrOutput struct{ *pulumi.OutputState }

func (RocksetGcsCollectionSourceXmlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RocksetGcsCollectionSourceXml)(nil)).Elem()
}

func (o RocksetGcsCollectionSourceXmlPtrOutput) ToRocksetGcsCollectionSourceXmlPtrOutput() RocksetGcsCollectionSourceXmlPtrOutput {
	return o
}

func (o RocksetGcsCollectionSourceXmlPtrOutput) ToRocksetGcsCollectionSourceXmlPtrOutputWithContext(ctx context.Context) RocksetGcsCollectionSourceXmlPtrOutput {
	return o
}

func (o RocksetGcsCollectionSourceXmlPtrOutput) Elem() RocksetGcsCollectionSourceXmlOutput {
	return o.ApplyT(func(v *RocksetGcsCollectionSourceXml) RocksetGcsCollectionSourceXml {
		if v != nil {
			return *v
		}
		var ret RocksetGcsCollectionSourceXml
		return ret
	}).(RocksetGcsCollectionSourceXmlOutput)
}

func (o RocksetGcsCollectionSourceXmlPtrOutput) AttributePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocksetGcsCollectionSourceXml) *string {
		if v == nil {
			return nil
		}
		return v.AttributePrefix
	}).(pulumi.StringPtrOutput)
}

func (o RocksetGcsCollectionSourceXmlPtrOutput) DocTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocksetGcsCollectionSourceXml) *string {
		if v == nil {
			return nil
		}
		return v.DocTag
	}).(pulumi.StringPtrOutput)
}

func (o RocksetGcsCollectionSourceXmlPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocksetGcsCollectionSourceXml) *string {
		if v == nil {
			return nil
		}
		return v.Encoding
	}).(pulumi.StringPtrOutput)
}

func (o RocksetGcsCollectionSourceXmlPtrOutput) RootTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocksetGcsCollectionSourceXml) *string {
		if v == nil {
			return nil
		}
		return v.RootTag
	}).(pulumi.StringPtrOutput)
}

func (o RocksetGcsCollectionSourceXmlPtrOutput) ValueTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocksetGcsCollectionSourceXml) *string {
		if v == nil {
			return nil
		}
		return v.ValueTag
	}).(pulumi.StringPtrOutput)
}

type RocksetKafkaCollectionSource struct {
	// The Kafka consumer group Id being used.
	ConsumerGroupId *string `pulumi:"consumerGroupId"`
	// The name of the Rockset Kafka integration.
	IntegrationName string `pulumi:"integrationName"`
	// The offset reset policy. Possible values: LATEST, EARLIEST. Only valid with v3 collections.
	OffsetResetPolicy *string                              `pulumi:"offsetResetPolicy"`
	Statuses          []RocksetKafkaCollectionSourceStatus `pulumi:"statuses"`
	// Name of Kafka topic to be tailed.
	TopicName string `pulumi:"topicName"`
	// Whether to use v3 integration. Required if the kafka integration uses v3.
	UseV3 *bool `pulumi:"useV3"`
}

// RocksetKafkaCollectionSourceInput is an input type that accepts RocksetKafkaCollectionSourceArgs and RocksetKafkaCollectionSourceOutput values.
// You can construct a concrete instance of `RocksetKafkaCollectionSourceInput` via:
//
//	RocksetKafkaCollectionSourceArgs{...}
type RocksetKafkaCollectionSourceInput interface {
	pulumi.Input

	ToRocksetKafkaCollectionSourceOutput() RocksetKafkaCollectionSourceOutput
	ToRocksetKafkaCollectionSourceOutputWithContext(context.Context) RocksetKafkaCollectionSourceOutput
}

type RocksetKafkaCollectionSourceArgs struct {
	// The Kafka consumer group Id being used.
	ConsumerGroupId pulumi.StringPtrInput `pulumi:"consumerGroupId"`
	// The name of the Rockset Kafka integration.
	IntegrationName pulumi.StringInput `pulumi:"integrationName"`
	// The offset reset policy. Possible values: LATEST, EARLIEST. Only valid with v3 collections.
	OffsetResetPolicy pulumi.StringPtrInput                        `pulumi:"offsetResetPolicy"`
	Statuses          RocksetKafkaCollectionSourceStatusArrayInput `pulumi:"statuses"`
	// Name of Kafka topic to be tailed.
	TopicName pulumi.StringInput `pulumi:"topicName"`
	// Whether to use v3 integration. Required if the kafka integration uses v3.
	UseV3 pulumi.BoolPtrInput `pulumi:"useV3"`
}

func (RocksetKafkaCollectionSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RocksetKafkaCollectionSource)(nil)).Elem()
}

func (i RocksetKafkaCollectionSourceArgs) ToRocksetKafkaCollectionSourceOutput() RocksetKafkaCollectionSourceOutput {
	return i.ToRocksetKafkaCollectionSourceOutputWithContext(context.Background())
}

func (i RocksetKafkaCollectionSourceArgs) ToRocksetKafkaCollectionSourceOutputWithContext(ctx context.Context) RocksetKafkaCollectionSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetKafkaCollectionSourceOutput)
}

// RocksetKafkaCollectionSourceArrayInput is an input type that accepts RocksetKafkaCollectionSourceArray and RocksetKafkaCollectionSourceArrayOutput values.
// You can construct a concrete instance of `RocksetKafkaCollectionSourceArrayInput` via:
//
//	RocksetKafkaCollectionSourceArray{ RocksetKafkaCollectionSourceArgs{...} }
type RocksetKafkaCollectionSourceArrayInput interface {
	pulumi.Input

	ToRocksetKafkaCollectionSourceArrayOutput() RocksetKafkaCollectionSourceArrayOutput
	ToRocksetKafkaCollectionSourceArrayOutputWithContext(context.Context) RocksetKafkaCollectionSourceArrayOutput
}

type RocksetKafkaCollectionSourceArray []RocksetKafkaCollectionSourceInput

func (RocksetKafkaCollectionSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RocksetKafkaCollectionSource)(nil)).Elem()
}

func (i RocksetKafkaCollectionSourceArray) ToRocksetKafkaCollectionSourceArrayOutput() RocksetKafkaCollectionSourceArrayOutput {
	return i.ToRocksetKafkaCollectionSourceArrayOutputWithContext(context.Background())
}

func (i RocksetKafkaCollectionSourceArray) ToRocksetKafkaCollectionSourceArrayOutputWithContext(ctx context.Context) RocksetKafkaCollectionSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetKafkaCollectionSourceArrayOutput)
}

type RocksetKafkaCollectionSourceOutput struct{ *pulumi.OutputState }

func (RocksetKafkaCollectionSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RocksetKafkaCollectionSource)(nil)).Elem()
}

func (o RocksetKafkaCollectionSourceOutput) ToRocksetKafkaCollectionSourceOutput() RocksetKafkaCollectionSourceOutput {
	return o
}

func (o RocksetKafkaCollectionSourceOutput) ToRocksetKafkaCollectionSourceOutputWithContext(ctx context.Context) RocksetKafkaCollectionSourceOutput {
	return o
}

// The Kafka consumer group Id being used.
func (o RocksetKafkaCollectionSourceOutput) ConsumerGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocksetKafkaCollectionSource) *string { return v.ConsumerGroupId }).(pulumi.StringPtrOutput)
}

// The name of the Rockset Kafka integration.
func (o RocksetKafkaCollectionSourceOutput) IntegrationName() pulumi.StringOutput {
	return o.ApplyT(func(v RocksetKafkaCollectionSource) string { return v.IntegrationName }).(pulumi.StringOutput)
}

// The offset reset policy. Possible values: LATEST, EARLIEST. Only valid with v3 collections.
func (o RocksetKafkaCollectionSourceOutput) OffsetResetPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocksetKafkaCollectionSource) *string { return v.OffsetResetPolicy }).(pulumi.StringPtrOutput)
}

func (o RocksetKafkaCollectionSourceOutput) Statuses() RocksetKafkaCollectionSourceStatusArrayOutput {
	return o.ApplyT(func(v RocksetKafkaCollectionSource) []RocksetKafkaCollectionSourceStatus { return v.Statuses }).(RocksetKafkaCollectionSourceStatusArrayOutput)
}

// Name of Kafka topic to be tailed.
func (o RocksetKafkaCollectionSourceOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v RocksetKafkaCollectionSource) string { return v.TopicName }).(pulumi.StringOutput)
}

// Whether to use v3 integration. Required if the kafka integration uses v3.
func (o RocksetKafkaCollectionSourceOutput) UseV3() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RocksetKafkaCollectionSource) *bool { return v.UseV3 }).(pulumi.BoolPtrOutput)
}

type RocksetKafkaCollectionSourceArrayOutput struct{ *pulumi.OutputState }

func (RocksetKafkaCollectionSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RocksetKafkaCollectionSource)(nil)).Elem()
}

func (o RocksetKafkaCollectionSourceArrayOutput) ToRocksetKafkaCollectionSourceArrayOutput() RocksetKafkaCollectionSourceArrayOutput {
	return o
}

func (o RocksetKafkaCollectionSourceArrayOutput) ToRocksetKafkaCollectionSourceArrayOutputWithContext(ctx context.Context) RocksetKafkaCollectionSourceArrayOutput {
	return o
}

func (o RocksetKafkaCollectionSourceArrayOutput) Index(i pulumi.IntInput) RocksetKafkaCollectionSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RocksetKafkaCollectionSource {
		return vs[0].([]RocksetKafkaCollectionSource)[vs[1].(int)]
	}).(RocksetKafkaCollectionSourceOutput)
}

type RocksetKafkaCollectionSourceStatus struct {
	DocumentsProcessed *int                                          `pulumi:"documentsProcessed"`
	LastConsumedTime   *string                                       `pulumi:"lastConsumedTime"`
	Partitions         []RocksetKafkaCollectionSourceStatusPartition `pulumi:"partitions"`
	State              *string                                       `pulumi:"state"`
}

// RocksetKafkaCollectionSourceStatusInput is an input type that accepts RocksetKafkaCollectionSourceStatusArgs and RocksetKafkaCollectionSourceStatusOutput values.
// You can construct a concrete instance of `RocksetKafkaCollectionSourceStatusInput` via:
//
//	RocksetKafkaCollectionSourceStatusArgs{...}
type RocksetKafkaCollectionSourceStatusInput interface {
	pulumi.Input

	ToRocksetKafkaCollectionSourceStatusOutput() RocksetKafkaCollectionSourceStatusOutput
	ToRocksetKafkaCollectionSourceStatusOutputWithContext(context.Context) RocksetKafkaCollectionSourceStatusOutput
}

type RocksetKafkaCollectionSourceStatusArgs struct {
	DocumentsProcessed pulumi.IntPtrInput                                    `pulumi:"documentsProcessed"`
	LastConsumedTime   pulumi.StringPtrInput                                 `pulumi:"lastConsumedTime"`
	Partitions         RocksetKafkaCollectionSourceStatusPartitionArrayInput `pulumi:"partitions"`
	State              pulumi.StringPtrInput                                 `pulumi:"state"`
}

func (RocksetKafkaCollectionSourceStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RocksetKafkaCollectionSourceStatus)(nil)).Elem()
}

func (i RocksetKafkaCollectionSourceStatusArgs) ToRocksetKafkaCollectionSourceStatusOutput() RocksetKafkaCollectionSourceStatusOutput {
	return i.ToRocksetKafkaCollectionSourceStatusOutputWithContext(context.Background())
}

func (i RocksetKafkaCollectionSourceStatusArgs) ToRocksetKafkaCollectionSourceStatusOutputWithContext(ctx context.Context) RocksetKafkaCollectionSourceStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetKafkaCollectionSourceStatusOutput)
}

// RocksetKafkaCollectionSourceStatusArrayInput is an input type that accepts RocksetKafkaCollectionSourceStatusArray and RocksetKafkaCollectionSourceStatusArrayOutput values.
// You can construct a concrete instance of `RocksetKafkaCollectionSourceStatusArrayInput` via:
//
//	RocksetKafkaCollectionSourceStatusArray{ RocksetKafkaCollectionSourceStatusArgs{...} }
type RocksetKafkaCollectionSourceStatusArrayInput interface {
	pulumi.Input

	ToRocksetKafkaCollectionSourceStatusArrayOutput() RocksetKafkaCollectionSourceStatusArrayOutput
	ToRocksetKafkaCollectionSourceStatusArrayOutputWithContext(context.Context) RocksetKafkaCollectionSourceStatusArrayOutput
}

type RocksetKafkaCollectionSourceStatusArray []RocksetKafkaCollectionSourceStatusInput

func (RocksetKafkaCollectionSourceStatusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RocksetKafkaCollectionSourceStatus)(nil)).Elem()
}

func (i RocksetKafkaCollectionSourceStatusArray) ToRocksetKafkaCollectionSourceStatusArrayOutput() RocksetKafkaCollectionSourceStatusArrayOutput {
	return i.ToRocksetKafkaCollectionSourceStatusArrayOutputWithContext(context.Background())
}

func (i RocksetKafkaCollectionSourceStatusArray) ToRocksetKafkaCollectionSourceStatusArrayOutputWithContext(ctx context.Context) RocksetKafkaCollectionSourceStatusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetKafkaCollectionSourceStatusArrayOutput)
}

type RocksetKafkaCollectionSourceStatusOutput struct{ *pulumi.OutputState }

func (RocksetKafkaCollectionSourceStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RocksetKafkaCollectionSourceStatus)(nil)).Elem()
}

func (o RocksetKafkaCollectionSourceStatusOutput) ToRocksetKafkaCollectionSourceStatusOutput() RocksetKafkaCollectionSourceStatusOutput {
	return o
}

func (o RocksetKafkaCollectionSourceStatusOutput) ToRocksetKafkaCollectionSourceStatusOutputWithContext(ctx context.Context) RocksetKafkaCollectionSourceStatusOutput {
	return o
}

func (o RocksetKafkaCollectionSourceStatusOutput) DocumentsProcessed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RocksetKafkaCollectionSourceStatus) *int { return v.DocumentsProcessed }).(pulumi.IntPtrOutput)
}

func (o RocksetKafkaCollectionSourceStatusOutput) LastConsumedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocksetKafkaCollectionSourceStatus) *string { return v.LastConsumedTime }).(pulumi.StringPtrOutput)
}

func (o RocksetKafkaCollectionSourceStatusOutput) Partitions() RocksetKafkaCollectionSourceStatusPartitionArrayOutput {
	return o.ApplyT(func(v RocksetKafkaCollectionSourceStatus) []RocksetKafkaCollectionSourceStatusPartition {
		return v.Partitions
	}).(RocksetKafkaCollectionSourceStatusPartitionArrayOutput)
}

func (o RocksetKafkaCollectionSourceStatusOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocksetKafkaCollectionSourceStatus) *string { return v.State }).(pulumi.StringPtrOutput)
}

type RocksetKafkaCollectionSourceStatusArrayOutput struct{ *pulumi.OutputState }

func (RocksetKafkaCollectionSourceStatusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RocksetKafkaCollectionSourceStatus)(nil)).Elem()
}

func (o RocksetKafkaCollectionSourceStatusArrayOutput) ToRocksetKafkaCollectionSourceStatusArrayOutput() RocksetKafkaCollectionSourceStatusArrayOutput {
	return o
}

func (o RocksetKafkaCollectionSourceStatusArrayOutput) ToRocksetKafkaCollectionSourceStatusArrayOutputWithContext(ctx context.Context) RocksetKafkaCollectionSourceStatusArrayOutput {
	return o
}

func (o RocksetKafkaCollectionSourceStatusArrayOutput) Index(i pulumi.IntInput) RocksetKafkaCollectionSourceStatusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RocksetKafkaCollectionSourceStatus {
		return vs[0].([]RocksetKafkaCollectionSourceStatus)[vs[1].(int)]
	}).(RocksetKafkaCollectionSourceStatusOutput)
}

type RocksetKafkaCollectionSourceStatusPartition struct {
	OffsetLag       *int `pulumi:"offsetLag"`
	PartitionNumber *int `pulumi:"partitionNumber"`
	PartitionOffset *int `pulumi:"partitionOffset"`
}

// RocksetKafkaCollectionSourceStatusPartitionInput is an input type that accepts RocksetKafkaCollectionSourceStatusPartitionArgs and RocksetKafkaCollectionSourceStatusPartitionOutput values.
// You can construct a concrete instance of `RocksetKafkaCollectionSourceStatusPartitionInput` via:
//
//	RocksetKafkaCollectionSourceStatusPartitionArgs{...}
type RocksetKafkaCollectionSourceStatusPartitionInput interface {
	pulumi.Input

	ToRocksetKafkaCollectionSourceStatusPartitionOutput() RocksetKafkaCollectionSourceStatusPartitionOutput
	ToRocksetKafkaCollectionSourceStatusPartitionOutputWithContext(context.Context) RocksetKafkaCollectionSourceStatusPartitionOutput
}

type RocksetKafkaCollectionSourceStatusPartitionArgs struct {
	OffsetLag       pulumi.IntPtrInput `pulumi:"offsetLag"`
	PartitionNumber pulumi.IntPtrInput `pulumi:"partitionNumber"`
	PartitionOffset pulumi.IntPtrInput `pulumi:"partitionOffset"`
}

func (RocksetKafkaCollectionSourceStatusPartitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RocksetKafkaCollectionSourceStatusPartition)(nil)).Elem()
}

func (i RocksetKafkaCollectionSourceStatusPartitionArgs) ToRocksetKafkaCollectionSourceStatusPartitionOutput() RocksetKafkaCollectionSourceStatusPartitionOutput {
	return i.ToRocksetKafkaCollectionSourceStatusPartitionOutputWithContext(context.Background())
}

func (i RocksetKafkaCollectionSourceStatusPartitionArgs) ToRocksetKafkaCollectionSourceStatusPartitionOutputWithContext(ctx context.Context) RocksetKafkaCollectionSourceStatusPartitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetKafkaCollectionSourceStatusPartitionOutput)
}

// RocksetKafkaCollectionSourceStatusPartitionArrayInput is an input type that accepts RocksetKafkaCollectionSourceStatusPartitionArray and RocksetKafkaCollectionSourceStatusPartitionArrayOutput values.
// You can construct a concrete instance of `RocksetKafkaCollectionSourceStatusPartitionArrayInput` via:
//
//	RocksetKafkaCollectionSourceStatusPartitionArray{ RocksetKafkaCollectionSourceStatusPartitionArgs{...} }
type RocksetKafkaCollectionSourceStatusPartitionArrayInput interface {
	pulumi.Input

	ToRocksetKafkaCollectionSourceStatusPartitionArrayOutput() RocksetKafkaCollectionSourceStatusPartitionArrayOutput
	ToRocksetKafkaCollectionSourceStatusPartitionArrayOutputWithContext(context.Context) RocksetKafkaCollectionSourceStatusPartitionArrayOutput
}

type RocksetKafkaCollectionSourceStatusPartitionArray []RocksetKafkaCollectionSourceStatusPartitionInput

func (RocksetKafkaCollectionSourceStatusPartitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RocksetKafkaCollectionSourceStatusPartition)(nil)).Elem()
}

func (i RocksetKafkaCollectionSourceStatusPartitionArray) ToRocksetKafkaCollectionSourceStatusPartitionArrayOutput() RocksetKafkaCollectionSourceStatusPartitionArrayOutput {
	return i.ToRocksetKafkaCollectionSourceStatusPartitionArrayOutputWithContext(context.Background())
}

func (i RocksetKafkaCollectionSourceStatusPartitionArray) ToRocksetKafkaCollectionSourceStatusPartitionArrayOutputWithContext(ctx context.Context) RocksetKafkaCollectionSourceStatusPartitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetKafkaCollectionSourceStatusPartitionArrayOutput)
}

type RocksetKafkaCollectionSourceStatusPartitionOutput struct{ *pulumi.OutputState }

func (RocksetKafkaCollectionSourceStatusPartitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RocksetKafkaCollectionSourceStatusPartition)(nil)).Elem()
}

func (o RocksetKafkaCollectionSourceStatusPartitionOutput) ToRocksetKafkaCollectionSourceStatusPartitionOutput() RocksetKafkaCollectionSourceStatusPartitionOutput {
	return o
}

func (o RocksetKafkaCollectionSourceStatusPartitionOutput) ToRocksetKafkaCollectionSourceStatusPartitionOutputWithContext(ctx context.Context) RocksetKafkaCollectionSourceStatusPartitionOutput {
	return o
}

func (o RocksetKafkaCollectionSourceStatusPartitionOutput) OffsetLag() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RocksetKafkaCollectionSourceStatusPartition) *int { return v.OffsetLag }).(pulumi.IntPtrOutput)
}

func (o RocksetKafkaCollectionSourceStatusPartitionOutput) PartitionNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RocksetKafkaCollectionSourceStatusPartition) *int { return v.PartitionNumber }).(pulumi.IntPtrOutput)
}

func (o RocksetKafkaCollectionSourceStatusPartitionOutput) PartitionOffset() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RocksetKafkaCollectionSourceStatusPartition) *int { return v.PartitionOffset }).(pulumi.IntPtrOutput)
}

type RocksetKafkaCollectionSourceStatusPartitionArrayOutput struct{ *pulumi.OutputState }

func (RocksetKafkaCollectionSourceStatusPartitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RocksetKafkaCollectionSourceStatusPartition)(nil)).Elem()
}

func (o RocksetKafkaCollectionSourceStatusPartitionArrayOutput) ToRocksetKafkaCollectionSourceStatusPartitionArrayOutput() RocksetKafkaCollectionSourceStatusPartitionArrayOutput {
	return o
}

func (o RocksetKafkaCollectionSourceStatusPartitionArrayOutput) ToRocksetKafkaCollectionSourceStatusPartitionArrayOutputWithContext(ctx context.Context) RocksetKafkaCollectionSourceStatusPartitionArrayOutput {
	return o
}

func (o RocksetKafkaCollectionSourceStatusPartitionArrayOutput) Index(i pulumi.IntInput) RocksetKafkaCollectionSourceStatusPartitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RocksetKafkaCollectionSourceStatusPartition {
		return vs[0].([]RocksetKafkaCollectionSourceStatusPartition)[vs[1].(int)]
	}).(RocksetKafkaCollectionSourceStatusPartitionOutput)
}

type RocksetKinesisCollectionSource struct {
	// AWS region name for the Kinesis stream, by default us-west-2 is used
	AwsRegion *string `pulumi:"awsRegion"`
	// Set of fields that correspond to a DMS primary key. Can only be set if format is mysql or postgres.
	DmsPrimaryKeys []string `pulumi:"dmsPrimaryKeys"`
	// Format of the data. One of: json, mysql, postgres. dms*primary*keys list can only be set for mysql or postgres.
	Format string `pulumi:"format"`
	// The name of the Rockset Kinesis integration.
	IntegrationName string `pulumi:"integrationName"`
	// Name of Kinesis stream.
	StreamName string `pulumi:"streamName"`
}

// RocksetKinesisCollectionSourceInput is an input type that accepts RocksetKinesisCollectionSourceArgs and RocksetKinesisCollectionSourceOutput values.
// You can construct a concrete instance of `RocksetKinesisCollectionSourceInput` via:
//
//	RocksetKinesisCollectionSourceArgs{...}
type RocksetKinesisCollectionSourceInput interface {
	pulumi.Input

	ToRocksetKinesisCollectionSourceOutput() RocksetKinesisCollectionSourceOutput
	ToRocksetKinesisCollectionSourceOutputWithContext(context.Context) RocksetKinesisCollectionSourceOutput
}

type RocksetKinesisCollectionSourceArgs struct {
	// AWS region name for the Kinesis stream, by default us-west-2 is used
	AwsRegion pulumi.StringPtrInput `pulumi:"awsRegion"`
	// Set of fields that correspond to a DMS primary key. Can only be set if format is mysql or postgres.
	DmsPrimaryKeys pulumi.StringArrayInput `pulumi:"dmsPrimaryKeys"`
	// Format of the data. One of: json, mysql, postgres. dms*primary*keys list can only be set for mysql or postgres.
	Format pulumi.StringInput `pulumi:"format"`
	// The name of the Rockset Kinesis integration.
	IntegrationName pulumi.StringInput `pulumi:"integrationName"`
	// Name of Kinesis stream.
	StreamName pulumi.StringInput `pulumi:"streamName"`
}

func (RocksetKinesisCollectionSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RocksetKinesisCollectionSource)(nil)).Elem()
}

func (i RocksetKinesisCollectionSourceArgs) ToRocksetKinesisCollectionSourceOutput() RocksetKinesisCollectionSourceOutput {
	return i.ToRocksetKinesisCollectionSourceOutputWithContext(context.Background())
}

func (i RocksetKinesisCollectionSourceArgs) ToRocksetKinesisCollectionSourceOutputWithContext(ctx context.Context) RocksetKinesisCollectionSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetKinesisCollectionSourceOutput)
}

// RocksetKinesisCollectionSourceArrayInput is an input type that accepts RocksetKinesisCollectionSourceArray and RocksetKinesisCollectionSourceArrayOutput values.
// You can construct a concrete instance of `RocksetKinesisCollectionSourceArrayInput` via:
//
//	RocksetKinesisCollectionSourceArray{ RocksetKinesisCollectionSourceArgs{...} }
type RocksetKinesisCollectionSourceArrayInput interface {
	pulumi.Input

	ToRocksetKinesisCollectionSourceArrayOutput() RocksetKinesisCollectionSourceArrayOutput
	ToRocksetKinesisCollectionSourceArrayOutputWithContext(context.Context) RocksetKinesisCollectionSourceArrayOutput
}

type RocksetKinesisCollectionSourceArray []RocksetKinesisCollectionSourceInput

func (RocksetKinesisCollectionSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RocksetKinesisCollectionSource)(nil)).Elem()
}

func (i RocksetKinesisCollectionSourceArray) ToRocksetKinesisCollectionSourceArrayOutput() RocksetKinesisCollectionSourceArrayOutput {
	return i.ToRocksetKinesisCollectionSourceArrayOutputWithContext(context.Background())
}

func (i RocksetKinesisCollectionSourceArray) ToRocksetKinesisCollectionSourceArrayOutputWithContext(ctx context.Context) RocksetKinesisCollectionSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetKinesisCollectionSourceArrayOutput)
}

type RocksetKinesisCollectionSourceOutput struct{ *pulumi.OutputState }

func (RocksetKinesisCollectionSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RocksetKinesisCollectionSource)(nil)).Elem()
}

func (o RocksetKinesisCollectionSourceOutput) ToRocksetKinesisCollectionSourceOutput() RocksetKinesisCollectionSourceOutput {
	return o
}

func (o RocksetKinesisCollectionSourceOutput) ToRocksetKinesisCollectionSourceOutputWithContext(ctx context.Context) RocksetKinesisCollectionSourceOutput {
	return o
}

// AWS region name for the Kinesis stream, by default us-west-2 is used
func (o RocksetKinesisCollectionSourceOutput) AwsRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocksetKinesisCollectionSource) *string { return v.AwsRegion }).(pulumi.StringPtrOutput)
}

// Set of fields that correspond to a DMS primary key. Can only be set if format is mysql or postgres.
func (o RocksetKinesisCollectionSourceOutput) DmsPrimaryKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RocksetKinesisCollectionSource) []string { return v.DmsPrimaryKeys }).(pulumi.StringArrayOutput)
}

// Format of the data. One of: json, mysql, postgres. dms*primary*keys list can only be set for mysql or postgres.
func (o RocksetKinesisCollectionSourceOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v RocksetKinesisCollectionSource) string { return v.Format }).(pulumi.StringOutput)
}

// The name of the Rockset Kinesis integration.
func (o RocksetKinesisCollectionSourceOutput) IntegrationName() pulumi.StringOutput {
	return o.ApplyT(func(v RocksetKinesisCollectionSource) string { return v.IntegrationName }).(pulumi.StringOutput)
}

// Name of Kinesis stream.
func (o RocksetKinesisCollectionSourceOutput) StreamName() pulumi.StringOutput {
	return o.ApplyT(func(v RocksetKinesisCollectionSource) string { return v.StreamName }).(pulumi.StringOutput)
}

type RocksetKinesisCollectionSourceArrayOutput struct{ *pulumi.OutputState }

func (RocksetKinesisCollectionSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RocksetKinesisCollectionSource)(nil)).Elem()
}

func (o RocksetKinesisCollectionSourceArrayOutput) ToRocksetKinesisCollectionSourceArrayOutput() RocksetKinesisCollectionSourceArrayOutput {
	return o
}

func (o RocksetKinesisCollectionSourceArrayOutput) ToRocksetKinesisCollectionSourceArrayOutputWithContext(ctx context.Context) RocksetKinesisCollectionSourceArrayOutput {
	return o
}

func (o RocksetKinesisCollectionSourceArrayOutput) Index(i pulumi.IntInput) RocksetKinesisCollectionSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RocksetKinesisCollectionSource {
		return vs[0].([]RocksetKinesisCollectionSource)[vs[1].(int)]
	}).(RocksetKinesisCollectionSourceOutput)
}

type RocksetMongodbCollectionSource struct {
	// MongoDB collection name of the target collection.
	CollectionName string `pulumi:"collectionName"`
	// MongoDB database name containing the target collection.
	DatabaseName string `pulumi:"databaseName"`
	// The name of the Rockset MongoDB integration.
	IntegrationName string `pulumi:"integrationName"`
	// MongoDB scan end time.
	ScanEndTime *string `pulumi:"scanEndTime"`
	// Number of records inserted using scan.
	ScanRecordsProcessed *int `pulumi:"scanRecordsProcessed"`
	// MongoDB scan start time.
	ScanStartTime *string `pulumi:"scanStartTime"`
	// Number of records in MongoDB table at time of scan.
	ScanTotalRecords *int `pulumi:"scanTotalRecords"`
	// State of current ingest for this table.
	State *string `pulumi:"state"`
	// ISO-8601 date when delete from source was last processed.
	StreamLastDeleteProcessedAt *string `pulumi:"streamLastDeleteProcessedAt"`
	// ISO-8601 date when new insert from source was last processed.
	StreamLastInsertProcessedAt *string `pulumi:"streamLastInsertProcessedAt"`
	// ISO-8601 date when update from source was last processed.
	StreamLastUpdateProcessedAt *string `pulumi:"streamLastUpdateProcessedAt"`
	// Number of new records deleted using stream.
	StreamRecordsDeleted *int `pulumi:"streamRecordsDeleted"`
	// Number of new records inserted using stream.
	StreamRecordsInserted *int `pulumi:"streamRecordsInserted"`
	// Number of new records updated using stream.
	StreamRecordsUpdated *int `pulumi:"streamRecordsUpdated"`
}

// RocksetMongodbCollectionSourceInput is an input type that accepts RocksetMongodbCollectionSourceArgs and RocksetMongodbCollectionSourceOutput values.
// You can construct a concrete instance of `RocksetMongodbCollectionSourceInput` via:
//
//	RocksetMongodbCollectionSourceArgs{...}
type RocksetMongodbCollectionSourceInput interface {
	pulumi.Input

	ToRocksetMongodbCollectionSourceOutput() RocksetMongodbCollectionSourceOutput
	ToRocksetMongodbCollectionSourceOutputWithContext(context.Context) RocksetMongodbCollectionSourceOutput
}

type RocksetMongodbCollectionSourceArgs struct {
	// MongoDB collection name of the target collection.
	CollectionName pulumi.StringInput `pulumi:"collectionName"`
	// MongoDB database name containing the target collection.
	DatabaseName pulumi.StringInput `pulumi:"databaseName"`
	// The name of the Rockset MongoDB integration.
	IntegrationName pulumi.StringInput `pulumi:"integrationName"`
	// MongoDB scan end time.
	ScanEndTime pulumi.StringPtrInput `pulumi:"scanEndTime"`
	// Number of records inserted using scan.
	ScanRecordsProcessed pulumi.IntPtrInput `pulumi:"scanRecordsProcessed"`
	// MongoDB scan start time.
	ScanStartTime pulumi.StringPtrInput `pulumi:"scanStartTime"`
	// Number of records in MongoDB table at time of scan.
	ScanTotalRecords pulumi.IntPtrInput `pulumi:"scanTotalRecords"`
	// State of current ingest for this table.
	State pulumi.StringPtrInput `pulumi:"state"`
	// ISO-8601 date when delete from source was last processed.
	StreamLastDeleteProcessedAt pulumi.StringPtrInput `pulumi:"streamLastDeleteProcessedAt"`
	// ISO-8601 date when new insert from source was last processed.
	StreamLastInsertProcessedAt pulumi.StringPtrInput `pulumi:"streamLastInsertProcessedAt"`
	// ISO-8601 date when update from source was last processed.
	StreamLastUpdateProcessedAt pulumi.StringPtrInput `pulumi:"streamLastUpdateProcessedAt"`
	// Number of new records deleted using stream.
	StreamRecordsDeleted pulumi.IntPtrInput `pulumi:"streamRecordsDeleted"`
	// Number of new records inserted using stream.
	StreamRecordsInserted pulumi.IntPtrInput `pulumi:"streamRecordsInserted"`
	// Number of new records updated using stream.
	StreamRecordsUpdated pulumi.IntPtrInput `pulumi:"streamRecordsUpdated"`
}

func (RocksetMongodbCollectionSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RocksetMongodbCollectionSource)(nil)).Elem()
}

func (i RocksetMongodbCollectionSourceArgs) ToRocksetMongodbCollectionSourceOutput() RocksetMongodbCollectionSourceOutput {
	return i.ToRocksetMongodbCollectionSourceOutputWithContext(context.Background())
}

func (i RocksetMongodbCollectionSourceArgs) ToRocksetMongodbCollectionSourceOutputWithContext(ctx context.Context) RocksetMongodbCollectionSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetMongodbCollectionSourceOutput)
}

// RocksetMongodbCollectionSourceArrayInput is an input type that accepts RocksetMongodbCollectionSourceArray and RocksetMongodbCollectionSourceArrayOutput values.
// You can construct a concrete instance of `RocksetMongodbCollectionSourceArrayInput` via:
//
//	RocksetMongodbCollectionSourceArray{ RocksetMongodbCollectionSourceArgs{...} }
type RocksetMongodbCollectionSourceArrayInput interface {
	pulumi.Input

	ToRocksetMongodbCollectionSourceArrayOutput() RocksetMongodbCollectionSourceArrayOutput
	ToRocksetMongodbCollectionSourceArrayOutputWithContext(context.Context) RocksetMongodbCollectionSourceArrayOutput
}

type RocksetMongodbCollectionSourceArray []RocksetMongodbCollectionSourceInput

func (RocksetMongodbCollectionSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RocksetMongodbCollectionSource)(nil)).Elem()
}

func (i RocksetMongodbCollectionSourceArray) ToRocksetMongodbCollectionSourceArrayOutput() RocksetMongodbCollectionSourceArrayOutput {
	return i.ToRocksetMongodbCollectionSourceArrayOutputWithContext(context.Background())
}

func (i RocksetMongodbCollectionSourceArray) ToRocksetMongodbCollectionSourceArrayOutputWithContext(ctx context.Context) RocksetMongodbCollectionSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetMongodbCollectionSourceArrayOutput)
}

type RocksetMongodbCollectionSourceOutput struct{ *pulumi.OutputState }

func (RocksetMongodbCollectionSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RocksetMongodbCollectionSource)(nil)).Elem()
}

func (o RocksetMongodbCollectionSourceOutput) ToRocksetMongodbCollectionSourceOutput() RocksetMongodbCollectionSourceOutput {
	return o
}

func (o RocksetMongodbCollectionSourceOutput) ToRocksetMongodbCollectionSourceOutputWithContext(ctx context.Context) RocksetMongodbCollectionSourceOutput {
	return o
}

// MongoDB collection name of the target collection.
func (o RocksetMongodbCollectionSourceOutput) CollectionName() pulumi.StringOutput {
	return o.ApplyT(func(v RocksetMongodbCollectionSource) string { return v.CollectionName }).(pulumi.StringOutput)
}

// MongoDB database name containing the target collection.
func (o RocksetMongodbCollectionSourceOutput) DatabaseName() pulumi.StringOutput {
	return o.ApplyT(func(v RocksetMongodbCollectionSource) string { return v.DatabaseName }).(pulumi.StringOutput)
}

// The name of the Rockset MongoDB integration.
func (o RocksetMongodbCollectionSourceOutput) IntegrationName() pulumi.StringOutput {
	return o.ApplyT(func(v RocksetMongodbCollectionSource) string { return v.IntegrationName }).(pulumi.StringOutput)
}

// MongoDB scan end time.
func (o RocksetMongodbCollectionSourceOutput) ScanEndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocksetMongodbCollectionSource) *string { return v.ScanEndTime }).(pulumi.StringPtrOutput)
}

// Number of records inserted using scan.
func (o RocksetMongodbCollectionSourceOutput) ScanRecordsProcessed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RocksetMongodbCollectionSource) *int { return v.ScanRecordsProcessed }).(pulumi.IntPtrOutput)
}

// MongoDB scan start time.
func (o RocksetMongodbCollectionSourceOutput) ScanStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocksetMongodbCollectionSource) *string { return v.ScanStartTime }).(pulumi.StringPtrOutput)
}

// Number of records in MongoDB table at time of scan.
func (o RocksetMongodbCollectionSourceOutput) ScanTotalRecords() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RocksetMongodbCollectionSource) *int { return v.ScanTotalRecords }).(pulumi.IntPtrOutput)
}

// State of current ingest for this table.
func (o RocksetMongodbCollectionSourceOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocksetMongodbCollectionSource) *string { return v.State }).(pulumi.StringPtrOutput)
}

// ISO-8601 date when delete from source was last processed.
func (o RocksetMongodbCollectionSourceOutput) StreamLastDeleteProcessedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocksetMongodbCollectionSource) *string { return v.StreamLastDeleteProcessedAt }).(pulumi.StringPtrOutput)
}

// ISO-8601 date when new insert from source was last processed.
func (o RocksetMongodbCollectionSourceOutput) StreamLastInsertProcessedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocksetMongodbCollectionSource) *string { return v.StreamLastInsertProcessedAt }).(pulumi.StringPtrOutput)
}

// ISO-8601 date when update from source was last processed.
func (o RocksetMongodbCollectionSourceOutput) StreamLastUpdateProcessedAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocksetMongodbCollectionSource) *string { return v.StreamLastUpdateProcessedAt }).(pulumi.StringPtrOutput)
}

// Number of new records deleted using stream.
func (o RocksetMongodbCollectionSourceOutput) StreamRecordsDeleted() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RocksetMongodbCollectionSource) *int { return v.StreamRecordsDeleted }).(pulumi.IntPtrOutput)
}

// Number of new records inserted using stream.
func (o RocksetMongodbCollectionSourceOutput) StreamRecordsInserted() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RocksetMongodbCollectionSource) *int { return v.StreamRecordsInserted }).(pulumi.IntPtrOutput)
}

// Number of new records updated using stream.
func (o RocksetMongodbCollectionSourceOutput) StreamRecordsUpdated() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RocksetMongodbCollectionSource) *int { return v.StreamRecordsUpdated }).(pulumi.IntPtrOutput)
}

type RocksetMongodbCollectionSourceArrayOutput struct{ *pulumi.OutputState }

func (RocksetMongodbCollectionSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RocksetMongodbCollectionSource)(nil)).Elem()
}

func (o RocksetMongodbCollectionSourceArrayOutput) ToRocksetMongodbCollectionSourceArrayOutput() RocksetMongodbCollectionSourceArrayOutput {
	return o
}

func (o RocksetMongodbCollectionSourceArrayOutput) ToRocksetMongodbCollectionSourceArrayOutputWithContext(ctx context.Context) RocksetMongodbCollectionSourceArrayOutput {
	return o
}

func (o RocksetMongodbCollectionSourceArrayOutput) Index(i pulumi.IntInput) RocksetMongodbCollectionSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RocksetMongodbCollectionSource {
		return vs[0].([]RocksetMongodbCollectionSource)[vs[1].(int)]
	}).(RocksetMongodbCollectionSourceOutput)
}

type RocksetQueryLambdaSql struct {
	DefaultParameters []RocksetQueryLambdaSqlDefaultParameter `pulumi:"defaultParameters"`
	Query             string                                  `pulumi:"query"`
}

// RocksetQueryLambdaSqlInput is an input type that accepts RocksetQueryLambdaSqlArgs and RocksetQueryLambdaSqlOutput values.
// You can construct a concrete instance of `RocksetQueryLambdaSqlInput` via:
//
//	RocksetQueryLambdaSqlArgs{...}
type RocksetQueryLambdaSqlInput interface {
	pulumi.Input

	ToRocksetQueryLambdaSqlOutput() RocksetQueryLambdaSqlOutput
	ToRocksetQueryLambdaSqlOutputWithContext(context.Context) RocksetQueryLambdaSqlOutput
}

type RocksetQueryLambdaSqlArgs struct {
	DefaultParameters RocksetQueryLambdaSqlDefaultParameterArrayInput `pulumi:"defaultParameters"`
	Query             pulumi.StringInput                              `pulumi:"query"`
}

func (RocksetQueryLambdaSqlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RocksetQueryLambdaSql)(nil)).Elem()
}

func (i RocksetQueryLambdaSqlArgs) ToRocksetQueryLambdaSqlOutput() RocksetQueryLambdaSqlOutput {
	return i.ToRocksetQueryLambdaSqlOutputWithContext(context.Background())
}

func (i RocksetQueryLambdaSqlArgs) ToRocksetQueryLambdaSqlOutputWithContext(ctx context.Context) RocksetQueryLambdaSqlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetQueryLambdaSqlOutput)
}

// RocksetQueryLambdaSqlArrayInput is an input type that accepts RocksetQueryLambdaSqlArray and RocksetQueryLambdaSqlArrayOutput values.
// You can construct a concrete instance of `RocksetQueryLambdaSqlArrayInput` via:
//
//	RocksetQueryLambdaSqlArray{ RocksetQueryLambdaSqlArgs{...} }
type RocksetQueryLambdaSqlArrayInput interface {
	pulumi.Input

	ToRocksetQueryLambdaSqlArrayOutput() RocksetQueryLambdaSqlArrayOutput
	ToRocksetQueryLambdaSqlArrayOutputWithContext(context.Context) RocksetQueryLambdaSqlArrayOutput
}

type RocksetQueryLambdaSqlArray []RocksetQueryLambdaSqlInput

func (RocksetQueryLambdaSqlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RocksetQueryLambdaSql)(nil)).Elem()
}

func (i RocksetQueryLambdaSqlArray) ToRocksetQueryLambdaSqlArrayOutput() RocksetQueryLambdaSqlArrayOutput {
	return i.ToRocksetQueryLambdaSqlArrayOutputWithContext(context.Background())
}

func (i RocksetQueryLambdaSqlArray) ToRocksetQueryLambdaSqlArrayOutputWithContext(ctx context.Context) RocksetQueryLambdaSqlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetQueryLambdaSqlArrayOutput)
}

type RocksetQueryLambdaSqlOutput struct{ *pulumi.OutputState }

func (RocksetQueryLambdaSqlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RocksetQueryLambdaSql)(nil)).Elem()
}

func (o RocksetQueryLambdaSqlOutput) ToRocksetQueryLambdaSqlOutput() RocksetQueryLambdaSqlOutput {
	return o
}

func (o RocksetQueryLambdaSqlOutput) ToRocksetQueryLambdaSqlOutputWithContext(ctx context.Context) RocksetQueryLambdaSqlOutput {
	return o
}

func (o RocksetQueryLambdaSqlOutput) DefaultParameters() RocksetQueryLambdaSqlDefaultParameterArrayOutput {
	return o.ApplyT(func(v RocksetQueryLambdaSql) []RocksetQueryLambdaSqlDefaultParameter { return v.DefaultParameters }).(RocksetQueryLambdaSqlDefaultParameterArrayOutput)
}

func (o RocksetQueryLambdaSqlOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v RocksetQueryLambdaSql) string { return v.Query }).(pulumi.StringOutput)
}

type RocksetQueryLambdaSqlArrayOutput struct{ *pulumi.OutputState }

func (RocksetQueryLambdaSqlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RocksetQueryLambdaSql)(nil)).Elem()
}

func (o RocksetQueryLambdaSqlArrayOutput) ToRocksetQueryLambdaSqlArrayOutput() RocksetQueryLambdaSqlArrayOutput {
	return o
}

func (o RocksetQueryLambdaSqlArrayOutput) ToRocksetQueryLambdaSqlArrayOutputWithContext(ctx context.Context) RocksetQueryLambdaSqlArrayOutput {
	return o
}

func (o RocksetQueryLambdaSqlArrayOutput) Index(i pulumi.IntInput) RocksetQueryLambdaSqlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RocksetQueryLambdaSql {
		return vs[0].([]RocksetQueryLambdaSql)[vs[1].(int)]
	}).(RocksetQueryLambdaSqlOutput)
}

type RocksetQueryLambdaSqlDefaultParameter struct {
	// Unique identifier for the query lambda. Can contain alphanumeric or dash characters.
	Name  string `pulumi:"name"`
	Type  string `pulumi:"type"`
	Value string `pulumi:"value"`
}

// RocksetQueryLambdaSqlDefaultParameterInput is an input type that accepts RocksetQueryLambdaSqlDefaultParameterArgs and RocksetQueryLambdaSqlDefaultParameterOutput values.
// You can construct a concrete instance of `RocksetQueryLambdaSqlDefaultParameterInput` via:
//
//	RocksetQueryLambdaSqlDefaultParameterArgs{...}
type RocksetQueryLambdaSqlDefaultParameterInput interface {
	pulumi.Input

	ToRocksetQueryLambdaSqlDefaultParameterOutput() RocksetQueryLambdaSqlDefaultParameterOutput
	ToRocksetQueryLambdaSqlDefaultParameterOutputWithContext(context.Context) RocksetQueryLambdaSqlDefaultParameterOutput
}

type RocksetQueryLambdaSqlDefaultParameterArgs struct {
	// Unique identifier for the query lambda. Can contain alphanumeric or dash characters.
	Name  pulumi.StringInput `pulumi:"name"`
	Type  pulumi.StringInput `pulumi:"type"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (RocksetQueryLambdaSqlDefaultParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RocksetQueryLambdaSqlDefaultParameter)(nil)).Elem()
}

func (i RocksetQueryLambdaSqlDefaultParameterArgs) ToRocksetQueryLambdaSqlDefaultParameterOutput() RocksetQueryLambdaSqlDefaultParameterOutput {
	return i.ToRocksetQueryLambdaSqlDefaultParameterOutputWithContext(context.Background())
}

func (i RocksetQueryLambdaSqlDefaultParameterArgs) ToRocksetQueryLambdaSqlDefaultParameterOutputWithContext(ctx context.Context) RocksetQueryLambdaSqlDefaultParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetQueryLambdaSqlDefaultParameterOutput)
}

// RocksetQueryLambdaSqlDefaultParameterArrayInput is an input type that accepts RocksetQueryLambdaSqlDefaultParameterArray and RocksetQueryLambdaSqlDefaultParameterArrayOutput values.
// You can construct a concrete instance of `RocksetQueryLambdaSqlDefaultParameterArrayInput` via:
//
//	RocksetQueryLambdaSqlDefaultParameterArray{ RocksetQueryLambdaSqlDefaultParameterArgs{...} }
type RocksetQueryLambdaSqlDefaultParameterArrayInput interface {
	pulumi.Input

	ToRocksetQueryLambdaSqlDefaultParameterArrayOutput() RocksetQueryLambdaSqlDefaultParameterArrayOutput
	ToRocksetQueryLambdaSqlDefaultParameterArrayOutputWithContext(context.Context) RocksetQueryLambdaSqlDefaultParameterArrayOutput
}

type RocksetQueryLambdaSqlDefaultParameterArray []RocksetQueryLambdaSqlDefaultParameterInput

func (RocksetQueryLambdaSqlDefaultParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RocksetQueryLambdaSqlDefaultParameter)(nil)).Elem()
}

func (i RocksetQueryLambdaSqlDefaultParameterArray) ToRocksetQueryLambdaSqlDefaultParameterArrayOutput() RocksetQueryLambdaSqlDefaultParameterArrayOutput {
	return i.ToRocksetQueryLambdaSqlDefaultParameterArrayOutputWithContext(context.Background())
}

func (i RocksetQueryLambdaSqlDefaultParameterArray) ToRocksetQueryLambdaSqlDefaultParameterArrayOutputWithContext(ctx context.Context) RocksetQueryLambdaSqlDefaultParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetQueryLambdaSqlDefaultParameterArrayOutput)
}

type RocksetQueryLambdaSqlDefaultParameterOutput struct{ *pulumi.OutputState }

func (RocksetQueryLambdaSqlDefaultParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RocksetQueryLambdaSqlDefaultParameter)(nil)).Elem()
}

func (o RocksetQueryLambdaSqlDefaultParameterOutput) ToRocksetQueryLambdaSqlDefaultParameterOutput() RocksetQueryLambdaSqlDefaultParameterOutput {
	return o
}

func (o RocksetQueryLambdaSqlDefaultParameterOutput) ToRocksetQueryLambdaSqlDefaultParameterOutputWithContext(ctx context.Context) RocksetQueryLambdaSqlDefaultParameterOutput {
	return o
}

// Unique identifier for the query lambda. Can contain alphanumeric or dash characters.
func (o RocksetQueryLambdaSqlDefaultParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RocksetQueryLambdaSqlDefaultParameter) string { return v.Name }).(pulumi.StringOutput)
}

func (o RocksetQueryLambdaSqlDefaultParameterOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RocksetQueryLambdaSqlDefaultParameter) string { return v.Type }).(pulumi.StringOutput)
}

func (o RocksetQueryLambdaSqlDefaultParameterOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v RocksetQueryLambdaSqlDefaultParameter) string { return v.Value }).(pulumi.StringOutput)
}

type RocksetQueryLambdaSqlDefaultParameterArrayOutput struct{ *pulumi.OutputState }

func (RocksetQueryLambdaSqlDefaultParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RocksetQueryLambdaSqlDefaultParameter)(nil)).Elem()
}

func (o RocksetQueryLambdaSqlDefaultParameterArrayOutput) ToRocksetQueryLambdaSqlDefaultParameterArrayOutput() RocksetQueryLambdaSqlDefaultParameterArrayOutput {
	return o
}

func (o RocksetQueryLambdaSqlDefaultParameterArrayOutput) ToRocksetQueryLambdaSqlDefaultParameterArrayOutputWithContext(ctx context.Context) RocksetQueryLambdaSqlDefaultParameterArrayOutput {
	return o
}

func (o RocksetQueryLambdaSqlDefaultParameterArrayOutput) Index(i pulumi.IntInput) RocksetQueryLambdaSqlDefaultParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RocksetQueryLambdaSqlDefaultParameter {
		return vs[0].([]RocksetQueryLambdaSqlDefaultParameter)[vs[1].(int)]
	}).(RocksetQueryLambdaSqlDefaultParameterOutput)
}

type RocksetRolePrivilege struct {
	// The action allowed by this privilege.
	Action string `pulumi:"action"`
	// Rockset cluster ID for which this action is allowed. Only valid for Workspace actions. Use '*ALL*' for actions which apply to all clusters.
	Cluster *string `pulumi:"cluster"`
	// The resource on which this action is allowed. Defaults to 'All' if not specified.
	ResourceName *string `pulumi:"resourceName"`
}

// RocksetRolePrivilegeInput is an input type that accepts RocksetRolePrivilegeArgs and RocksetRolePrivilegeOutput values.
// You can construct a concrete instance of `RocksetRolePrivilegeInput` via:
//
//	RocksetRolePrivilegeArgs{...}
type RocksetRolePrivilegeInput interface {
	pulumi.Input

	ToRocksetRolePrivilegeOutput() RocksetRolePrivilegeOutput
	ToRocksetRolePrivilegeOutputWithContext(context.Context) RocksetRolePrivilegeOutput
}

type RocksetRolePrivilegeArgs struct {
	// The action allowed by this privilege.
	Action pulumi.StringInput `pulumi:"action"`
	// Rockset cluster ID for which this action is allowed. Only valid for Workspace actions. Use '*ALL*' for actions which apply to all clusters.
	Cluster pulumi.StringPtrInput `pulumi:"cluster"`
	// The resource on which this action is allowed. Defaults to 'All' if not specified.
	ResourceName pulumi.StringPtrInput `pulumi:"resourceName"`
}

func (RocksetRolePrivilegeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RocksetRolePrivilege)(nil)).Elem()
}

func (i RocksetRolePrivilegeArgs) ToRocksetRolePrivilegeOutput() RocksetRolePrivilegeOutput {
	return i.ToRocksetRolePrivilegeOutputWithContext(context.Background())
}

func (i RocksetRolePrivilegeArgs) ToRocksetRolePrivilegeOutputWithContext(ctx context.Context) RocksetRolePrivilegeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetRolePrivilegeOutput)
}

// RocksetRolePrivilegeArrayInput is an input type that accepts RocksetRolePrivilegeArray and RocksetRolePrivilegeArrayOutput values.
// You can construct a concrete instance of `RocksetRolePrivilegeArrayInput` via:
//
//	RocksetRolePrivilegeArray{ RocksetRolePrivilegeArgs{...} }
type RocksetRolePrivilegeArrayInput interface {
	pulumi.Input

	ToRocksetRolePrivilegeArrayOutput() RocksetRolePrivilegeArrayOutput
	ToRocksetRolePrivilegeArrayOutputWithContext(context.Context) RocksetRolePrivilegeArrayOutput
}

type RocksetRolePrivilegeArray []RocksetRolePrivilegeInput

func (RocksetRolePrivilegeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RocksetRolePrivilege)(nil)).Elem()
}

func (i RocksetRolePrivilegeArray) ToRocksetRolePrivilegeArrayOutput() RocksetRolePrivilegeArrayOutput {
	return i.ToRocksetRolePrivilegeArrayOutputWithContext(context.Background())
}

func (i RocksetRolePrivilegeArray) ToRocksetRolePrivilegeArrayOutputWithContext(ctx context.Context) RocksetRolePrivilegeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetRolePrivilegeArrayOutput)
}

type RocksetRolePrivilegeOutput struct{ *pulumi.OutputState }

func (RocksetRolePrivilegeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RocksetRolePrivilege)(nil)).Elem()
}

func (o RocksetRolePrivilegeOutput) ToRocksetRolePrivilegeOutput() RocksetRolePrivilegeOutput {
	return o
}

func (o RocksetRolePrivilegeOutput) ToRocksetRolePrivilegeOutputWithContext(ctx context.Context) RocksetRolePrivilegeOutput {
	return o
}

// The action allowed by this privilege.
func (o RocksetRolePrivilegeOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v RocksetRolePrivilege) string { return v.Action }).(pulumi.StringOutput)
}

// Rockset cluster ID for which this action is allowed. Only valid for Workspace actions. Use '*ALL*' for actions which apply to all clusters.
func (o RocksetRolePrivilegeOutput) Cluster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocksetRolePrivilege) *string { return v.Cluster }).(pulumi.StringPtrOutput)
}

// The resource on which this action is allowed. Defaults to 'All' if not specified.
func (o RocksetRolePrivilegeOutput) ResourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocksetRolePrivilege) *string { return v.ResourceName }).(pulumi.StringPtrOutput)
}

type RocksetRolePrivilegeArrayOutput struct{ *pulumi.OutputState }

func (RocksetRolePrivilegeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RocksetRolePrivilege)(nil)).Elem()
}

func (o RocksetRolePrivilegeArrayOutput) ToRocksetRolePrivilegeArrayOutput() RocksetRolePrivilegeArrayOutput {
	return o
}

func (o RocksetRolePrivilegeArrayOutput) ToRocksetRolePrivilegeArrayOutputWithContext(ctx context.Context) RocksetRolePrivilegeArrayOutput {
	return o
}

func (o RocksetRolePrivilegeArrayOutput) Index(i pulumi.IntInput) RocksetRolePrivilegeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RocksetRolePrivilege {
		return vs[0].([]RocksetRolePrivilege)[vs[1].(int)]
	}).(RocksetRolePrivilegeOutput)
}

type RocksetS3CollectionSource struct {
	// S3 bucket containing the target data.
	Bucket string                        `pulumi:"bucket"`
	Csv    *RocksetS3CollectionSourceCsv `pulumi:"csv"`
	// Format of the data. One of: json, csv, xml. xml and csv blocks can only be set for their respective formats.
	Format string `pulumi:"format"`
	// The name of the Rockset S3 integration. If no S3 integration is provided only data in public S3 buckets are accessible.
	IntegrationName string `pulumi:"integrationName"`
	// Regex path pattern to S3 keys.
	Pattern *string `pulumi:"pattern"`
	// Simple path prefix to S3 keys.
	//
	// Deprecated: use pattern instead
	Prefix *string                       `pulumi:"prefix"`
	Xml    *RocksetS3CollectionSourceXml `pulumi:"xml"`
}

// RocksetS3CollectionSourceInput is an input type that accepts RocksetS3CollectionSourceArgs and RocksetS3CollectionSourceOutput values.
// You can construct a concrete instance of `RocksetS3CollectionSourceInput` via:
//
//	RocksetS3CollectionSourceArgs{...}
type RocksetS3CollectionSourceInput interface {
	pulumi.Input

	ToRocksetS3CollectionSourceOutput() RocksetS3CollectionSourceOutput
	ToRocksetS3CollectionSourceOutputWithContext(context.Context) RocksetS3CollectionSourceOutput
}

type RocksetS3CollectionSourceArgs struct {
	// S3 bucket containing the target data.
	Bucket pulumi.StringInput                   `pulumi:"bucket"`
	Csv    RocksetS3CollectionSourceCsvPtrInput `pulumi:"csv"`
	// Format of the data. One of: json, csv, xml. xml and csv blocks can only be set for their respective formats.
	Format pulumi.StringInput `pulumi:"format"`
	// The name of the Rockset S3 integration. If no S3 integration is provided only data in public S3 buckets are accessible.
	IntegrationName pulumi.StringInput `pulumi:"integrationName"`
	// Regex path pattern to S3 keys.
	Pattern pulumi.StringPtrInput `pulumi:"pattern"`
	// Simple path prefix to S3 keys.
	//
	// Deprecated: use pattern instead
	Prefix pulumi.StringPtrInput                `pulumi:"prefix"`
	Xml    RocksetS3CollectionSourceXmlPtrInput `pulumi:"xml"`
}

func (RocksetS3CollectionSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RocksetS3CollectionSource)(nil)).Elem()
}

func (i RocksetS3CollectionSourceArgs) ToRocksetS3CollectionSourceOutput() RocksetS3CollectionSourceOutput {
	return i.ToRocksetS3CollectionSourceOutputWithContext(context.Background())
}

func (i RocksetS3CollectionSourceArgs) ToRocksetS3CollectionSourceOutputWithContext(ctx context.Context) RocksetS3CollectionSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetS3CollectionSourceOutput)
}

// RocksetS3CollectionSourceArrayInput is an input type that accepts RocksetS3CollectionSourceArray and RocksetS3CollectionSourceArrayOutput values.
// You can construct a concrete instance of `RocksetS3CollectionSourceArrayInput` via:
//
//	RocksetS3CollectionSourceArray{ RocksetS3CollectionSourceArgs{...} }
type RocksetS3CollectionSourceArrayInput interface {
	pulumi.Input

	ToRocksetS3CollectionSourceArrayOutput() RocksetS3CollectionSourceArrayOutput
	ToRocksetS3CollectionSourceArrayOutputWithContext(context.Context) RocksetS3CollectionSourceArrayOutput
}

type RocksetS3CollectionSourceArray []RocksetS3CollectionSourceInput

func (RocksetS3CollectionSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RocksetS3CollectionSource)(nil)).Elem()
}

func (i RocksetS3CollectionSourceArray) ToRocksetS3CollectionSourceArrayOutput() RocksetS3CollectionSourceArrayOutput {
	return i.ToRocksetS3CollectionSourceArrayOutputWithContext(context.Background())
}

func (i RocksetS3CollectionSourceArray) ToRocksetS3CollectionSourceArrayOutputWithContext(ctx context.Context) RocksetS3CollectionSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetS3CollectionSourceArrayOutput)
}

type RocksetS3CollectionSourceOutput struct{ *pulumi.OutputState }

func (RocksetS3CollectionSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RocksetS3CollectionSource)(nil)).Elem()
}

func (o RocksetS3CollectionSourceOutput) ToRocksetS3CollectionSourceOutput() RocksetS3CollectionSourceOutput {
	return o
}

func (o RocksetS3CollectionSourceOutput) ToRocksetS3CollectionSourceOutputWithContext(ctx context.Context) RocksetS3CollectionSourceOutput {
	return o
}

// S3 bucket containing the target data.
func (o RocksetS3CollectionSourceOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v RocksetS3CollectionSource) string { return v.Bucket }).(pulumi.StringOutput)
}

func (o RocksetS3CollectionSourceOutput) Csv() RocksetS3CollectionSourceCsvPtrOutput {
	return o.ApplyT(func(v RocksetS3CollectionSource) *RocksetS3CollectionSourceCsv { return v.Csv }).(RocksetS3CollectionSourceCsvPtrOutput)
}

// Format of the data. One of: json, csv, xml. xml and csv blocks can only be set for their respective formats.
func (o RocksetS3CollectionSourceOutput) Format() pulumi.StringOutput {
	return o.ApplyT(func(v RocksetS3CollectionSource) string { return v.Format }).(pulumi.StringOutput)
}

// The name of the Rockset S3 integration. If no S3 integration is provided only data in public S3 buckets are accessible.
func (o RocksetS3CollectionSourceOutput) IntegrationName() pulumi.StringOutput {
	return o.ApplyT(func(v RocksetS3CollectionSource) string { return v.IntegrationName }).(pulumi.StringOutput)
}

// Regex path pattern to S3 keys.
func (o RocksetS3CollectionSourceOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocksetS3CollectionSource) *string { return v.Pattern }).(pulumi.StringPtrOutput)
}

// Simple path prefix to S3 keys.
//
// Deprecated: use pattern instead
func (o RocksetS3CollectionSourceOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocksetS3CollectionSource) *string { return v.Prefix }).(pulumi.StringPtrOutput)
}

func (o RocksetS3CollectionSourceOutput) Xml() RocksetS3CollectionSourceXmlPtrOutput {
	return o.ApplyT(func(v RocksetS3CollectionSource) *RocksetS3CollectionSourceXml { return v.Xml }).(RocksetS3CollectionSourceXmlPtrOutput)
}

type RocksetS3CollectionSourceArrayOutput struct{ *pulumi.OutputState }

func (RocksetS3CollectionSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RocksetS3CollectionSource)(nil)).Elem()
}

func (o RocksetS3CollectionSourceArrayOutput) ToRocksetS3CollectionSourceArrayOutput() RocksetS3CollectionSourceArrayOutput {
	return o
}

func (o RocksetS3CollectionSourceArrayOutput) ToRocksetS3CollectionSourceArrayOutputWithContext(ctx context.Context) RocksetS3CollectionSourceArrayOutput {
	return o
}

func (o RocksetS3CollectionSourceArrayOutput) Index(i pulumi.IntInput) RocksetS3CollectionSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RocksetS3CollectionSource {
		return vs[0].([]RocksetS3CollectionSource)[vs[1].(int)]
	}).(RocksetS3CollectionSourceOutput)
}

type RocksetS3CollectionSourceCsv struct {
	ColumnNames            []string `pulumi:"columnNames"`
	ColumnTypes            []string `pulumi:"columnTypes"`
	Encoding               *string  `pulumi:"encoding"`
	EscapeChar             *string  `pulumi:"escapeChar"`
	FirstLineAsColumnNames *bool    `pulumi:"firstLineAsColumnNames"`
	QuoteChar              *string  `pulumi:"quoteChar"`
	Separator              *string  `pulumi:"separator"`
}

// RocksetS3CollectionSourceCsvInput is an input type that accepts RocksetS3CollectionSourceCsvArgs and RocksetS3CollectionSourceCsvOutput values.
// You can construct a concrete instance of `RocksetS3CollectionSourceCsvInput` via:
//
//	RocksetS3CollectionSourceCsvArgs{...}
type RocksetS3CollectionSourceCsvInput interface {
	pulumi.Input

	ToRocksetS3CollectionSourceCsvOutput() RocksetS3CollectionSourceCsvOutput
	ToRocksetS3CollectionSourceCsvOutputWithContext(context.Context) RocksetS3CollectionSourceCsvOutput
}

type RocksetS3CollectionSourceCsvArgs struct {
	ColumnNames            pulumi.StringArrayInput `pulumi:"columnNames"`
	ColumnTypes            pulumi.StringArrayInput `pulumi:"columnTypes"`
	Encoding               pulumi.StringPtrInput   `pulumi:"encoding"`
	EscapeChar             pulumi.StringPtrInput   `pulumi:"escapeChar"`
	FirstLineAsColumnNames pulumi.BoolPtrInput     `pulumi:"firstLineAsColumnNames"`
	QuoteChar              pulumi.StringPtrInput   `pulumi:"quoteChar"`
	Separator              pulumi.StringPtrInput   `pulumi:"separator"`
}

func (RocksetS3CollectionSourceCsvArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RocksetS3CollectionSourceCsv)(nil)).Elem()
}

func (i RocksetS3CollectionSourceCsvArgs) ToRocksetS3CollectionSourceCsvOutput() RocksetS3CollectionSourceCsvOutput {
	return i.ToRocksetS3CollectionSourceCsvOutputWithContext(context.Background())
}

func (i RocksetS3CollectionSourceCsvArgs) ToRocksetS3CollectionSourceCsvOutputWithContext(ctx context.Context) RocksetS3CollectionSourceCsvOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetS3CollectionSourceCsvOutput)
}

func (i RocksetS3CollectionSourceCsvArgs) ToRocksetS3CollectionSourceCsvPtrOutput() RocksetS3CollectionSourceCsvPtrOutput {
	return i.ToRocksetS3CollectionSourceCsvPtrOutputWithContext(context.Background())
}

func (i RocksetS3CollectionSourceCsvArgs) ToRocksetS3CollectionSourceCsvPtrOutputWithContext(ctx context.Context) RocksetS3CollectionSourceCsvPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetS3CollectionSourceCsvOutput).ToRocksetS3CollectionSourceCsvPtrOutputWithContext(ctx)
}

// RocksetS3CollectionSourceCsvPtrInput is an input type that accepts RocksetS3CollectionSourceCsvArgs, RocksetS3CollectionSourceCsvPtr and RocksetS3CollectionSourceCsvPtrOutput values.
// You can construct a concrete instance of `RocksetS3CollectionSourceCsvPtrInput` via:
//
//	        RocksetS3CollectionSourceCsvArgs{...}
//
//	or:
//
//	        nil
type RocksetS3CollectionSourceCsvPtrInput interface {
	pulumi.Input

	ToRocksetS3CollectionSourceCsvPtrOutput() RocksetS3CollectionSourceCsvPtrOutput
	ToRocksetS3CollectionSourceCsvPtrOutputWithContext(context.Context) RocksetS3CollectionSourceCsvPtrOutput
}

type rocksetS3CollectionSourceCsvPtrType RocksetS3CollectionSourceCsvArgs

func RocksetS3CollectionSourceCsvPtr(v *RocksetS3CollectionSourceCsvArgs) RocksetS3CollectionSourceCsvPtrInput {
	return (*rocksetS3CollectionSourceCsvPtrType)(v)
}

func (*rocksetS3CollectionSourceCsvPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RocksetS3CollectionSourceCsv)(nil)).Elem()
}

func (i *rocksetS3CollectionSourceCsvPtrType) ToRocksetS3CollectionSourceCsvPtrOutput() RocksetS3CollectionSourceCsvPtrOutput {
	return i.ToRocksetS3CollectionSourceCsvPtrOutputWithContext(context.Background())
}

func (i *rocksetS3CollectionSourceCsvPtrType) ToRocksetS3CollectionSourceCsvPtrOutputWithContext(ctx context.Context) RocksetS3CollectionSourceCsvPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetS3CollectionSourceCsvPtrOutput)
}

type RocksetS3CollectionSourceCsvOutput struct{ *pulumi.OutputState }

func (RocksetS3CollectionSourceCsvOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RocksetS3CollectionSourceCsv)(nil)).Elem()
}

func (o RocksetS3CollectionSourceCsvOutput) ToRocksetS3CollectionSourceCsvOutput() RocksetS3CollectionSourceCsvOutput {
	return o
}

func (o RocksetS3CollectionSourceCsvOutput) ToRocksetS3CollectionSourceCsvOutputWithContext(ctx context.Context) RocksetS3CollectionSourceCsvOutput {
	return o
}

func (o RocksetS3CollectionSourceCsvOutput) ToRocksetS3CollectionSourceCsvPtrOutput() RocksetS3CollectionSourceCsvPtrOutput {
	return o.ToRocksetS3CollectionSourceCsvPtrOutputWithContext(context.Background())
}

func (o RocksetS3CollectionSourceCsvOutput) ToRocksetS3CollectionSourceCsvPtrOutputWithContext(ctx context.Context) RocksetS3CollectionSourceCsvPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RocksetS3CollectionSourceCsv) *RocksetS3CollectionSourceCsv {
		return &v
	}).(RocksetS3CollectionSourceCsvPtrOutput)
}

func (o RocksetS3CollectionSourceCsvOutput) ColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RocksetS3CollectionSourceCsv) []string { return v.ColumnNames }).(pulumi.StringArrayOutput)
}

func (o RocksetS3CollectionSourceCsvOutput) ColumnTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RocksetS3CollectionSourceCsv) []string { return v.ColumnTypes }).(pulumi.StringArrayOutput)
}

func (o RocksetS3CollectionSourceCsvOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocksetS3CollectionSourceCsv) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

func (o RocksetS3CollectionSourceCsvOutput) EscapeChar() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocksetS3CollectionSourceCsv) *string { return v.EscapeChar }).(pulumi.StringPtrOutput)
}

func (o RocksetS3CollectionSourceCsvOutput) FirstLineAsColumnNames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RocksetS3CollectionSourceCsv) *bool { return v.FirstLineAsColumnNames }).(pulumi.BoolPtrOutput)
}

func (o RocksetS3CollectionSourceCsvOutput) QuoteChar() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocksetS3CollectionSourceCsv) *string { return v.QuoteChar }).(pulumi.StringPtrOutput)
}

func (o RocksetS3CollectionSourceCsvOutput) Separator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocksetS3CollectionSourceCsv) *string { return v.Separator }).(pulumi.StringPtrOutput)
}

type RocksetS3CollectionSourceCsvPtrOutput struct{ *pulumi.OutputState }

func (RocksetS3CollectionSourceCsvPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RocksetS3CollectionSourceCsv)(nil)).Elem()
}

func (o RocksetS3CollectionSourceCsvPtrOutput) ToRocksetS3CollectionSourceCsvPtrOutput() RocksetS3CollectionSourceCsvPtrOutput {
	return o
}

func (o RocksetS3CollectionSourceCsvPtrOutput) ToRocksetS3CollectionSourceCsvPtrOutputWithContext(ctx context.Context) RocksetS3CollectionSourceCsvPtrOutput {
	return o
}

func (o RocksetS3CollectionSourceCsvPtrOutput) Elem() RocksetS3CollectionSourceCsvOutput {
	return o.ApplyT(func(v *RocksetS3CollectionSourceCsv) RocksetS3CollectionSourceCsv {
		if v != nil {
			return *v
		}
		var ret RocksetS3CollectionSourceCsv
		return ret
	}).(RocksetS3CollectionSourceCsvOutput)
}

func (o RocksetS3CollectionSourceCsvPtrOutput) ColumnNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RocksetS3CollectionSourceCsv) []string {
		if v == nil {
			return nil
		}
		return v.ColumnNames
	}).(pulumi.StringArrayOutput)
}

func (o RocksetS3CollectionSourceCsvPtrOutput) ColumnTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RocksetS3CollectionSourceCsv) []string {
		if v == nil {
			return nil
		}
		return v.ColumnTypes
	}).(pulumi.StringArrayOutput)
}

func (o RocksetS3CollectionSourceCsvPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocksetS3CollectionSourceCsv) *string {
		if v == nil {
			return nil
		}
		return v.Encoding
	}).(pulumi.StringPtrOutput)
}

func (o RocksetS3CollectionSourceCsvPtrOutput) EscapeChar() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocksetS3CollectionSourceCsv) *string {
		if v == nil {
			return nil
		}
		return v.EscapeChar
	}).(pulumi.StringPtrOutput)
}

func (o RocksetS3CollectionSourceCsvPtrOutput) FirstLineAsColumnNames() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RocksetS3CollectionSourceCsv) *bool {
		if v == nil {
			return nil
		}
		return v.FirstLineAsColumnNames
	}).(pulumi.BoolPtrOutput)
}

func (o RocksetS3CollectionSourceCsvPtrOutput) QuoteChar() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocksetS3CollectionSourceCsv) *string {
		if v == nil {
			return nil
		}
		return v.QuoteChar
	}).(pulumi.StringPtrOutput)
}

func (o RocksetS3CollectionSourceCsvPtrOutput) Separator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocksetS3CollectionSourceCsv) *string {
		if v == nil {
			return nil
		}
		return v.Separator
	}).(pulumi.StringPtrOutput)
}

type RocksetS3CollectionSourceXml struct {
	AttributePrefix *string `pulumi:"attributePrefix"`
	DocTag          *string `pulumi:"docTag"`
	Encoding        *string `pulumi:"encoding"`
	RootTag         *string `pulumi:"rootTag"`
	ValueTag        *string `pulumi:"valueTag"`
}

// RocksetS3CollectionSourceXmlInput is an input type that accepts RocksetS3CollectionSourceXmlArgs and RocksetS3CollectionSourceXmlOutput values.
// You can construct a concrete instance of `RocksetS3CollectionSourceXmlInput` via:
//
//	RocksetS3CollectionSourceXmlArgs{...}
type RocksetS3CollectionSourceXmlInput interface {
	pulumi.Input

	ToRocksetS3CollectionSourceXmlOutput() RocksetS3CollectionSourceXmlOutput
	ToRocksetS3CollectionSourceXmlOutputWithContext(context.Context) RocksetS3CollectionSourceXmlOutput
}

type RocksetS3CollectionSourceXmlArgs struct {
	AttributePrefix pulumi.StringPtrInput `pulumi:"attributePrefix"`
	DocTag          pulumi.StringPtrInput `pulumi:"docTag"`
	Encoding        pulumi.StringPtrInput `pulumi:"encoding"`
	RootTag         pulumi.StringPtrInput `pulumi:"rootTag"`
	ValueTag        pulumi.StringPtrInput `pulumi:"valueTag"`
}

func (RocksetS3CollectionSourceXmlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RocksetS3CollectionSourceXml)(nil)).Elem()
}

func (i RocksetS3CollectionSourceXmlArgs) ToRocksetS3CollectionSourceXmlOutput() RocksetS3CollectionSourceXmlOutput {
	return i.ToRocksetS3CollectionSourceXmlOutputWithContext(context.Background())
}

func (i RocksetS3CollectionSourceXmlArgs) ToRocksetS3CollectionSourceXmlOutputWithContext(ctx context.Context) RocksetS3CollectionSourceXmlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetS3CollectionSourceXmlOutput)
}

func (i RocksetS3CollectionSourceXmlArgs) ToRocksetS3CollectionSourceXmlPtrOutput() RocksetS3CollectionSourceXmlPtrOutput {
	return i.ToRocksetS3CollectionSourceXmlPtrOutputWithContext(context.Background())
}

func (i RocksetS3CollectionSourceXmlArgs) ToRocksetS3CollectionSourceXmlPtrOutputWithContext(ctx context.Context) RocksetS3CollectionSourceXmlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetS3CollectionSourceXmlOutput).ToRocksetS3CollectionSourceXmlPtrOutputWithContext(ctx)
}

// RocksetS3CollectionSourceXmlPtrInput is an input type that accepts RocksetS3CollectionSourceXmlArgs, RocksetS3CollectionSourceXmlPtr and RocksetS3CollectionSourceXmlPtrOutput values.
// You can construct a concrete instance of `RocksetS3CollectionSourceXmlPtrInput` via:
//
//	        RocksetS3CollectionSourceXmlArgs{...}
//
//	or:
//
//	        nil
type RocksetS3CollectionSourceXmlPtrInput interface {
	pulumi.Input

	ToRocksetS3CollectionSourceXmlPtrOutput() RocksetS3CollectionSourceXmlPtrOutput
	ToRocksetS3CollectionSourceXmlPtrOutputWithContext(context.Context) RocksetS3CollectionSourceXmlPtrOutput
}

type rocksetS3CollectionSourceXmlPtrType RocksetS3CollectionSourceXmlArgs

func RocksetS3CollectionSourceXmlPtr(v *RocksetS3CollectionSourceXmlArgs) RocksetS3CollectionSourceXmlPtrInput {
	return (*rocksetS3CollectionSourceXmlPtrType)(v)
}

func (*rocksetS3CollectionSourceXmlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RocksetS3CollectionSourceXml)(nil)).Elem()
}

func (i *rocksetS3CollectionSourceXmlPtrType) ToRocksetS3CollectionSourceXmlPtrOutput() RocksetS3CollectionSourceXmlPtrOutput {
	return i.ToRocksetS3CollectionSourceXmlPtrOutputWithContext(context.Background())
}

func (i *rocksetS3CollectionSourceXmlPtrType) ToRocksetS3CollectionSourceXmlPtrOutputWithContext(ctx context.Context) RocksetS3CollectionSourceXmlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetS3CollectionSourceXmlPtrOutput)
}

type RocksetS3CollectionSourceXmlOutput struct{ *pulumi.OutputState }

func (RocksetS3CollectionSourceXmlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RocksetS3CollectionSourceXml)(nil)).Elem()
}

func (o RocksetS3CollectionSourceXmlOutput) ToRocksetS3CollectionSourceXmlOutput() RocksetS3CollectionSourceXmlOutput {
	return o
}

func (o RocksetS3CollectionSourceXmlOutput) ToRocksetS3CollectionSourceXmlOutputWithContext(ctx context.Context) RocksetS3CollectionSourceXmlOutput {
	return o
}

func (o RocksetS3CollectionSourceXmlOutput) ToRocksetS3CollectionSourceXmlPtrOutput() RocksetS3CollectionSourceXmlPtrOutput {
	return o.ToRocksetS3CollectionSourceXmlPtrOutputWithContext(context.Background())
}

func (o RocksetS3CollectionSourceXmlOutput) ToRocksetS3CollectionSourceXmlPtrOutputWithContext(ctx context.Context) RocksetS3CollectionSourceXmlPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RocksetS3CollectionSourceXml) *RocksetS3CollectionSourceXml {
		return &v
	}).(RocksetS3CollectionSourceXmlPtrOutput)
}

func (o RocksetS3CollectionSourceXmlOutput) AttributePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocksetS3CollectionSourceXml) *string { return v.AttributePrefix }).(pulumi.StringPtrOutput)
}

func (o RocksetS3CollectionSourceXmlOutput) DocTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocksetS3CollectionSourceXml) *string { return v.DocTag }).(pulumi.StringPtrOutput)
}

func (o RocksetS3CollectionSourceXmlOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocksetS3CollectionSourceXml) *string { return v.Encoding }).(pulumi.StringPtrOutput)
}

func (o RocksetS3CollectionSourceXmlOutput) RootTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocksetS3CollectionSourceXml) *string { return v.RootTag }).(pulumi.StringPtrOutput)
}

func (o RocksetS3CollectionSourceXmlOutput) ValueTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocksetS3CollectionSourceXml) *string { return v.ValueTag }).(pulumi.StringPtrOutput)
}

type RocksetS3CollectionSourceXmlPtrOutput struct{ *pulumi.OutputState }

func (RocksetS3CollectionSourceXmlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RocksetS3CollectionSourceXml)(nil)).Elem()
}

func (o RocksetS3CollectionSourceXmlPtrOutput) ToRocksetS3CollectionSourceXmlPtrOutput() RocksetS3CollectionSourceXmlPtrOutput {
	return o
}

func (o RocksetS3CollectionSourceXmlPtrOutput) ToRocksetS3CollectionSourceXmlPtrOutputWithContext(ctx context.Context) RocksetS3CollectionSourceXmlPtrOutput {
	return o
}

func (o RocksetS3CollectionSourceXmlPtrOutput) Elem() RocksetS3CollectionSourceXmlOutput {
	return o.ApplyT(func(v *RocksetS3CollectionSourceXml) RocksetS3CollectionSourceXml {
		if v != nil {
			return *v
		}
		var ret RocksetS3CollectionSourceXml
		return ret
	}).(RocksetS3CollectionSourceXmlOutput)
}

func (o RocksetS3CollectionSourceXmlPtrOutput) AttributePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocksetS3CollectionSourceXml) *string {
		if v == nil {
			return nil
		}
		return v.AttributePrefix
	}).(pulumi.StringPtrOutput)
}

func (o RocksetS3CollectionSourceXmlPtrOutput) DocTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocksetS3CollectionSourceXml) *string {
		if v == nil {
			return nil
		}
		return v.DocTag
	}).(pulumi.StringPtrOutput)
}

func (o RocksetS3CollectionSourceXmlPtrOutput) Encoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocksetS3CollectionSourceXml) *string {
		if v == nil {
			return nil
		}
		return v.Encoding
	}).(pulumi.StringPtrOutput)
}

func (o RocksetS3CollectionSourceXmlPtrOutput) RootTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocksetS3CollectionSourceXml) *string {
		if v == nil {
			return nil
		}
		return v.RootTag
	}).(pulumi.StringPtrOutput)
}

func (o RocksetS3CollectionSourceXmlPtrOutput) ValueTag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocksetS3CollectionSourceXml) *string {
		if v == nil {
			return nil
		}
		return v.ValueTag
	}).(pulumi.StringPtrOutput)
}

type GetAccountCluster struct {
	ApiServer string `pulumi:"apiServer"`
	AwsRegion string `pulumi:"awsRegion"`
	Type      string `pulumi:"type"`
}

// GetAccountClusterInput is an input type that accepts GetAccountClusterArgs and GetAccountClusterOutput values.
// You can construct a concrete instance of `GetAccountClusterInput` via:
//
//	GetAccountClusterArgs{...}
type GetAccountClusterInput interface {
	pulumi.Input

	ToGetAccountClusterOutput() GetAccountClusterOutput
	ToGetAccountClusterOutputWithContext(context.Context) GetAccountClusterOutput
}

type GetAccountClusterArgs struct {
	ApiServer pulumi.StringInput `pulumi:"apiServer"`
	AwsRegion pulumi.StringInput `pulumi:"awsRegion"`
	Type      pulumi.StringInput `pulumi:"type"`
}

func (GetAccountClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccountCluster)(nil)).Elem()
}

func (i GetAccountClusterArgs) ToGetAccountClusterOutput() GetAccountClusterOutput {
	return i.ToGetAccountClusterOutputWithContext(context.Background())
}

func (i GetAccountClusterArgs) ToGetAccountClusterOutputWithContext(ctx context.Context) GetAccountClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAccountClusterOutput)
}

// GetAccountClusterArrayInput is an input type that accepts GetAccountClusterArray and GetAccountClusterArrayOutput values.
// You can construct a concrete instance of `GetAccountClusterArrayInput` via:
//
//	GetAccountClusterArray{ GetAccountClusterArgs{...} }
type GetAccountClusterArrayInput interface {
	pulumi.Input

	ToGetAccountClusterArrayOutput() GetAccountClusterArrayOutput
	ToGetAccountClusterArrayOutputWithContext(context.Context) GetAccountClusterArrayOutput
}

type GetAccountClusterArray []GetAccountClusterInput

func (GetAccountClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAccountCluster)(nil)).Elem()
}

func (i GetAccountClusterArray) ToGetAccountClusterArrayOutput() GetAccountClusterArrayOutput {
	return i.ToGetAccountClusterArrayOutputWithContext(context.Background())
}

func (i GetAccountClusterArray) ToGetAccountClusterArrayOutputWithContext(ctx context.Context) GetAccountClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAccountClusterArrayOutput)
}

type GetAccountClusterOutput struct{ *pulumi.OutputState }

func (GetAccountClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccountCluster)(nil)).Elem()
}

func (o GetAccountClusterOutput) ToGetAccountClusterOutput() GetAccountClusterOutput {
	return o
}

func (o GetAccountClusterOutput) ToGetAccountClusterOutputWithContext(ctx context.Context) GetAccountClusterOutput {
	return o
}

func (o GetAccountClusterOutput) ApiServer() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccountCluster) string { return v.ApiServer }).(pulumi.StringOutput)
}

func (o GetAccountClusterOutput) AwsRegion() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccountCluster) string { return v.AwsRegion }).(pulumi.StringOutput)
}

func (o GetAccountClusterOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccountCluster) string { return v.Type }).(pulumi.StringOutput)
}

type GetAccountClusterArrayOutput struct{ *pulumi.OutputState }

func (GetAccountClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAccountCluster)(nil)).Elem()
}

func (o GetAccountClusterArrayOutput) ToGetAccountClusterArrayOutput() GetAccountClusterArrayOutput {
	return o
}

func (o GetAccountClusterArrayOutput) ToGetAccountClusterArrayOutputWithContext(ctx context.Context) GetAccountClusterArrayOutput {
	return o
}

func (o GetAccountClusterArrayOutput) Index(i pulumi.IntInput) GetAccountClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAccountCluster {
		return vs[0].([]GetAccountCluster)[vs[1].(int)]
	}).(GetAccountClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetDynamodbCollectionSourceInput)(nil)).Elem(), RocksetDynamodbCollectionSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetDynamodbCollectionSourceArrayInput)(nil)).Elem(), RocksetDynamodbCollectionSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetGcsCollectionSourceInput)(nil)).Elem(), RocksetGcsCollectionSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetGcsCollectionSourceArrayInput)(nil)).Elem(), RocksetGcsCollectionSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetGcsCollectionSourceCsvInput)(nil)).Elem(), RocksetGcsCollectionSourceCsvArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetGcsCollectionSourceCsvPtrInput)(nil)).Elem(), RocksetGcsCollectionSourceCsvArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetGcsCollectionSourceXmlInput)(nil)).Elem(), RocksetGcsCollectionSourceXmlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetGcsCollectionSourceXmlPtrInput)(nil)).Elem(), RocksetGcsCollectionSourceXmlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetKafkaCollectionSourceInput)(nil)).Elem(), RocksetKafkaCollectionSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetKafkaCollectionSourceArrayInput)(nil)).Elem(), RocksetKafkaCollectionSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetKafkaCollectionSourceStatusInput)(nil)).Elem(), RocksetKafkaCollectionSourceStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetKafkaCollectionSourceStatusArrayInput)(nil)).Elem(), RocksetKafkaCollectionSourceStatusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetKafkaCollectionSourceStatusPartitionInput)(nil)).Elem(), RocksetKafkaCollectionSourceStatusPartitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetKafkaCollectionSourceStatusPartitionArrayInput)(nil)).Elem(), RocksetKafkaCollectionSourceStatusPartitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetKinesisCollectionSourceInput)(nil)).Elem(), RocksetKinesisCollectionSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetKinesisCollectionSourceArrayInput)(nil)).Elem(), RocksetKinesisCollectionSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetMongodbCollectionSourceInput)(nil)).Elem(), RocksetMongodbCollectionSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetMongodbCollectionSourceArrayInput)(nil)).Elem(), RocksetMongodbCollectionSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetQueryLambdaSqlInput)(nil)).Elem(), RocksetQueryLambdaSqlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetQueryLambdaSqlArrayInput)(nil)).Elem(), RocksetQueryLambdaSqlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetQueryLambdaSqlDefaultParameterInput)(nil)).Elem(), RocksetQueryLambdaSqlDefaultParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetQueryLambdaSqlDefaultParameterArrayInput)(nil)).Elem(), RocksetQueryLambdaSqlDefaultParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetRolePrivilegeInput)(nil)).Elem(), RocksetRolePrivilegeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetRolePrivilegeArrayInput)(nil)).Elem(), RocksetRolePrivilegeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetS3CollectionSourceInput)(nil)).Elem(), RocksetS3CollectionSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetS3CollectionSourceArrayInput)(nil)).Elem(), RocksetS3CollectionSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetS3CollectionSourceCsvInput)(nil)).Elem(), RocksetS3CollectionSourceCsvArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetS3CollectionSourceCsvPtrInput)(nil)).Elem(), RocksetS3CollectionSourceCsvArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetS3CollectionSourceXmlInput)(nil)).Elem(), RocksetS3CollectionSourceXmlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetS3CollectionSourceXmlPtrInput)(nil)).Elem(), RocksetS3CollectionSourceXmlArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAccountClusterInput)(nil)).Elem(), GetAccountClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAccountClusterArrayInput)(nil)).Elem(), GetAccountClusterArray{})
	pulumi.RegisterOutputType(RocksetDynamodbCollectionSourceOutput{})
	pulumi.RegisterOutputType(RocksetDynamodbCollectionSourceArrayOutput{})
	pulumi.RegisterOutputType(RocksetGcsCollectionSourceOutput{})
	pulumi.RegisterOutputType(RocksetGcsCollectionSourceArrayOutput{})
	pulumi.RegisterOutputType(RocksetGcsCollectionSourceCsvOutput{})
	pulumi.RegisterOutputType(RocksetGcsCollectionSourceCsvPtrOutput{})
	pulumi.RegisterOutputType(RocksetGcsCollectionSourceXmlOutput{})
	pulumi.RegisterOutputType(RocksetGcsCollectionSourceXmlPtrOutput{})
	pulumi.RegisterOutputType(RocksetKafkaCollectionSourceOutput{})
	pulumi.RegisterOutputType(RocksetKafkaCollectionSourceArrayOutput{})
	pulumi.RegisterOutputType(RocksetKafkaCollectionSourceStatusOutput{})
	pulumi.RegisterOutputType(RocksetKafkaCollectionSourceStatusArrayOutput{})
	pulumi.RegisterOutputType(RocksetKafkaCollectionSourceStatusPartitionOutput{})
	pulumi.RegisterOutputType(RocksetKafkaCollectionSourceStatusPartitionArrayOutput{})
	pulumi.RegisterOutputType(RocksetKinesisCollectionSourceOutput{})
	pulumi.RegisterOutputType(RocksetKinesisCollectionSourceArrayOutput{})
	pulumi.RegisterOutputType(RocksetMongodbCollectionSourceOutput{})
	pulumi.RegisterOutputType(RocksetMongodbCollectionSourceArrayOutput{})
	pulumi.RegisterOutputType(RocksetQueryLambdaSqlOutput{})
	pulumi.RegisterOutputType(RocksetQueryLambdaSqlArrayOutput{})
	pulumi.RegisterOutputType(RocksetQueryLambdaSqlDefaultParameterOutput{})
	pulumi.RegisterOutputType(RocksetQueryLambdaSqlDefaultParameterArrayOutput{})
	pulumi.RegisterOutputType(RocksetRolePrivilegeOutput{})
	pulumi.RegisterOutputType(RocksetRolePrivilegeArrayOutput{})
	pulumi.RegisterOutputType(RocksetS3CollectionSourceOutput{})
	pulumi.RegisterOutputType(RocksetS3CollectionSourceArrayOutput{})
	pulumi.RegisterOutputType(RocksetS3CollectionSourceCsvOutput{})
	pulumi.RegisterOutputType(RocksetS3CollectionSourceCsvPtrOutput{})
	pulumi.RegisterOutputType(RocksetS3CollectionSourceXmlOutput{})
	pulumi.RegisterOutputType(RocksetS3CollectionSourceXmlPtrOutput{})
	pulumi.RegisterOutputType(GetAccountClusterOutput{})
	pulumi.RegisterOutputType(GetAccountClusterArrayOutput{})
}
