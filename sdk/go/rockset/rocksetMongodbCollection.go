// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rockset

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a collection with an MongoDB source attached.
type RocksetMongodbCollection struct {
	pulumi.CustomResourceState

	// Text describing the collection.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// **Deprecated** use ingestTransformation instead
	//
	// Deprecated: Use ingest_transformation instead
	FieldMappingQuery pulumi.StringPtrOutput `pulumi:"fieldMappingQuery"`
	// Ingest transformation SQL query. Turns the collection into insertOnly mode.
	IngestTransformation pulumi.StringPtrOutput `pulumi:"ingestTransformation"`
	// Unique identifier for the collection. Can contain alphanumeric or dash characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// Number of seconds after which data is purged. Based on event time.
	RetentionSecs pulumi.IntPtrOutput `pulumi:"retentionSecs"`
	// Defines a source for this collection.
	Sources RocksetMongodbCollectionSourceArrayOutput `pulumi:"sources"`
	// Wait until the collection is ready.
	WaitForCollection pulumi.BoolPtrOutput `pulumi:"waitForCollection"`
	// Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.
	WaitForDocuments pulumi.IntPtrOutput `pulumi:"waitForDocuments"`
	// The name of the workspace.
	Workspace pulumi.StringOutput `pulumi:"workspace"`
}

// NewRocksetMongodbCollection registers a new resource with the given unique name, arguments, and options.
func NewRocksetMongodbCollection(ctx *pulumi.Context,
	name string, args *RocksetMongodbCollectionArgs, opts ...pulumi.ResourceOption) (*RocksetMongodbCollection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Workspace == nil {
		return nil, errors.New("invalid value for required argument 'Workspace'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RocksetMongodbCollection
	err := ctx.RegisterResource("rockset:index/rocksetMongodbCollection:RocksetMongodbCollection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRocksetMongodbCollection gets an existing RocksetMongodbCollection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRocksetMongodbCollection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RocksetMongodbCollectionState, opts ...pulumi.ResourceOption) (*RocksetMongodbCollection, error) {
	var resource RocksetMongodbCollection
	err := ctx.ReadResource("rockset:index/rocksetMongodbCollection:RocksetMongodbCollection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RocksetMongodbCollection resources.
type rocksetMongodbCollectionState struct {
	// Text describing the collection.
	Description *string `pulumi:"description"`
	// **Deprecated** use ingestTransformation instead
	//
	// Deprecated: Use ingest_transformation instead
	FieldMappingQuery *string `pulumi:"fieldMappingQuery"`
	// Ingest transformation SQL query. Turns the collection into insertOnly mode.
	IngestTransformation *string `pulumi:"ingestTransformation"`
	// Unique identifier for the collection. Can contain alphanumeric or dash characters.
	Name *string `pulumi:"name"`
	// Number of seconds after which data is purged. Based on event time.
	RetentionSecs *int `pulumi:"retentionSecs"`
	// Defines a source for this collection.
	Sources []RocksetMongodbCollectionSource `pulumi:"sources"`
	// Wait until the collection is ready.
	WaitForCollection *bool `pulumi:"waitForCollection"`
	// Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.
	WaitForDocuments *int `pulumi:"waitForDocuments"`
	// The name of the workspace.
	Workspace *string `pulumi:"workspace"`
}

type RocksetMongodbCollectionState struct {
	// Text describing the collection.
	Description pulumi.StringPtrInput
	// **Deprecated** use ingestTransformation instead
	//
	// Deprecated: Use ingest_transformation instead
	FieldMappingQuery pulumi.StringPtrInput
	// Ingest transformation SQL query. Turns the collection into insertOnly mode.
	IngestTransformation pulumi.StringPtrInput
	// Unique identifier for the collection. Can contain alphanumeric or dash characters.
	Name pulumi.StringPtrInput
	// Number of seconds after which data is purged. Based on event time.
	RetentionSecs pulumi.IntPtrInput
	// Defines a source for this collection.
	Sources RocksetMongodbCollectionSourceArrayInput
	// Wait until the collection is ready.
	WaitForCollection pulumi.BoolPtrInput
	// Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.
	WaitForDocuments pulumi.IntPtrInput
	// The name of the workspace.
	Workspace pulumi.StringPtrInput
}

func (RocksetMongodbCollectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*rocksetMongodbCollectionState)(nil)).Elem()
}

type rocksetMongodbCollectionArgs struct {
	// Text describing the collection.
	Description *string `pulumi:"description"`
	// **Deprecated** use ingestTransformation instead
	//
	// Deprecated: Use ingest_transformation instead
	FieldMappingQuery *string `pulumi:"fieldMappingQuery"`
	// Ingest transformation SQL query. Turns the collection into insertOnly mode.
	IngestTransformation *string `pulumi:"ingestTransformation"`
	// Unique identifier for the collection. Can contain alphanumeric or dash characters.
	Name *string `pulumi:"name"`
	// Number of seconds after which data is purged. Based on event time.
	RetentionSecs *int `pulumi:"retentionSecs"`
	// Defines a source for this collection.
	Sources []RocksetMongodbCollectionSource `pulumi:"sources"`
	// Wait until the collection is ready.
	WaitForCollection *bool `pulumi:"waitForCollection"`
	// Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.
	WaitForDocuments *int `pulumi:"waitForDocuments"`
	// The name of the workspace.
	Workspace string `pulumi:"workspace"`
}

// The set of arguments for constructing a RocksetMongodbCollection resource.
type RocksetMongodbCollectionArgs struct {
	// Text describing the collection.
	Description pulumi.StringPtrInput
	// **Deprecated** use ingestTransformation instead
	//
	// Deprecated: Use ingest_transformation instead
	FieldMappingQuery pulumi.StringPtrInput
	// Ingest transformation SQL query. Turns the collection into insertOnly mode.
	IngestTransformation pulumi.StringPtrInput
	// Unique identifier for the collection. Can contain alphanumeric or dash characters.
	Name pulumi.StringPtrInput
	// Number of seconds after which data is purged. Based on event time.
	RetentionSecs pulumi.IntPtrInput
	// Defines a source for this collection.
	Sources RocksetMongodbCollectionSourceArrayInput
	// Wait until the collection is ready.
	WaitForCollection pulumi.BoolPtrInput
	// Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.
	WaitForDocuments pulumi.IntPtrInput
	// The name of the workspace.
	Workspace pulumi.StringInput
}

func (RocksetMongodbCollectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rocksetMongodbCollectionArgs)(nil)).Elem()
}

type RocksetMongodbCollectionInput interface {
	pulumi.Input

	ToRocksetMongodbCollectionOutput() RocksetMongodbCollectionOutput
	ToRocksetMongodbCollectionOutputWithContext(ctx context.Context) RocksetMongodbCollectionOutput
}

func (*RocksetMongodbCollection) ElementType() reflect.Type {
	return reflect.TypeOf((**RocksetMongodbCollection)(nil)).Elem()
}

func (i *RocksetMongodbCollection) ToRocksetMongodbCollectionOutput() RocksetMongodbCollectionOutput {
	return i.ToRocksetMongodbCollectionOutputWithContext(context.Background())
}

func (i *RocksetMongodbCollection) ToRocksetMongodbCollectionOutputWithContext(ctx context.Context) RocksetMongodbCollectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetMongodbCollectionOutput)
}

// RocksetMongodbCollectionArrayInput is an input type that accepts RocksetMongodbCollectionArray and RocksetMongodbCollectionArrayOutput values.
// You can construct a concrete instance of `RocksetMongodbCollectionArrayInput` via:
//
//	RocksetMongodbCollectionArray{ RocksetMongodbCollectionArgs{...} }
type RocksetMongodbCollectionArrayInput interface {
	pulumi.Input

	ToRocksetMongodbCollectionArrayOutput() RocksetMongodbCollectionArrayOutput
	ToRocksetMongodbCollectionArrayOutputWithContext(context.Context) RocksetMongodbCollectionArrayOutput
}

type RocksetMongodbCollectionArray []RocksetMongodbCollectionInput

func (RocksetMongodbCollectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocksetMongodbCollection)(nil)).Elem()
}

func (i RocksetMongodbCollectionArray) ToRocksetMongodbCollectionArrayOutput() RocksetMongodbCollectionArrayOutput {
	return i.ToRocksetMongodbCollectionArrayOutputWithContext(context.Background())
}

func (i RocksetMongodbCollectionArray) ToRocksetMongodbCollectionArrayOutputWithContext(ctx context.Context) RocksetMongodbCollectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetMongodbCollectionArrayOutput)
}

// RocksetMongodbCollectionMapInput is an input type that accepts RocksetMongodbCollectionMap and RocksetMongodbCollectionMapOutput values.
// You can construct a concrete instance of `RocksetMongodbCollectionMapInput` via:
//
//	RocksetMongodbCollectionMap{ "key": RocksetMongodbCollectionArgs{...} }
type RocksetMongodbCollectionMapInput interface {
	pulumi.Input

	ToRocksetMongodbCollectionMapOutput() RocksetMongodbCollectionMapOutput
	ToRocksetMongodbCollectionMapOutputWithContext(context.Context) RocksetMongodbCollectionMapOutput
}

type RocksetMongodbCollectionMap map[string]RocksetMongodbCollectionInput

func (RocksetMongodbCollectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocksetMongodbCollection)(nil)).Elem()
}

func (i RocksetMongodbCollectionMap) ToRocksetMongodbCollectionMapOutput() RocksetMongodbCollectionMapOutput {
	return i.ToRocksetMongodbCollectionMapOutputWithContext(context.Background())
}

func (i RocksetMongodbCollectionMap) ToRocksetMongodbCollectionMapOutputWithContext(ctx context.Context) RocksetMongodbCollectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetMongodbCollectionMapOutput)
}

type RocksetMongodbCollectionOutput struct{ *pulumi.OutputState }

func (RocksetMongodbCollectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RocksetMongodbCollection)(nil)).Elem()
}

func (o RocksetMongodbCollectionOutput) ToRocksetMongodbCollectionOutput() RocksetMongodbCollectionOutput {
	return o
}

func (o RocksetMongodbCollectionOutput) ToRocksetMongodbCollectionOutputWithContext(ctx context.Context) RocksetMongodbCollectionOutput {
	return o
}

// Text describing the collection.
func (o RocksetMongodbCollectionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocksetMongodbCollection) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// **Deprecated** use ingestTransformation instead
//
// Deprecated: Use ingest_transformation instead
func (o RocksetMongodbCollectionOutput) FieldMappingQuery() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocksetMongodbCollection) pulumi.StringPtrOutput { return v.FieldMappingQuery }).(pulumi.StringPtrOutput)
}

// Ingest transformation SQL query. Turns the collection into insertOnly mode.
func (o RocksetMongodbCollectionOutput) IngestTransformation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocksetMongodbCollection) pulumi.StringPtrOutput { return v.IngestTransformation }).(pulumi.StringPtrOutput)
}

// Unique identifier for the collection. Can contain alphanumeric or dash characters.
func (o RocksetMongodbCollectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RocksetMongodbCollection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Number of seconds after which data is purged. Based on event time.
func (o RocksetMongodbCollectionOutput) RetentionSecs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RocksetMongodbCollection) pulumi.IntPtrOutput { return v.RetentionSecs }).(pulumi.IntPtrOutput)
}

// Defines a source for this collection.
func (o RocksetMongodbCollectionOutput) Sources() RocksetMongodbCollectionSourceArrayOutput {
	return o.ApplyT(func(v *RocksetMongodbCollection) RocksetMongodbCollectionSourceArrayOutput { return v.Sources }).(RocksetMongodbCollectionSourceArrayOutput)
}

// Wait until the collection is ready.
func (o RocksetMongodbCollectionOutput) WaitForCollection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RocksetMongodbCollection) pulumi.BoolPtrOutput { return v.WaitForCollection }).(pulumi.BoolPtrOutput)
}

// Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.
func (o RocksetMongodbCollectionOutput) WaitForDocuments() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RocksetMongodbCollection) pulumi.IntPtrOutput { return v.WaitForDocuments }).(pulumi.IntPtrOutput)
}

// The name of the workspace.
func (o RocksetMongodbCollectionOutput) Workspace() pulumi.StringOutput {
	return o.ApplyT(func(v *RocksetMongodbCollection) pulumi.StringOutput { return v.Workspace }).(pulumi.StringOutput)
}

type RocksetMongodbCollectionArrayOutput struct{ *pulumi.OutputState }

func (RocksetMongodbCollectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocksetMongodbCollection)(nil)).Elem()
}

func (o RocksetMongodbCollectionArrayOutput) ToRocksetMongodbCollectionArrayOutput() RocksetMongodbCollectionArrayOutput {
	return o
}

func (o RocksetMongodbCollectionArrayOutput) ToRocksetMongodbCollectionArrayOutputWithContext(ctx context.Context) RocksetMongodbCollectionArrayOutput {
	return o
}

func (o RocksetMongodbCollectionArrayOutput) Index(i pulumi.IntInput) RocksetMongodbCollectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RocksetMongodbCollection {
		return vs[0].([]*RocksetMongodbCollection)[vs[1].(int)]
	}).(RocksetMongodbCollectionOutput)
}

type RocksetMongodbCollectionMapOutput struct{ *pulumi.OutputState }

func (RocksetMongodbCollectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocksetMongodbCollection)(nil)).Elem()
}

func (o RocksetMongodbCollectionMapOutput) ToRocksetMongodbCollectionMapOutput() RocksetMongodbCollectionMapOutput {
	return o
}

func (o RocksetMongodbCollectionMapOutput) ToRocksetMongodbCollectionMapOutputWithContext(ctx context.Context) RocksetMongodbCollectionMapOutput {
	return o
}

func (o RocksetMongodbCollectionMapOutput) MapIndex(k pulumi.StringInput) RocksetMongodbCollectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RocksetMongodbCollection {
		return vs[0].(map[string]*RocksetMongodbCollection)[vs[1].(string)]
	}).(RocksetMongodbCollectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetMongodbCollectionInput)(nil)).Elem(), &RocksetMongodbCollection{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetMongodbCollectionArrayInput)(nil)).Elem(), RocksetMongodbCollectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetMongodbCollectionMapInput)(nil)).Elem(), RocksetMongodbCollectionMap{})
	pulumi.RegisterOutputType(RocksetMongodbCollectionOutput{})
	pulumi.RegisterOutputType(RocksetMongodbCollectionArrayOutput{})
	pulumi.RegisterOutputType(RocksetMongodbCollectionMapOutput{})
}
