// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rockset

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Rockset S3 Integration.
type RocksetS3Integration struct {
	pulumi.CustomResourceState

	// The AWS Role Arn to use for this integration.
	AwsRoleArn pulumi.StringOutput `pulumi:"awsRoleArn"`
	// Text describing the integration.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier for the integration. Can contain alphanumeric or dash characters.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewRocksetS3Integration registers a new resource with the given unique name, arguments, and options.
func NewRocksetS3Integration(ctx *pulumi.Context,
	name string, args *RocksetS3IntegrationArgs, opts ...pulumi.ResourceOption) (*RocksetS3Integration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AwsRoleArn == nil {
		return nil, errors.New("invalid value for required argument 'AwsRoleArn'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RocksetS3Integration
	err := ctx.RegisterResource("rockset:index/rocksetS3Integration:RocksetS3Integration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRocksetS3Integration gets an existing RocksetS3Integration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRocksetS3Integration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RocksetS3IntegrationState, opts ...pulumi.ResourceOption) (*RocksetS3Integration, error) {
	var resource RocksetS3Integration
	err := ctx.ReadResource("rockset:index/rocksetS3Integration:RocksetS3Integration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RocksetS3Integration resources.
type rocksetS3IntegrationState struct {
	// The AWS Role Arn to use for this integration.
	AwsRoleArn *string `pulumi:"awsRoleArn"`
	// Text describing the integration.
	Description *string `pulumi:"description"`
	// Unique identifier for the integration. Can contain alphanumeric or dash characters.
	Name *string `pulumi:"name"`
}

type RocksetS3IntegrationState struct {
	// The AWS Role Arn to use for this integration.
	AwsRoleArn pulumi.StringPtrInput
	// Text describing the integration.
	Description pulumi.StringPtrInput
	// Unique identifier for the integration. Can contain alphanumeric or dash characters.
	Name pulumi.StringPtrInput
}

func (RocksetS3IntegrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*rocksetS3IntegrationState)(nil)).Elem()
}

type rocksetS3IntegrationArgs struct {
	// The AWS Role Arn to use for this integration.
	AwsRoleArn string `pulumi:"awsRoleArn"`
	// Text describing the integration.
	Description *string `pulumi:"description"`
	// Unique identifier for the integration. Can contain alphanumeric or dash characters.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a RocksetS3Integration resource.
type RocksetS3IntegrationArgs struct {
	// The AWS Role Arn to use for this integration.
	AwsRoleArn pulumi.StringInput
	// Text describing the integration.
	Description pulumi.StringPtrInput
	// Unique identifier for the integration. Can contain alphanumeric or dash characters.
	Name pulumi.StringPtrInput
}

func (RocksetS3IntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rocksetS3IntegrationArgs)(nil)).Elem()
}

type RocksetS3IntegrationInput interface {
	pulumi.Input

	ToRocksetS3IntegrationOutput() RocksetS3IntegrationOutput
	ToRocksetS3IntegrationOutputWithContext(ctx context.Context) RocksetS3IntegrationOutput
}

func (*RocksetS3Integration) ElementType() reflect.Type {
	return reflect.TypeOf((**RocksetS3Integration)(nil)).Elem()
}

func (i *RocksetS3Integration) ToRocksetS3IntegrationOutput() RocksetS3IntegrationOutput {
	return i.ToRocksetS3IntegrationOutputWithContext(context.Background())
}

func (i *RocksetS3Integration) ToRocksetS3IntegrationOutputWithContext(ctx context.Context) RocksetS3IntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetS3IntegrationOutput)
}

// RocksetS3IntegrationArrayInput is an input type that accepts RocksetS3IntegrationArray and RocksetS3IntegrationArrayOutput values.
// You can construct a concrete instance of `RocksetS3IntegrationArrayInput` via:
//
//	RocksetS3IntegrationArray{ RocksetS3IntegrationArgs{...} }
type RocksetS3IntegrationArrayInput interface {
	pulumi.Input

	ToRocksetS3IntegrationArrayOutput() RocksetS3IntegrationArrayOutput
	ToRocksetS3IntegrationArrayOutputWithContext(context.Context) RocksetS3IntegrationArrayOutput
}

type RocksetS3IntegrationArray []RocksetS3IntegrationInput

func (RocksetS3IntegrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocksetS3Integration)(nil)).Elem()
}

func (i RocksetS3IntegrationArray) ToRocksetS3IntegrationArrayOutput() RocksetS3IntegrationArrayOutput {
	return i.ToRocksetS3IntegrationArrayOutputWithContext(context.Background())
}

func (i RocksetS3IntegrationArray) ToRocksetS3IntegrationArrayOutputWithContext(ctx context.Context) RocksetS3IntegrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetS3IntegrationArrayOutput)
}

// RocksetS3IntegrationMapInput is an input type that accepts RocksetS3IntegrationMap and RocksetS3IntegrationMapOutput values.
// You can construct a concrete instance of `RocksetS3IntegrationMapInput` via:
//
//	RocksetS3IntegrationMap{ "key": RocksetS3IntegrationArgs{...} }
type RocksetS3IntegrationMapInput interface {
	pulumi.Input

	ToRocksetS3IntegrationMapOutput() RocksetS3IntegrationMapOutput
	ToRocksetS3IntegrationMapOutputWithContext(context.Context) RocksetS3IntegrationMapOutput
}

type RocksetS3IntegrationMap map[string]RocksetS3IntegrationInput

func (RocksetS3IntegrationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocksetS3Integration)(nil)).Elem()
}

func (i RocksetS3IntegrationMap) ToRocksetS3IntegrationMapOutput() RocksetS3IntegrationMapOutput {
	return i.ToRocksetS3IntegrationMapOutputWithContext(context.Background())
}

func (i RocksetS3IntegrationMap) ToRocksetS3IntegrationMapOutputWithContext(ctx context.Context) RocksetS3IntegrationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetS3IntegrationMapOutput)
}

type RocksetS3IntegrationOutput struct{ *pulumi.OutputState }

func (RocksetS3IntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RocksetS3Integration)(nil)).Elem()
}

func (o RocksetS3IntegrationOutput) ToRocksetS3IntegrationOutput() RocksetS3IntegrationOutput {
	return o
}

func (o RocksetS3IntegrationOutput) ToRocksetS3IntegrationOutputWithContext(ctx context.Context) RocksetS3IntegrationOutput {
	return o
}

// The AWS Role Arn to use for this integration.
func (o RocksetS3IntegrationOutput) AwsRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *RocksetS3Integration) pulumi.StringOutput { return v.AwsRoleArn }).(pulumi.StringOutput)
}

// Text describing the integration.
func (o RocksetS3IntegrationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocksetS3Integration) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier for the integration. Can contain alphanumeric or dash characters.
func (o RocksetS3IntegrationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RocksetS3Integration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type RocksetS3IntegrationArrayOutput struct{ *pulumi.OutputState }

func (RocksetS3IntegrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocksetS3Integration)(nil)).Elem()
}

func (o RocksetS3IntegrationArrayOutput) ToRocksetS3IntegrationArrayOutput() RocksetS3IntegrationArrayOutput {
	return o
}

func (o RocksetS3IntegrationArrayOutput) ToRocksetS3IntegrationArrayOutputWithContext(ctx context.Context) RocksetS3IntegrationArrayOutput {
	return o
}

func (o RocksetS3IntegrationArrayOutput) Index(i pulumi.IntInput) RocksetS3IntegrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RocksetS3Integration {
		return vs[0].([]*RocksetS3Integration)[vs[1].(int)]
	}).(RocksetS3IntegrationOutput)
}

type RocksetS3IntegrationMapOutput struct{ *pulumi.OutputState }

func (RocksetS3IntegrationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocksetS3Integration)(nil)).Elem()
}

func (o RocksetS3IntegrationMapOutput) ToRocksetS3IntegrationMapOutput() RocksetS3IntegrationMapOutput {
	return o
}

func (o RocksetS3IntegrationMapOutput) ToRocksetS3IntegrationMapOutputWithContext(ctx context.Context) RocksetS3IntegrationMapOutput {
	return o
}

func (o RocksetS3IntegrationMapOutput) MapIndex(k pulumi.StringInput) RocksetS3IntegrationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RocksetS3Integration {
		return vs[0].(map[string]*RocksetS3Integration)[vs[1].(string)]
	}).(RocksetS3IntegrationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetS3IntegrationInput)(nil)).Elem(), &RocksetS3Integration{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetS3IntegrationArrayInput)(nil)).Elem(), RocksetS3IntegrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetS3IntegrationMapInput)(nil)).Elem(), RocksetS3IntegrationMap{})
	pulumi.RegisterOutputType(RocksetS3IntegrationOutput{})
	pulumi.RegisterOutputType(RocksetS3IntegrationArrayOutput{})
	pulumi.RegisterOutputType(RocksetS3IntegrationMapOutput{})
}
