// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rockset

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Rockset DynamoDB Integration.
type RocksetDynamodbIntegration struct {
	pulumi.CustomResourceState

	// The AWS Role Arn to use for this integration.
	AwsRoleArn pulumi.StringOutput `pulumi:"awsRoleArn"`
	// Text describing the integration.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier for the integration. Can contain alphanumeric or dash characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// AWS S3 bucket name used for exporting the DynamoDB tables.
	S3ExportBucketName pulumi.StringOutput `pulumi:"s3ExportBucketName"`
}

// NewRocksetDynamodbIntegration registers a new resource with the given unique name, arguments, and options.
func NewRocksetDynamodbIntegration(ctx *pulumi.Context,
	name string, args *RocksetDynamodbIntegrationArgs, opts ...pulumi.ResourceOption) (*RocksetDynamodbIntegration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AwsRoleArn == nil {
		return nil, errors.New("invalid value for required argument 'AwsRoleArn'")
	}
	if args.S3ExportBucketName == nil {
		return nil, errors.New("invalid value for required argument 'S3ExportBucketName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RocksetDynamodbIntegration
	err := ctx.RegisterResource("rockset:index/rocksetDynamodbIntegration:RocksetDynamodbIntegration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRocksetDynamodbIntegration gets an existing RocksetDynamodbIntegration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRocksetDynamodbIntegration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RocksetDynamodbIntegrationState, opts ...pulumi.ResourceOption) (*RocksetDynamodbIntegration, error) {
	var resource RocksetDynamodbIntegration
	err := ctx.ReadResource("rockset:index/rocksetDynamodbIntegration:RocksetDynamodbIntegration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RocksetDynamodbIntegration resources.
type rocksetDynamodbIntegrationState struct {
	// The AWS Role Arn to use for this integration.
	AwsRoleArn *string `pulumi:"awsRoleArn"`
	// Text describing the integration.
	Description *string `pulumi:"description"`
	// Unique identifier for the integration. Can contain alphanumeric or dash characters.
	Name *string `pulumi:"name"`
	// AWS S3 bucket name used for exporting the DynamoDB tables.
	S3ExportBucketName *string `pulumi:"s3ExportBucketName"`
}

type RocksetDynamodbIntegrationState struct {
	// The AWS Role Arn to use for this integration.
	AwsRoleArn pulumi.StringPtrInput
	// Text describing the integration.
	Description pulumi.StringPtrInput
	// Unique identifier for the integration. Can contain alphanumeric or dash characters.
	Name pulumi.StringPtrInput
	// AWS S3 bucket name used for exporting the DynamoDB tables.
	S3ExportBucketName pulumi.StringPtrInput
}

func (RocksetDynamodbIntegrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*rocksetDynamodbIntegrationState)(nil)).Elem()
}

type rocksetDynamodbIntegrationArgs struct {
	// The AWS Role Arn to use for this integration.
	AwsRoleArn string `pulumi:"awsRoleArn"`
	// Text describing the integration.
	Description *string `pulumi:"description"`
	// Unique identifier for the integration. Can contain alphanumeric or dash characters.
	Name *string `pulumi:"name"`
	// AWS S3 bucket name used for exporting the DynamoDB tables.
	S3ExportBucketName string `pulumi:"s3ExportBucketName"`
}

// The set of arguments for constructing a RocksetDynamodbIntegration resource.
type RocksetDynamodbIntegrationArgs struct {
	// The AWS Role Arn to use for this integration.
	AwsRoleArn pulumi.StringInput
	// Text describing the integration.
	Description pulumi.StringPtrInput
	// Unique identifier for the integration. Can contain alphanumeric or dash characters.
	Name pulumi.StringPtrInput
	// AWS S3 bucket name used for exporting the DynamoDB tables.
	S3ExportBucketName pulumi.StringInput
}

func (RocksetDynamodbIntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rocksetDynamodbIntegrationArgs)(nil)).Elem()
}

type RocksetDynamodbIntegrationInput interface {
	pulumi.Input

	ToRocksetDynamodbIntegrationOutput() RocksetDynamodbIntegrationOutput
	ToRocksetDynamodbIntegrationOutputWithContext(ctx context.Context) RocksetDynamodbIntegrationOutput
}

func (*RocksetDynamodbIntegration) ElementType() reflect.Type {
	return reflect.TypeOf((**RocksetDynamodbIntegration)(nil)).Elem()
}

func (i *RocksetDynamodbIntegration) ToRocksetDynamodbIntegrationOutput() RocksetDynamodbIntegrationOutput {
	return i.ToRocksetDynamodbIntegrationOutputWithContext(context.Background())
}

func (i *RocksetDynamodbIntegration) ToRocksetDynamodbIntegrationOutputWithContext(ctx context.Context) RocksetDynamodbIntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetDynamodbIntegrationOutput)
}

// RocksetDynamodbIntegrationArrayInput is an input type that accepts RocksetDynamodbIntegrationArray and RocksetDynamodbIntegrationArrayOutput values.
// You can construct a concrete instance of `RocksetDynamodbIntegrationArrayInput` via:
//
//	RocksetDynamodbIntegrationArray{ RocksetDynamodbIntegrationArgs{...} }
type RocksetDynamodbIntegrationArrayInput interface {
	pulumi.Input

	ToRocksetDynamodbIntegrationArrayOutput() RocksetDynamodbIntegrationArrayOutput
	ToRocksetDynamodbIntegrationArrayOutputWithContext(context.Context) RocksetDynamodbIntegrationArrayOutput
}

type RocksetDynamodbIntegrationArray []RocksetDynamodbIntegrationInput

func (RocksetDynamodbIntegrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocksetDynamodbIntegration)(nil)).Elem()
}

func (i RocksetDynamodbIntegrationArray) ToRocksetDynamodbIntegrationArrayOutput() RocksetDynamodbIntegrationArrayOutput {
	return i.ToRocksetDynamodbIntegrationArrayOutputWithContext(context.Background())
}

func (i RocksetDynamodbIntegrationArray) ToRocksetDynamodbIntegrationArrayOutputWithContext(ctx context.Context) RocksetDynamodbIntegrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetDynamodbIntegrationArrayOutput)
}

// RocksetDynamodbIntegrationMapInput is an input type that accepts RocksetDynamodbIntegrationMap and RocksetDynamodbIntegrationMapOutput values.
// You can construct a concrete instance of `RocksetDynamodbIntegrationMapInput` via:
//
//	RocksetDynamodbIntegrationMap{ "key": RocksetDynamodbIntegrationArgs{...} }
type RocksetDynamodbIntegrationMapInput interface {
	pulumi.Input

	ToRocksetDynamodbIntegrationMapOutput() RocksetDynamodbIntegrationMapOutput
	ToRocksetDynamodbIntegrationMapOutputWithContext(context.Context) RocksetDynamodbIntegrationMapOutput
}

type RocksetDynamodbIntegrationMap map[string]RocksetDynamodbIntegrationInput

func (RocksetDynamodbIntegrationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocksetDynamodbIntegration)(nil)).Elem()
}

func (i RocksetDynamodbIntegrationMap) ToRocksetDynamodbIntegrationMapOutput() RocksetDynamodbIntegrationMapOutput {
	return i.ToRocksetDynamodbIntegrationMapOutputWithContext(context.Background())
}

func (i RocksetDynamodbIntegrationMap) ToRocksetDynamodbIntegrationMapOutputWithContext(ctx context.Context) RocksetDynamodbIntegrationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetDynamodbIntegrationMapOutput)
}

type RocksetDynamodbIntegrationOutput struct{ *pulumi.OutputState }

func (RocksetDynamodbIntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RocksetDynamodbIntegration)(nil)).Elem()
}

func (o RocksetDynamodbIntegrationOutput) ToRocksetDynamodbIntegrationOutput() RocksetDynamodbIntegrationOutput {
	return o
}

func (o RocksetDynamodbIntegrationOutput) ToRocksetDynamodbIntegrationOutputWithContext(ctx context.Context) RocksetDynamodbIntegrationOutput {
	return o
}

// The AWS Role Arn to use for this integration.
func (o RocksetDynamodbIntegrationOutput) AwsRoleArn() pulumi.StringOutput {
	return o.ApplyT(func(v *RocksetDynamodbIntegration) pulumi.StringOutput { return v.AwsRoleArn }).(pulumi.StringOutput)
}

// Text describing the integration.
func (o RocksetDynamodbIntegrationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocksetDynamodbIntegration) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier for the integration. Can contain alphanumeric or dash characters.
func (o RocksetDynamodbIntegrationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RocksetDynamodbIntegration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// AWS S3 bucket name used for exporting the DynamoDB tables.
func (o RocksetDynamodbIntegrationOutput) S3ExportBucketName() pulumi.StringOutput {
	return o.ApplyT(func(v *RocksetDynamodbIntegration) pulumi.StringOutput { return v.S3ExportBucketName }).(pulumi.StringOutput)
}

type RocksetDynamodbIntegrationArrayOutput struct{ *pulumi.OutputState }

func (RocksetDynamodbIntegrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocksetDynamodbIntegration)(nil)).Elem()
}

func (o RocksetDynamodbIntegrationArrayOutput) ToRocksetDynamodbIntegrationArrayOutput() RocksetDynamodbIntegrationArrayOutput {
	return o
}

func (o RocksetDynamodbIntegrationArrayOutput) ToRocksetDynamodbIntegrationArrayOutputWithContext(ctx context.Context) RocksetDynamodbIntegrationArrayOutput {
	return o
}

func (o RocksetDynamodbIntegrationArrayOutput) Index(i pulumi.IntInput) RocksetDynamodbIntegrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RocksetDynamodbIntegration {
		return vs[0].([]*RocksetDynamodbIntegration)[vs[1].(int)]
	}).(RocksetDynamodbIntegrationOutput)
}

type RocksetDynamodbIntegrationMapOutput struct{ *pulumi.OutputState }

func (RocksetDynamodbIntegrationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocksetDynamodbIntegration)(nil)).Elem()
}

func (o RocksetDynamodbIntegrationMapOutput) ToRocksetDynamodbIntegrationMapOutput() RocksetDynamodbIntegrationMapOutput {
	return o
}

func (o RocksetDynamodbIntegrationMapOutput) ToRocksetDynamodbIntegrationMapOutputWithContext(ctx context.Context) RocksetDynamodbIntegrationMapOutput {
	return o
}

func (o RocksetDynamodbIntegrationMapOutput) MapIndex(k pulumi.StringInput) RocksetDynamodbIntegrationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RocksetDynamodbIntegration {
		return vs[0].(map[string]*RocksetDynamodbIntegration)[vs[1].(string)]
	}).(RocksetDynamodbIntegrationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetDynamodbIntegrationInput)(nil)).Elem(), &RocksetDynamodbIntegration{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetDynamodbIntegrationArrayInput)(nil)).Elem(), RocksetDynamodbIntegrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetDynamodbIntegrationMapInput)(nil)).Elem(), RocksetDynamodbIntegrationMap{})
	pulumi.RegisterOutputType(RocksetDynamodbIntegrationOutput{})
	pulumi.RegisterOutputType(RocksetDynamodbIntegrationArrayOutput{})
	pulumi.RegisterOutputType(RocksetDynamodbIntegrationMapOutput{})
}
