// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rockset

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manage a Rockset Api Key.
//
// Can be used together with roles to scope the actions the api key can take.
type RocksetApiKey struct {
	pulumi.CustomResourceState

	// The resulting Rockset api key.
	Key pulumi.StringOutput `pulumi:"key"`
	// Name of the api key.
	Name pulumi.StringOutput `pulumi:"name"`
	// The role the api key will use. If not specified, "All User Assigned Roles" will be used.
	Role pulumi.StringPtrOutput `pulumi:"role"`
	// The user the key is created for.
	User pulumi.StringOutput `pulumi:"user"`
}

// NewRocksetApiKey registers a new resource with the given unique name, arguments, and options.
func NewRocksetApiKey(ctx *pulumi.Context,
	name string, args *RocksetApiKeyArgs, opts ...pulumi.ResourceOption) (*RocksetApiKey, error) {
	if args == nil {
		args = &RocksetApiKeyArgs{}
	}

	secrets := pulumi.AdditionalSecretOutputs([]string{
		"key",
	})
	opts = append(opts, secrets)
	opts = pkgResourceDefaultOpts(opts)
	var resource RocksetApiKey
	err := ctx.RegisterResource("rockset:index/rocksetApiKey:RocksetApiKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRocksetApiKey gets an existing RocksetApiKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRocksetApiKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RocksetApiKeyState, opts ...pulumi.ResourceOption) (*RocksetApiKey, error) {
	var resource RocksetApiKey
	err := ctx.ReadResource("rockset:index/rocksetApiKey:RocksetApiKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RocksetApiKey resources.
type rocksetApiKeyState struct {
	// The resulting Rockset api key.
	Key *string `pulumi:"key"`
	// Name of the api key.
	Name *string `pulumi:"name"`
	// The role the api key will use. If not specified, "All User Assigned Roles" will be used.
	Role *string `pulumi:"role"`
	// The user the key is created for.
	User *string `pulumi:"user"`
}

type RocksetApiKeyState struct {
	// The resulting Rockset api key.
	Key pulumi.StringPtrInput
	// Name of the api key.
	Name pulumi.StringPtrInput
	// The role the api key will use. If not specified, "All User Assigned Roles" will be used.
	Role pulumi.StringPtrInput
	// The user the key is created for.
	User pulumi.StringPtrInput
}

func (RocksetApiKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*rocksetApiKeyState)(nil)).Elem()
}

type rocksetApiKeyArgs struct {
	// Name of the api key.
	Name *string `pulumi:"name"`
	// The role the api key will use. If not specified, "All User Assigned Roles" will be used.
	Role *string `pulumi:"role"`
}

// The set of arguments for constructing a RocksetApiKey resource.
type RocksetApiKeyArgs struct {
	// Name of the api key.
	Name pulumi.StringPtrInput
	// The role the api key will use. If not specified, "All User Assigned Roles" will be used.
	Role pulumi.StringPtrInput
}

func (RocksetApiKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rocksetApiKeyArgs)(nil)).Elem()
}

type RocksetApiKeyInput interface {
	pulumi.Input

	ToRocksetApiKeyOutput() RocksetApiKeyOutput
	ToRocksetApiKeyOutputWithContext(ctx context.Context) RocksetApiKeyOutput
}

func (*RocksetApiKey) ElementType() reflect.Type {
	return reflect.TypeOf((**RocksetApiKey)(nil)).Elem()
}

func (i *RocksetApiKey) ToRocksetApiKeyOutput() RocksetApiKeyOutput {
	return i.ToRocksetApiKeyOutputWithContext(context.Background())
}

func (i *RocksetApiKey) ToRocksetApiKeyOutputWithContext(ctx context.Context) RocksetApiKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetApiKeyOutput)
}

// RocksetApiKeyArrayInput is an input type that accepts RocksetApiKeyArray and RocksetApiKeyArrayOutput values.
// You can construct a concrete instance of `RocksetApiKeyArrayInput` via:
//
//	RocksetApiKeyArray{ RocksetApiKeyArgs{...} }
type RocksetApiKeyArrayInput interface {
	pulumi.Input

	ToRocksetApiKeyArrayOutput() RocksetApiKeyArrayOutput
	ToRocksetApiKeyArrayOutputWithContext(context.Context) RocksetApiKeyArrayOutput
}

type RocksetApiKeyArray []RocksetApiKeyInput

func (RocksetApiKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocksetApiKey)(nil)).Elem()
}

func (i RocksetApiKeyArray) ToRocksetApiKeyArrayOutput() RocksetApiKeyArrayOutput {
	return i.ToRocksetApiKeyArrayOutputWithContext(context.Background())
}

func (i RocksetApiKeyArray) ToRocksetApiKeyArrayOutputWithContext(ctx context.Context) RocksetApiKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetApiKeyArrayOutput)
}

// RocksetApiKeyMapInput is an input type that accepts RocksetApiKeyMap and RocksetApiKeyMapOutput values.
// You can construct a concrete instance of `RocksetApiKeyMapInput` via:
//
//	RocksetApiKeyMap{ "key": RocksetApiKeyArgs{...} }
type RocksetApiKeyMapInput interface {
	pulumi.Input

	ToRocksetApiKeyMapOutput() RocksetApiKeyMapOutput
	ToRocksetApiKeyMapOutputWithContext(context.Context) RocksetApiKeyMapOutput
}

type RocksetApiKeyMap map[string]RocksetApiKeyInput

func (RocksetApiKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocksetApiKey)(nil)).Elem()
}

func (i RocksetApiKeyMap) ToRocksetApiKeyMapOutput() RocksetApiKeyMapOutput {
	return i.ToRocksetApiKeyMapOutputWithContext(context.Background())
}

func (i RocksetApiKeyMap) ToRocksetApiKeyMapOutputWithContext(ctx context.Context) RocksetApiKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetApiKeyMapOutput)
}

type RocksetApiKeyOutput struct{ *pulumi.OutputState }

func (RocksetApiKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RocksetApiKey)(nil)).Elem()
}

func (o RocksetApiKeyOutput) ToRocksetApiKeyOutput() RocksetApiKeyOutput {
	return o
}

func (o RocksetApiKeyOutput) ToRocksetApiKeyOutputWithContext(ctx context.Context) RocksetApiKeyOutput {
	return o
}

// The resulting Rockset api key.
func (o RocksetApiKeyOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *RocksetApiKey) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// Name of the api key.
func (o RocksetApiKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RocksetApiKey) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The role the api key will use. If not specified, "All User Assigned Roles" will be used.
func (o RocksetApiKeyOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocksetApiKey) pulumi.StringPtrOutput { return v.Role }).(pulumi.StringPtrOutput)
}

// The user the key is created for.
func (o RocksetApiKeyOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v *RocksetApiKey) pulumi.StringOutput { return v.User }).(pulumi.StringOutput)
}

type RocksetApiKeyArrayOutput struct{ *pulumi.OutputState }

func (RocksetApiKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocksetApiKey)(nil)).Elem()
}

func (o RocksetApiKeyArrayOutput) ToRocksetApiKeyArrayOutput() RocksetApiKeyArrayOutput {
	return o
}

func (o RocksetApiKeyArrayOutput) ToRocksetApiKeyArrayOutputWithContext(ctx context.Context) RocksetApiKeyArrayOutput {
	return o
}

func (o RocksetApiKeyArrayOutput) Index(i pulumi.IntInput) RocksetApiKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RocksetApiKey {
		return vs[0].([]*RocksetApiKey)[vs[1].(int)]
	}).(RocksetApiKeyOutput)
}

type RocksetApiKeyMapOutput struct{ *pulumi.OutputState }

func (RocksetApiKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocksetApiKey)(nil)).Elem()
}

func (o RocksetApiKeyMapOutput) ToRocksetApiKeyMapOutput() RocksetApiKeyMapOutput {
	return o
}

func (o RocksetApiKeyMapOutput) ToRocksetApiKeyMapOutputWithContext(ctx context.Context) RocksetApiKeyMapOutput {
	return o
}

func (o RocksetApiKeyMapOutput) MapIndex(k pulumi.StringInput) RocksetApiKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RocksetApiKey {
		return vs[0].(map[string]*RocksetApiKey)[vs[1].(string)]
	}).(RocksetApiKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetApiKeyInput)(nil)).Elem(), &RocksetApiKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetApiKeyArrayInput)(nil)).Elem(), RocksetApiKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetApiKeyMapInput)(nil)).Elem(), RocksetApiKeyMap{})
	pulumi.RegisterOutputType(RocksetApiKeyOutput{})
	pulumi.RegisterOutputType(RocksetApiKeyArrayOutput{})
	pulumi.RegisterOutputType(RocksetApiKeyMapOutput{})
}
