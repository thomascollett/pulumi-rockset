// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rockset

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an alias for a set of collections.
type RocksetAlias struct {
	pulumi.CustomResourceState

	// List of collections for this alias to refer to.
	Collections pulumi.StringOutput `pulumi:"collections"`
	// Text describing the alias.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier for the alias. Can contain alphanumeric or dash characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// Name of the workspace the alias will be in.
	Workspace pulumi.StringOutput `pulumi:"workspace"`
}

// NewRocksetAlias registers a new resource with the given unique name, arguments, and options.
func NewRocksetAlias(ctx *pulumi.Context,
	name string, args *RocksetAliasArgs, opts ...pulumi.ResourceOption) (*RocksetAlias, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Collections == nil {
		return nil, errors.New("invalid value for required argument 'Collections'")
	}
	if args.Workspace == nil {
		return nil, errors.New("invalid value for required argument 'Workspace'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RocksetAlias
	err := ctx.RegisterResource("rockset:index/rocksetAlias:RocksetAlias", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRocksetAlias gets an existing RocksetAlias resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRocksetAlias(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RocksetAliasState, opts ...pulumi.ResourceOption) (*RocksetAlias, error) {
	var resource RocksetAlias
	err := ctx.ReadResource("rockset:index/rocksetAlias:RocksetAlias", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RocksetAlias resources.
type rocksetAliasState struct {
	// List of collections for this alias to refer to.
	Collections *string `pulumi:"collections"`
	// Text describing the alias.
	Description *string `pulumi:"description"`
	// Unique identifier for the alias. Can contain alphanumeric or dash characters.
	Name *string `pulumi:"name"`
	// Name of the workspace the alias will be in.
	Workspace *string `pulumi:"workspace"`
}

type RocksetAliasState struct {
	// List of collections for this alias to refer to.
	Collections pulumi.StringPtrInput
	// Text describing the alias.
	Description pulumi.StringPtrInput
	// Unique identifier for the alias. Can contain alphanumeric or dash characters.
	Name pulumi.StringPtrInput
	// Name of the workspace the alias will be in.
	Workspace pulumi.StringPtrInput
}

func (RocksetAliasState) ElementType() reflect.Type {
	return reflect.TypeOf((*rocksetAliasState)(nil)).Elem()
}

type rocksetAliasArgs struct {
	// List of collections for this alias to refer to.
	Collections string `pulumi:"collections"`
	// Text describing the alias.
	Description *string `pulumi:"description"`
	// Unique identifier for the alias. Can contain alphanumeric or dash characters.
	Name *string `pulumi:"name"`
	// Name of the workspace the alias will be in.
	Workspace string `pulumi:"workspace"`
}

// The set of arguments for constructing a RocksetAlias resource.
type RocksetAliasArgs struct {
	// List of collections for this alias to refer to.
	Collections pulumi.StringInput
	// Text describing the alias.
	Description pulumi.StringPtrInput
	// Unique identifier for the alias. Can contain alphanumeric or dash characters.
	Name pulumi.StringPtrInput
	// Name of the workspace the alias will be in.
	Workspace pulumi.StringInput
}

func (RocksetAliasArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rocksetAliasArgs)(nil)).Elem()
}

type RocksetAliasInput interface {
	pulumi.Input

	ToRocksetAliasOutput() RocksetAliasOutput
	ToRocksetAliasOutputWithContext(ctx context.Context) RocksetAliasOutput
}

func (*RocksetAlias) ElementType() reflect.Type {
	return reflect.TypeOf((**RocksetAlias)(nil)).Elem()
}

func (i *RocksetAlias) ToRocksetAliasOutput() RocksetAliasOutput {
	return i.ToRocksetAliasOutputWithContext(context.Background())
}

func (i *RocksetAlias) ToRocksetAliasOutputWithContext(ctx context.Context) RocksetAliasOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetAliasOutput)
}

// RocksetAliasArrayInput is an input type that accepts RocksetAliasArray and RocksetAliasArrayOutput values.
// You can construct a concrete instance of `RocksetAliasArrayInput` via:
//
//	RocksetAliasArray{ RocksetAliasArgs{...} }
type RocksetAliasArrayInput interface {
	pulumi.Input

	ToRocksetAliasArrayOutput() RocksetAliasArrayOutput
	ToRocksetAliasArrayOutputWithContext(context.Context) RocksetAliasArrayOutput
}

type RocksetAliasArray []RocksetAliasInput

func (RocksetAliasArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocksetAlias)(nil)).Elem()
}

func (i RocksetAliasArray) ToRocksetAliasArrayOutput() RocksetAliasArrayOutput {
	return i.ToRocksetAliasArrayOutputWithContext(context.Background())
}

func (i RocksetAliasArray) ToRocksetAliasArrayOutputWithContext(ctx context.Context) RocksetAliasArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetAliasArrayOutput)
}

// RocksetAliasMapInput is an input type that accepts RocksetAliasMap and RocksetAliasMapOutput values.
// You can construct a concrete instance of `RocksetAliasMapInput` via:
//
//	RocksetAliasMap{ "key": RocksetAliasArgs{...} }
type RocksetAliasMapInput interface {
	pulumi.Input

	ToRocksetAliasMapOutput() RocksetAliasMapOutput
	ToRocksetAliasMapOutputWithContext(context.Context) RocksetAliasMapOutput
}

type RocksetAliasMap map[string]RocksetAliasInput

func (RocksetAliasMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocksetAlias)(nil)).Elem()
}

func (i RocksetAliasMap) ToRocksetAliasMapOutput() RocksetAliasMapOutput {
	return i.ToRocksetAliasMapOutputWithContext(context.Background())
}

func (i RocksetAliasMap) ToRocksetAliasMapOutputWithContext(ctx context.Context) RocksetAliasMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetAliasMapOutput)
}

type RocksetAliasOutput struct{ *pulumi.OutputState }

func (RocksetAliasOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RocksetAlias)(nil)).Elem()
}

func (o RocksetAliasOutput) ToRocksetAliasOutput() RocksetAliasOutput {
	return o
}

func (o RocksetAliasOutput) ToRocksetAliasOutputWithContext(ctx context.Context) RocksetAliasOutput {
	return o
}

// List of collections for this alias to refer to.
func (o RocksetAliasOutput) Collections() pulumi.StringOutput {
	return o.ApplyT(func(v *RocksetAlias) pulumi.StringOutput { return v.Collections }).(pulumi.StringOutput)
}

// Text describing the alias.
func (o RocksetAliasOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocksetAlias) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier for the alias. Can contain alphanumeric or dash characters.
func (o RocksetAliasOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RocksetAlias) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Name of the workspace the alias will be in.
func (o RocksetAliasOutput) Workspace() pulumi.StringOutput {
	return o.ApplyT(func(v *RocksetAlias) pulumi.StringOutput { return v.Workspace }).(pulumi.StringOutput)
}

type RocksetAliasArrayOutput struct{ *pulumi.OutputState }

func (RocksetAliasArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocksetAlias)(nil)).Elem()
}

func (o RocksetAliasArrayOutput) ToRocksetAliasArrayOutput() RocksetAliasArrayOutput {
	return o
}

func (o RocksetAliasArrayOutput) ToRocksetAliasArrayOutputWithContext(ctx context.Context) RocksetAliasArrayOutput {
	return o
}

func (o RocksetAliasArrayOutput) Index(i pulumi.IntInput) RocksetAliasOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RocksetAlias {
		return vs[0].([]*RocksetAlias)[vs[1].(int)]
	}).(RocksetAliasOutput)
}

type RocksetAliasMapOutput struct{ *pulumi.OutputState }

func (RocksetAliasMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocksetAlias)(nil)).Elem()
}

func (o RocksetAliasMapOutput) ToRocksetAliasMapOutput() RocksetAliasMapOutput {
	return o
}

func (o RocksetAliasMapOutput) ToRocksetAliasMapOutputWithContext(ctx context.Context) RocksetAliasMapOutput {
	return o
}

func (o RocksetAliasMapOutput) MapIndex(k pulumi.StringInput) RocksetAliasOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RocksetAlias {
		return vs[0].(map[string]*RocksetAlias)[vs[1].(string)]
	}).(RocksetAliasOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetAliasInput)(nil)).Elem(), &RocksetAlias{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetAliasArrayInput)(nil)).Elem(), RocksetAliasArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetAliasMapInput)(nil)).Elem(), RocksetAliasMap{})
	pulumi.RegisterOutputType(RocksetAliasOutput{})
	pulumi.RegisterOutputType(RocksetAliasArrayOutput{})
	pulumi.RegisterOutputType(RocksetAliasMapOutput{})
}
