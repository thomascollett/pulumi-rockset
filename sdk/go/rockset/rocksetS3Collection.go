// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rockset

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a collection with on or more S3 sources attached. Uses an S3 integration to access the S3 bucket. If no integration is provided, only data in public buckets are accessible.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/thomascollett/pulumi-rockset/sdk/go/rockset"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sample, err := rockset.NewRocksetWorkspace(ctx, "sample", &rockset.RocksetWorkspaceArgs{
//				Description: pulumi.String("sample datasets"),
//			})
//			if err != nil {
//				return err
//			}
//			public, err := rockset.NewRocksetS3Integration(ctx, "public", &rockset.RocksetS3IntegrationArgs{
//				Description: pulumi.String("Integration to access Rockset's public datasets"),
//				AwsRoleArn:  pulumi.String("arn:aws:iam::469279130686:role/rockset-public-datasets"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = rockset.NewRocksetS3Collection(ctx, "cities", &rockset.RocksetS3CollectionArgs{
//				Workspace: sample.Name,
//				Sources: rockset.RocksetS3CollectionSourceArray{
//					&rockset.RocksetS3CollectionSourceArgs{
//						Bucket:          pulumi.String("rockset-public-datasets"),
//						IntegrationName: public.Name,
//						Pattern:         pulumi.String("cities/*.json"),
//						Format:          pulumi.String("json"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type RocksetS3Collection struct {
	pulumi.CustomResourceState

	// Text describing the collection.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// **Deprecated** use ingestTransformation instead
	//
	// Deprecated: Use ingest_transformation instead
	FieldMappingQuery pulumi.StringPtrOutput `pulumi:"fieldMappingQuery"`
	// Ingest transformation SQL query. Turns the collection into insertOnly mode.
	IngestTransformation pulumi.StringPtrOutput `pulumi:"ingestTransformation"`
	// Unique identifier for the collection. Can contain alphanumeric or dash characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// Number of seconds after which data is purged. Based on event time.
	RetentionSecs pulumi.IntPtrOutput `pulumi:"retentionSecs"`
	// Defines a source for this collection.
	Sources RocksetS3CollectionSourceArrayOutput `pulumi:"sources"`
	// Wait until the collection is ready.
	WaitForCollection pulumi.BoolPtrOutput `pulumi:"waitForCollection"`
	// Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.
	WaitForDocuments pulumi.IntPtrOutput `pulumi:"waitForDocuments"`
	// The name of the workspace.
	Workspace pulumi.StringOutput `pulumi:"workspace"`
}

// NewRocksetS3Collection registers a new resource with the given unique name, arguments, and options.
func NewRocksetS3Collection(ctx *pulumi.Context,
	name string, args *RocksetS3CollectionArgs, opts ...pulumi.ResourceOption) (*RocksetS3Collection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Workspace == nil {
		return nil, errors.New("invalid value for required argument 'Workspace'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RocksetS3Collection
	err := ctx.RegisterResource("rockset:index/rocksetS3Collection:RocksetS3Collection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRocksetS3Collection gets an existing RocksetS3Collection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRocksetS3Collection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RocksetS3CollectionState, opts ...pulumi.ResourceOption) (*RocksetS3Collection, error) {
	var resource RocksetS3Collection
	err := ctx.ReadResource("rockset:index/rocksetS3Collection:RocksetS3Collection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RocksetS3Collection resources.
type rocksetS3CollectionState struct {
	// Text describing the collection.
	Description *string `pulumi:"description"`
	// **Deprecated** use ingestTransformation instead
	//
	// Deprecated: Use ingest_transformation instead
	FieldMappingQuery *string `pulumi:"fieldMappingQuery"`
	// Ingest transformation SQL query. Turns the collection into insertOnly mode.
	IngestTransformation *string `pulumi:"ingestTransformation"`
	// Unique identifier for the collection. Can contain alphanumeric or dash characters.
	Name *string `pulumi:"name"`
	// Number of seconds after which data is purged. Based on event time.
	RetentionSecs *int `pulumi:"retentionSecs"`
	// Defines a source for this collection.
	Sources []RocksetS3CollectionSource `pulumi:"sources"`
	// Wait until the collection is ready.
	WaitForCollection *bool `pulumi:"waitForCollection"`
	// Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.
	WaitForDocuments *int `pulumi:"waitForDocuments"`
	// The name of the workspace.
	Workspace *string `pulumi:"workspace"`
}

type RocksetS3CollectionState struct {
	// Text describing the collection.
	Description pulumi.StringPtrInput
	// **Deprecated** use ingestTransformation instead
	//
	// Deprecated: Use ingest_transformation instead
	FieldMappingQuery pulumi.StringPtrInput
	// Ingest transformation SQL query. Turns the collection into insertOnly mode.
	IngestTransformation pulumi.StringPtrInput
	// Unique identifier for the collection. Can contain alphanumeric or dash characters.
	Name pulumi.StringPtrInput
	// Number of seconds after which data is purged. Based on event time.
	RetentionSecs pulumi.IntPtrInput
	// Defines a source for this collection.
	Sources RocksetS3CollectionSourceArrayInput
	// Wait until the collection is ready.
	WaitForCollection pulumi.BoolPtrInput
	// Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.
	WaitForDocuments pulumi.IntPtrInput
	// The name of the workspace.
	Workspace pulumi.StringPtrInput
}

func (RocksetS3CollectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*rocksetS3CollectionState)(nil)).Elem()
}

type rocksetS3CollectionArgs struct {
	// Text describing the collection.
	Description *string `pulumi:"description"`
	// **Deprecated** use ingestTransformation instead
	//
	// Deprecated: Use ingest_transformation instead
	FieldMappingQuery *string `pulumi:"fieldMappingQuery"`
	// Ingest transformation SQL query. Turns the collection into insertOnly mode.
	IngestTransformation *string `pulumi:"ingestTransformation"`
	// Unique identifier for the collection. Can contain alphanumeric or dash characters.
	Name *string `pulumi:"name"`
	// Number of seconds after which data is purged. Based on event time.
	RetentionSecs *int `pulumi:"retentionSecs"`
	// Defines a source for this collection.
	Sources []RocksetS3CollectionSource `pulumi:"sources"`
	// Wait until the collection is ready.
	WaitForCollection *bool `pulumi:"waitForCollection"`
	// Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.
	WaitForDocuments *int `pulumi:"waitForDocuments"`
	// The name of the workspace.
	Workspace string `pulumi:"workspace"`
}

// The set of arguments for constructing a RocksetS3Collection resource.
type RocksetS3CollectionArgs struct {
	// Text describing the collection.
	Description pulumi.StringPtrInput
	// **Deprecated** use ingestTransformation instead
	//
	// Deprecated: Use ingest_transformation instead
	FieldMappingQuery pulumi.StringPtrInput
	// Ingest transformation SQL query. Turns the collection into insertOnly mode.
	IngestTransformation pulumi.StringPtrInput
	// Unique identifier for the collection. Can contain alphanumeric or dash characters.
	Name pulumi.StringPtrInput
	// Number of seconds after which data is purged. Based on event time.
	RetentionSecs pulumi.IntPtrInput
	// Defines a source for this collection.
	Sources RocksetS3CollectionSourceArrayInput
	// Wait until the collection is ready.
	WaitForCollection pulumi.BoolPtrInput
	// Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.
	WaitForDocuments pulumi.IntPtrInput
	// The name of the workspace.
	Workspace pulumi.StringInput
}

func (RocksetS3CollectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rocksetS3CollectionArgs)(nil)).Elem()
}

type RocksetS3CollectionInput interface {
	pulumi.Input

	ToRocksetS3CollectionOutput() RocksetS3CollectionOutput
	ToRocksetS3CollectionOutputWithContext(ctx context.Context) RocksetS3CollectionOutput
}

func (*RocksetS3Collection) ElementType() reflect.Type {
	return reflect.TypeOf((**RocksetS3Collection)(nil)).Elem()
}

func (i *RocksetS3Collection) ToRocksetS3CollectionOutput() RocksetS3CollectionOutput {
	return i.ToRocksetS3CollectionOutputWithContext(context.Background())
}

func (i *RocksetS3Collection) ToRocksetS3CollectionOutputWithContext(ctx context.Context) RocksetS3CollectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetS3CollectionOutput)
}

// RocksetS3CollectionArrayInput is an input type that accepts RocksetS3CollectionArray and RocksetS3CollectionArrayOutput values.
// You can construct a concrete instance of `RocksetS3CollectionArrayInput` via:
//
//	RocksetS3CollectionArray{ RocksetS3CollectionArgs{...} }
type RocksetS3CollectionArrayInput interface {
	pulumi.Input

	ToRocksetS3CollectionArrayOutput() RocksetS3CollectionArrayOutput
	ToRocksetS3CollectionArrayOutputWithContext(context.Context) RocksetS3CollectionArrayOutput
}

type RocksetS3CollectionArray []RocksetS3CollectionInput

func (RocksetS3CollectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocksetS3Collection)(nil)).Elem()
}

func (i RocksetS3CollectionArray) ToRocksetS3CollectionArrayOutput() RocksetS3CollectionArrayOutput {
	return i.ToRocksetS3CollectionArrayOutputWithContext(context.Background())
}

func (i RocksetS3CollectionArray) ToRocksetS3CollectionArrayOutputWithContext(ctx context.Context) RocksetS3CollectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetS3CollectionArrayOutput)
}

// RocksetS3CollectionMapInput is an input type that accepts RocksetS3CollectionMap and RocksetS3CollectionMapOutput values.
// You can construct a concrete instance of `RocksetS3CollectionMapInput` via:
//
//	RocksetS3CollectionMap{ "key": RocksetS3CollectionArgs{...} }
type RocksetS3CollectionMapInput interface {
	pulumi.Input

	ToRocksetS3CollectionMapOutput() RocksetS3CollectionMapOutput
	ToRocksetS3CollectionMapOutputWithContext(context.Context) RocksetS3CollectionMapOutput
}

type RocksetS3CollectionMap map[string]RocksetS3CollectionInput

func (RocksetS3CollectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocksetS3Collection)(nil)).Elem()
}

func (i RocksetS3CollectionMap) ToRocksetS3CollectionMapOutput() RocksetS3CollectionMapOutput {
	return i.ToRocksetS3CollectionMapOutputWithContext(context.Background())
}

func (i RocksetS3CollectionMap) ToRocksetS3CollectionMapOutputWithContext(ctx context.Context) RocksetS3CollectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetS3CollectionMapOutput)
}

type RocksetS3CollectionOutput struct{ *pulumi.OutputState }

func (RocksetS3CollectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RocksetS3Collection)(nil)).Elem()
}

func (o RocksetS3CollectionOutput) ToRocksetS3CollectionOutput() RocksetS3CollectionOutput {
	return o
}

func (o RocksetS3CollectionOutput) ToRocksetS3CollectionOutputWithContext(ctx context.Context) RocksetS3CollectionOutput {
	return o
}

// Text describing the collection.
func (o RocksetS3CollectionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocksetS3Collection) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// **Deprecated** use ingestTransformation instead
//
// Deprecated: Use ingest_transformation instead
func (o RocksetS3CollectionOutput) FieldMappingQuery() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocksetS3Collection) pulumi.StringPtrOutput { return v.FieldMappingQuery }).(pulumi.StringPtrOutput)
}

// Ingest transformation SQL query. Turns the collection into insertOnly mode.
func (o RocksetS3CollectionOutput) IngestTransformation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocksetS3Collection) pulumi.StringPtrOutput { return v.IngestTransformation }).(pulumi.StringPtrOutput)
}

// Unique identifier for the collection. Can contain alphanumeric or dash characters.
func (o RocksetS3CollectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RocksetS3Collection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Number of seconds after which data is purged. Based on event time.
func (o RocksetS3CollectionOutput) RetentionSecs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RocksetS3Collection) pulumi.IntPtrOutput { return v.RetentionSecs }).(pulumi.IntPtrOutput)
}

// Defines a source for this collection.
func (o RocksetS3CollectionOutput) Sources() RocksetS3CollectionSourceArrayOutput {
	return o.ApplyT(func(v *RocksetS3Collection) RocksetS3CollectionSourceArrayOutput { return v.Sources }).(RocksetS3CollectionSourceArrayOutput)
}

// Wait until the collection is ready.
func (o RocksetS3CollectionOutput) WaitForCollection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RocksetS3Collection) pulumi.BoolPtrOutput { return v.WaitForCollection }).(pulumi.BoolPtrOutput)
}

// Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.
func (o RocksetS3CollectionOutput) WaitForDocuments() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RocksetS3Collection) pulumi.IntPtrOutput { return v.WaitForDocuments }).(pulumi.IntPtrOutput)
}

// The name of the workspace.
func (o RocksetS3CollectionOutput) Workspace() pulumi.StringOutput {
	return o.ApplyT(func(v *RocksetS3Collection) pulumi.StringOutput { return v.Workspace }).(pulumi.StringOutput)
}

type RocksetS3CollectionArrayOutput struct{ *pulumi.OutputState }

func (RocksetS3CollectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocksetS3Collection)(nil)).Elem()
}

func (o RocksetS3CollectionArrayOutput) ToRocksetS3CollectionArrayOutput() RocksetS3CollectionArrayOutput {
	return o
}

func (o RocksetS3CollectionArrayOutput) ToRocksetS3CollectionArrayOutputWithContext(ctx context.Context) RocksetS3CollectionArrayOutput {
	return o
}

func (o RocksetS3CollectionArrayOutput) Index(i pulumi.IntInput) RocksetS3CollectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RocksetS3Collection {
		return vs[0].([]*RocksetS3Collection)[vs[1].(int)]
	}).(RocksetS3CollectionOutput)
}

type RocksetS3CollectionMapOutput struct{ *pulumi.OutputState }

func (RocksetS3CollectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocksetS3Collection)(nil)).Elem()
}

func (o RocksetS3CollectionMapOutput) ToRocksetS3CollectionMapOutput() RocksetS3CollectionMapOutput {
	return o
}

func (o RocksetS3CollectionMapOutput) ToRocksetS3CollectionMapOutputWithContext(ctx context.Context) RocksetS3CollectionMapOutput {
	return o
}

func (o RocksetS3CollectionMapOutput) MapIndex(k pulumi.StringInput) RocksetS3CollectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RocksetS3Collection {
		return vs[0].(map[string]*RocksetS3Collection)[vs[1].(string)]
	}).(RocksetS3CollectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetS3CollectionInput)(nil)).Elem(), &RocksetS3Collection{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetS3CollectionArrayInput)(nil)).Elem(), RocksetS3CollectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetS3CollectionMapInput)(nil)).Elem(), RocksetS3CollectionMap{})
	pulumi.RegisterOutputType(RocksetS3CollectionOutput{})
	pulumi.RegisterOutputType(RocksetS3CollectionArrayOutput{})
	pulumi.RegisterOutputType(RocksetS3CollectionMapOutput{})
}
