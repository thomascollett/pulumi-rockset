// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rockset

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a collection with an DynamoDB source attached.
type RocksetDynamodbCollection struct {
	pulumi.CustomResourceState

	// Text describing the collection.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// **Deprecated** use ingestTransformation instead
	//
	// Deprecated: Use ingest_transformation instead
	FieldMappingQuery pulumi.StringPtrOutput `pulumi:"fieldMappingQuery"`
	// Ingest transformation SQL query. Turns the collection into insertOnly mode.
	IngestTransformation pulumi.StringPtrOutput `pulumi:"ingestTransformation"`
	// Unique identifier for the collection. Can contain alphanumeric or dash characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// Number of seconds after which data is purged. Based on event time.
	RetentionSecs pulumi.IntPtrOutput `pulumi:"retentionSecs"`
	// Defines a source for this collection.
	Sources RocksetDynamodbCollectionSourceArrayOutput `pulumi:"sources"`
	// Wait until the collection is ready.
	WaitForCollection pulumi.BoolPtrOutput `pulumi:"waitForCollection"`
	// Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.
	WaitForDocuments pulumi.IntPtrOutput `pulumi:"waitForDocuments"`
	// The name of the workspace.
	Workspace pulumi.StringOutput `pulumi:"workspace"`
}

// NewRocksetDynamodbCollection registers a new resource with the given unique name, arguments, and options.
func NewRocksetDynamodbCollection(ctx *pulumi.Context,
	name string, args *RocksetDynamodbCollectionArgs, opts ...pulumi.ResourceOption) (*RocksetDynamodbCollection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Workspace == nil {
		return nil, errors.New("invalid value for required argument 'Workspace'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RocksetDynamodbCollection
	err := ctx.RegisterResource("rockset:index/rocksetDynamodbCollection:RocksetDynamodbCollection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRocksetDynamodbCollection gets an existing RocksetDynamodbCollection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRocksetDynamodbCollection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RocksetDynamodbCollectionState, opts ...pulumi.ResourceOption) (*RocksetDynamodbCollection, error) {
	var resource RocksetDynamodbCollection
	err := ctx.ReadResource("rockset:index/rocksetDynamodbCollection:RocksetDynamodbCollection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RocksetDynamodbCollection resources.
type rocksetDynamodbCollectionState struct {
	// Text describing the collection.
	Description *string `pulumi:"description"`
	// **Deprecated** use ingestTransformation instead
	//
	// Deprecated: Use ingest_transformation instead
	FieldMappingQuery *string `pulumi:"fieldMappingQuery"`
	// Ingest transformation SQL query. Turns the collection into insertOnly mode.
	IngestTransformation *string `pulumi:"ingestTransformation"`
	// Unique identifier for the collection. Can contain alphanumeric or dash characters.
	Name *string `pulumi:"name"`
	// Number of seconds after which data is purged. Based on event time.
	RetentionSecs *int `pulumi:"retentionSecs"`
	// Defines a source for this collection.
	Sources []RocksetDynamodbCollectionSource `pulumi:"sources"`
	// Wait until the collection is ready.
	WaitForCollection *bool `pulumi:"waitForCollection"`
	// Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.
	WaitForDocuments *int `pulumi:"waitForDocuments"`
	// The name of the workspace.
	Workspace *string `pulumi:"workspace"`
}

type RocksetDynamodbCollectionState struct {
	// Text describing the collection.
	Description pulumi.StringPtrInput
	// **Deprecated** use ingestTransformation instead
	//
	// Deprecated: Use ingest_transformation instead
	FieldMappingQuery pulumi.StringPtrInput
	// Ingest transformation SQL query. Turns the collection into insertOnly mode.
	IngestTransformation pulumi.StringPtrInput
	// Unique identifier for the collection. Can contain alphanumeric or dash characters.
	Name pulumi.StringPtrInput
	// Number of seconds after which data is purged. Based on event time.
	RetentionSecs pulumi.IntPtrInput
	// Defines a source for this collection.
	Sources RocksetDynamodbCollectionSourceArrayInput
	// Wait until the collection is ready.
	WaitForCollection pulumi.BoolPtrInput
	// Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.
	WaitForDocuments pulumi.IntPtrInput
	// The name of the workspace.
	Workspace pulumi.StringPtrInput
}

func (RocksetDynamodbCollectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*rocksetDynamodbCollectionState)(nil)).Elem()
}

type rocksetDynamodbCollectionArgs struct {
	// Text describing the collection.
	Description *string `pulumi:"description"`
	// **Deprecated** use ingestTransformation instead
	//
	// Deprecated: Use ingest_transformation instead
	FieldMappingQuery *string `pulumi:"fieldMappingQuery"`
	// Ingest transformation SQL query. Turns the collection into insertOnly mode.
	IngestTransformation *string `pulumi:"ingestTransformation"`
	// Unique identifier for the collection. Can contain alphanumeric or dash characters.
	Name *string `pulumi:"name"`
	// Number of seconds after which data is purged. Based on event time.
	RetentionSecs *int `pulumi:"retentionSecs"`
	// Defines a source for this collection.
	Sources []RocksetDynamodbCollectionSource `pulumi:"sources"`
	// Wait until the collection is ready.
	WaitForCollection *bool `pulumi:"waitForCollection"`
	// Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.
	WaitForDocuments *int `pulumi:"waitForDocuments"`
	// The name of the workspace.
	Workspace string `pulumi:"workspace"`
}

// The set of arguments for constructing a RocksetDynamodbCollection resource.
type RocksetDynamodbCollectionArgs struct {
	// Text describing the collection.
	Description pulumi.StringPtrInput
	// **Deprecated** use ingestTransformation instead
	//
	// Deprecated: Use ingest_transformation instead
	FieldMappingQuery pulumi.StringPtrInput
	// Ingest transformation SQL query. Turns the collection into insertOnly mode.
	IngestTransformation pulumi.StringPtrInput
	// Unique identifier for the collection. Can contain alphanumeric or dash characters.
	Name pulumi.StringPtrInput
	// Number of seconds after which data is purged. Based on event time.
	RetentionSecs pulumi.IntPtrInput
	// Defines a source for this collection.
	Sources RocksetDynamodbCollectionSourceArrayInput
	// Wait until the collection is ready.
	WaitForCollection pulumi.BoolPtrInput
	// Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.
	WaitForDocuments pulumi.IntPtrInput
	// The name of the workspace.
	Workspace pulumi.StringInput
}

func (RocksetDynamodbCollectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rocksetDynamodbCollectionArgs)(nil)).Elem()
}

type RocksetDynamodbCollectionInput interface {
	pulumi.Input

	ToRocksetDynamodbCollectionOutput() RocksetDynamodbCollectionOutput
	ToRocksetDynamodbCollectionOutputWithContext(ctx context.Context) RocksetDynamodbCollectionOutput
}

func (*RocksetDynamodbCollection) ElementType() reflect.Type {
	return reflect.TypeOf((**RocksetDynamodbCollection)(nil)).Elem()
}

func (i *RocksetDynamodbCollection) ToRocksetDynamodbCollectionOutput() RocksetDynamodbCollectionOutput {
	return i.ToRocksetDynamodbCollectionOutputWithContext(context.Background())
}

func (i *RocksetDynamodbCollection) ToRocksetDynamodbCollectionOutputWithContext(ctx context.Context) RocksetDynamodbCollectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetDynamodbCollectionOutput)
}

// RocksetDynamodbCollectionArrayInput is an input type that accepts RocksetDynamodbCollectionArray and RocksetDynamodbCollectionArrayOutput values.
// You can construct a concrete instance of `RocksetDynamodbCollectionArrayInput` via:
//
//	RocksetDynamodbCollectionArray{ RocksetDynamodbCollectionArgs{...} }
type RocksetDynamodbCollectionArrayInput interface {
	pulumi.Input

	ToRocksetDynamodbCollectionArrayOutput() RocksetDynamodbCollectionArrayOutput
	ToRocksetDynamodbCollectionArrayOutputWithContext(context.Context) RocksetDynamodbCollectionArrayOutput
}

type RocksetDynamodbCollectionArray []RocksetDynamodbCollectionInput

func (RocksetDynamodbCollectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocksetDynamodbCollection)(nil)).Elem()
}

func (i RocksetDynamodbCollectionArray) ToRocksetDynamodbCollectionArrayOutput() RocksetDynamodbCollectionArrayOutput {
	return i.ToRocksetDynamodbCollectionArrayOutputWithContext(context.Background())
}

func (i RocksetDynamodbCollectionArray) ToRocksetDynamodbCollectionArrayOutputWithContext(ctx context.Context) RocksetDynamodbCollectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetDynamodbCollectionArrayOutput)
}

// RocksetDynamodbCollectionMapInput is an input type that accepts RocksetDynamodbCollectionMap and RocksetDynamodbCollectionMapOutput values.
// You can construct a concrete instance of `RocksetDynamodbCollectionMapInput` via:
//
//	RocksetDynamodbCollectionMap{ "key": RocksetDynamodbCollectionArgs{...} }
type RocksetDynamodbCollectionMapInput interface {
	pulumi.Input

	ToRocksetDynamodbCollectionMapOutput() RocksetDynamodbCollectionMapOutput
	ToRocksetDynamodbCollectionMapOutputWithContext(context.Context) RocksetDynamodbCollectionMapOutput
}

type RocksetDynamodbCollectionMap map[string]RocksetDynamodbCollectionInput

func (RocksetDynamodbCollectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocksetDynamodbCollection)(nil)).Elem()
}

func (i RocksetDynamodbCollectionMap) ToRocksetDynamodbCollectionMapOutput() RocksetDynamodbCollectionMapOutput {
	return i.ToRocksetDynamodbCollectionMapOutputWithContext(context.Background())
}

func (i RocksetDynamodbCollectionMap) ToRocksetDynamodbCollectionMapOutputWithContext(ctx context.Context) RocksetDynamodbCollectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetDynamodbCollectionMapOutput)
}

type RocksetDynamodbCollectionOutput struct{ *pulumi.OutputState }

func (RocksetDynamodbCollectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RocksetDynamodbCollection)(nil)).Elem()
}

func (o RocksetDynamodbCollectionOutput) ToRocksetDynamodbCollectionOutput() RocksetDynamodbCollectionOutput {
	return o
}

func (o RocksetDynamodbCollectionOutput) ToRocksetDynamodbCollectionOutputWithContext(ctx context.Context) RocksetDynamodbCollectionOutput {
	return o
}

// Text describing the collection.
func (o RocksetDynamodbCollectionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocksetDynamodbCollection) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// **Deprecated** use ingestTransformation instead
//
// Deprecated: Use ingest_transformation instead
func (o RocksetDynamodbCollectionOutput) FieldMappingQuery() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocksetDynamodbCollection) pulumi.StringPtrOutput { return v.FieldMappingQuery }).(pulumi.StringPtrOutput)
}

// Ingest transformation SQL query. Turns the collection into insertOnly mode.
func (o RocksetDynamodbCollectionOutput) IngestTransformation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocksetDynamodbCollection) pulumi.StringPtrOutput { return v.IngestTransformation }).(pulumi.StringPtrOutput)
}

// Unique identifier for the collection. Can contain alphanumeric or dash characters.
func (o RocksetDynamodbCollectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RocksetDynamodbCollection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Number of seconds after which data is purged. Based on event time.
func (o RocksetDynamodbCollectionOutput) RetentionSecs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RocksetDynamodbCollection) pulumi.IntPtrOutput { return v.RetentionSecs }).(pulumi.IntPtrOutput)
}

// Defines a source for this collection.
func (o RocksetDynamodbCollectionOutput) Sources() RocksetDynamodbCollectionSourceArrayOutput {
	return o.ApplyT(func(v *RocksetDynamodbCollection) RocksetDynamodbCollectionSourceArrayOutput { return v.Sources }).(RocksetDynamodbCollectionSourceArrayOutput)
}

// Wait until the collection is ready.
func (o RocksetDynamodbCollectionOutput) WaitForCollection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RocksetDynamodbCollection) pulumi.BoolPtrOutput { return v.WaitForCollection }).(pulumi.BoolPtrOutput)
}

// Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.
func (o RocksetDynamodbCollectionOutput) WaitForDocuments() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RocksetDynamodbCollection) pulumi.IntPtrOutput { return v.WaitForDocuments }).(pulumi.IntPtrOutput)
}

// The name of the workspace.
func (o RocksetDynamodbCollectionOutput) Workspace() pulumi.StringOutput {
	return o.ApplyT(func(v *RocksetDynamodbCollection) pulumi.StringOutput { return v.Workspace }).(pulumi.StringOutput)
}

type RocksetDynamodbCollectionArrayOutput struct{ *pulumi.OutputState }

func (RocksetDynamodbCollectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocksetDynamodbCollection)(nil)).Elem()
}

func (o RocksetDynamodbCollectionArrayOutput) ToRocksetDynamodbCollectionArrayOutput() RocksetDynamodbCollectionArrayOutput {
	return o
}

func (o RocksetDynamodbCollectionArrayOutput) ToRocksetDynamodbCollectionArrayOutputWithContext(ctx context.Context) RocksetDynamodbCollectionArrayOutput {
	return o
}

func (o RocksetDynamodbCollectionArrayOutput) Index(i pulumi.IntInput) RocksetDynamodbCollectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RocksetDynamodbCollection {
		return vs[0].([]*RocksetDynamodbCollection)[vs[1].(int)]
	}).(RocksetDynamodbCollectionOutput)
}

type RocksetDynamodbCollectionMapOutput struct{ *pulumi.OutputState }

func (RocksetDynamodbCollectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocksetDynamodbCollection)(nil)).Elem()
}

func (o RocksetDynamodbCollectionMapOutput) ToRocksetDynamodbCollectionMapOutput() RocksetDynamodbCollectionMapOutput {
	return o
}

func (o RocksetDynamodbCollectionMapOutput) ToRocksetDynamodbCollectionMapOutputWithContext(ctx context.Context) RocksetDynamodbCollectionMapOutput {
	return o
}

func (o RocksetDynamodbCollectionMapOutput) MapIndex(k pulumi.StringInput) RocksetDynamodbCollectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RocksetDynamodbCollection {
		return vs[0].(map[string]*RocksetDynamodbCollection)[vs[1].(string)]
	}).(RocksetDynamodbCollectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetDynamodbCollectionInput)(nil)).Elem(), &RocksetDynamodbCollection{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetDynamodbCollectionArrayInput)(nil)).Elem(), RocksetDynamodbCollectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetDynamodbCollectionMapInput)(nil)).Elem(), RocksetDynamodbCollectionMap{})
	pulumi.RegisterOutputType(RocksetDynamodbCollectionOutput{})
	pulumi.RegisterOutputType(RocksetDynamodbCollectionArrayOutput{})
	pulumi.RegisterOutputType(RocksetDynamodbCollectionMapOutput{})
}
