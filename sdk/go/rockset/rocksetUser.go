// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rockset

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Rockset User.
//
// First and last name can only be managed for users who have accepted the invite,
// i.e. when the state is ACCEPTED.
type RocksetUser struct {
	pulumi.CustomResourceState

	// The ISO-8601 time of when the user was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Email address of the user. Also used to identify the user.
	Email pulumi.StringOutput `pulumi:"email"`
	// User's first name. This can only be set once the state is ACTIVE, i.e after the user has accepted the invite.
	FirstName pulumi.StringPtrOutput `pulumi:"firstName"`
	// User's last name. This can only be set once the state is ACTIVE, i.e after the user has accepted the invite.
	LastName pulumi.StringPtrOutput `pulumi:"lastName"`
	// List of roles for the user. E.g. 'admin', 'member', 'read-only'.
	Roles pulumi.StringArrayOutput `pulumi:"roles"`
	// State of the user, either NEW or ACTIVE.
	State pulumi.StringOutput `pulumi:"state"`
}

// NewRocksetUser registers a new resource with the given unique name, arguments, and options.
func NewRocksetUser(ctx *pulumi.Context,
	name string, args *RocksetUserArgs, opts ...pulumi.ResourceOption) (*RocksetUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Email == nil {
		return nil, errors.New("invalid value for required argument 'Email'")
	}
	if args.Roles == nil {
		return nil, errors.New("invalid value for required argument 'Roles'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RocksetUser
	err := ctx.RegisterResource("rockset:index/rocksetUser:RocksetUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRocksetUser gets an existing RocksetUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRocksetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RocksetUserState, opts ...pulumi.ResourceOption) (*RocksetUser, error) {
	var resource RocksetUser
	err := ctx.ReadResource("rockset:index/rocksetUser:RocksetUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RocksetUser resources.
type rocksetUserState struct {
	// The ISO-8601 time of when the user was created.
	CreatedAt *string `pulumi:"createdAt"`
	// Email address of the user. Also used to identify the user.
	Email *string `pulumi:"email"`
	// User's first name. This can only be set once the state is ACTIVE, i.e after the user has accepted the invite.
	FirstName *string `pulumi:"firstName"`
	// User's last name. This can only be set once the state is ACTIVE, i.e after the user has accepted the invite.
	LastName *string `pulumi:"lastName"`
	// List of roles for the user. E.g. 'admin', 'member', 'read-only'.
	Roles []string `pulumi:"roles"`
	// State of the user, either NEW or ACTIVE.
	State *string `pulumi:"state"`
}

type RocksetUserState struct {
	// The ISO-8601 time of when the user was created.
	CreatedAt pulumi.StringPtrInput
	// Email address of the user. Also used to identify the user.
	Email pulumi.StringPtrInput
	// User's first name. This can only be set once the state is ACTIVE, i.e after the user has accepted the invite.
	FirstName pulumi.StringPtrInput
	// User's last name. This can only be set once the state is ACTIVE, i.e after the user has accepted the invite.
	LastName pulumi.StringPtrInput
	// List of roles for the user. E.g. 'admin', 'member', 'read-only'.
	Roles pulumi.StringArrayInput
	// State of the user, either NEW or ACTIVE.
	State pulumi.StringPtrInput
}

func (RocksetUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*rocksetUserState)(nil)).Elem()
}

type rocksetUserArgs struct {
	// Email address of the user. Also used to identify the user.
	Email string `pulumi:"email"`
	// User's first name. This can only be set once the state is ACTIVE, i.e after the user has accepted the invite.
	FirstName *string `pulumi:"firstName"`
	// User's last name. This can only be set once the state is ACTIVE, i.e after the user has accepted the invite.
	LastName *string `pulumi:"lastName"`
	// List of roles for the user. E.g. 'admin', 'member', 'read-only'.
	Roles []string `pulumi:"roles"`
}

// The set of arguments for constructing a RocksetUser resource.
type RocksetUserArgs struct {
	// Email address of the user. Also used to identify the user.
	Email pulumi.StringInput
	// User's first name. This can only be set once the state is ACTIVE, i.e after the user has accepted the invite.
	FirstName pulumi.StringPtrInput
	// User's last name. This can only be set once the state is ACTIVE, i.e after the user has accepted the invite.
	LastName pulumi.StringPtrInput
	// List of roles for the user. E.g. 'admin', 'member', 'read-only'.
	Roles pulumi.StringArrayInput
}

func (RocksetUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rocksetUserArgs)(nil)).Elem()
}

type RocksetUserInput interface {
	pulumi.Input

	ToRocksetUserOutput() RocksetUserOutput
	ToRocksetUserOutputWithContext(ctx context.Context) RocksetUserOutput
}

func (*RocksetUser) ElementType() reflect.Type {
	return reflect.TypeOf((**RocksetUser)(nil)).Elem()
}

func (i *RocksetUser) ToRocksetUserOutput() RocksetUserOutput {
	return i.ToRocksetUserOutputWithContext(context.Background())
}

func (i *RocksetUser) ToRocksetUserOutputWithContext(ctx context.Context) RocksetUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetUserOutput)
}

// RocksetUserArrayInput is an input type that accepts RocksetUserArray and RocksetUserArrayOutput values.
// You can construct a concrete instance of `RocksetUserArrayInput` via:
//
//	RocksetUserArray{ RocksetUserArgs{...} }
type RocksetUserArrayInput interface {
	pulumi.Input

	ToRocksetUserArrayOutput() RocksetUserArrayOutput
	ToRocksetUserArrayOutputWithContext(context.Context) RocksetUserArrayOutput
}

type RocksetUserArray []RocksetUserInput

func (RocksetUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocksetUser)(nil)).Elem()
}

func (i RocksetUserArray) ToRocksetUserArrayOutput() RocksetUserArrayOutput {
	return i.ToRocksetUserArrayOutputWithContext(context.Background())
}

func (i RocksetUserArray) ToRocksetUserArrayOutputWithContext(ctx context.Context) RocksetUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetUserArrayOutput)
}

// RocksetUserMapInput is an input type that accepts RocksetUserMap and RocksetUserMapOutput values.
// You can construct a concrete instance of `RocksetUserMapInput` via:
//
//	RocksetUserMap{ "key": RocksetUserArgs{...} }
type RocksetUserMapInput interface {
	pulumi.Input

	ToRocksetUserMapOutput() RocksetUserMapOutput
	ToRocksetUserMapOutputWithContext(context.Context) RocksetUserMapOutput
}

type RocksetUserMap map[string]RocksetUserInput

func (RocksetUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocksetUser)(nil)).Elem()
}

func (i RocksetUserMap) ToRocksetUserMapOutput() RocksetUserMapOutput {
	return i.ToRocksetUserMapOutputWithContext(context.Background())
}

func (i RocksetUserMap) ToRocksetUserMapOutputWithContext(ctx context.Context) RocksetUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetUserMapOutput)
}

type RocksetUserOutput struct{ *pulumi.OutputState }

func (RocksetUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RocksetUser)(nil)).Elem()
}

func (o RocksetUserOutput) ToRocksetUserOutput() RocksetUserOutput {
	return o
}

func (o RocksetUserOutput) ToRocksetUserOutputWithContext(ctx context.Context) RocksetUserOutput {
	return o
}

// The ISO-8601 time of when the user was created.
func (o RocksetUserOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *RocksetUser) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Email address of the user. Also used to identify the user.
func (o RocksetUserOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v *RocksetUser) pulumi.StringOutput { return v.Email }).(pulumi.StringOutput)
}

// User's first name. This can only be set once the state is ACTIVE, i.e after the user has accepted the invite.
func (o RocksetUserOutput) FirstName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocksetUser) pulumi.StringPtrOutput { return v.FirstName }).(pulumi.StringPtrOutput)
}

// User's last name. This can only be set once the state is ACTIVE, i.e after the user has accepted the invite.
func (o RocksetUserOutput) LastName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocksetUser) pulumi.StringPtrOutput { return v.LastName }).(pulumi.StringPtrOutput)
}

// List of roles for the user. E.g. 'admin', 'member', 'read-only'.
func (o RocksetUserOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RocksetUser) pulumi.StringArrayOutput { return v.Roles }).(pulumi.StringArrayOutput)
}

// State of the user, either NEW or ACTIVE.
func (o RocksetUserOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *RocksetUser) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

type RocksetUserArrayOutput struct{ *pulumi.OutputState }

func (RocksetUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocksetUser)(nil)).Elem()
}

func (o RocksetUserArrayOutput) ToRocksetUserArrayOutput() RocksetUserArrayOutput {
	return o
}

func (o RocksetUserArrayOutput) ToRocksetUserArrayOutputWithContext(ctx context.Context) RocksetUserArrayOutput {
	return o
}

func (o RocksetUserArrayOutput) Index(i pulumi.IntInput) RocksetUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RocksetUser {
		return vs[0].([]*RocksetUser)[vs[1].(int)]
	}).(RocksetUserOutput)
}

type RocksetUserMapOutput struct{ *pulumi.OutputState }

func (RocksetUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocksetUser)(nil)).Elem()
}

func (o RocksetUserMapOutput) ToRocksetUserMapOutput() RocksetUserMapOutput {
	return o
}

func (o RocksetUserMapOutput) ToRocksetUserMapOutputWithContext(ctx context.Context) RocksetUserMapOutput {
	return o
}

func (o RocksetUserMapOutput) MapIndex(k pulumi.StringInput) RocksetUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RocksetUser {
		return vs[0].(map[string]*RocksetUser)[vs[1].(string)]
	}).(RocksetUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetUserInput)(nil)).Elem(), &RocksetUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetUserArrayInput)(nil)).Elem(), RocksetUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetUserMapInput)(nil)).Elem(), RocksetUserMap{})
	pulumi.RegisterOutputType(RocksetUserOutput{})
	pulumi.RegisterOutputType(RocksetUserArrayOutput{})
	pulumi.RegisterOutputType(RocksetUserMapOutput{})
}
