// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rockset

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Rockset Query Lambda Tag.
type RocksetQueryLambdaTag struct {
	pulumi.CustomResourceState

	// Unique identifier for the tag. Can contain alphanumeric or dash characters.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique identifier for the query lambda. Can contain alphanumeric or dash characters.
	QueryLambda pulumi.StringOutput `pulumi:"queryLambda"`
	// Version of the query lambda this tag should point to.
	Version pulumi.StringOutput `pulumi:"version"`
	// The name of the workspace the query lambda is in.
	Workspace pulumi.StringOutput `pulumi:"workspace"`
}

// NewRocksetQueryLambdaTag registers a new resource with the given unique name, arguments, and options.
func NewRocksetQueryLambdaTag(ctx *pulumi.Context,
	name string, args *RocksetQueryLambdaTagArgs, opts ...pulumi.ResourceOption) (*RocksetQueryLambdaTag, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.QueryLambda == nil {
		return nil, errors.New("invalid value for required argument 'QueryLambda'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	if args.Workspace == nil {
		return nil, errors.New("invalid value for required argument 'Workspace'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RocksetQueryLambdaTag
	err := ctx.RegisterResource("rockset:index/rocksetQueryLambdaTag:RocksetQueryLambdaTag", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRocksetQueryLambdaTag gets an existing RocksetQueryLambdaTag resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRocksetQueryLambdaTag(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RocksetQueryLambdaTagState, opts ...pulumi.ResourceOption) (*RocksetQueryLambdaTag, error) {
	var resource RocksetQueryLambdaTag
	err := ctx.ReadResource("rockset:index/rocksetQueryLambdaTag:RocksetQueryLambdaTag", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RocksetQueryLambdaTag resources.
type rocksetQueryLambdaTagState struct {
	// Unique identifier for the tag. Can contain alphanumeric or dash characters.
	Name *string `pulumi:"name"`
	// Unique identifier for the query lambda. Can contain alphanumeric or dash characters.
	QueryLambda *string `pulumi:"queryLambda"`
	// Version of the query lambda this tag should point to.
	Version *string `pulumi:"version"`
	// The name of the workspace the query lambda is in.
	Workspace *string `pulumi:"workspace"`
}

type RocksetQueryLambdaTagState struct {
	// Unique identifier for the tag. Can contain alphanumeric or dash characters.
	Name pulumi.StringPtrInput
	// Unique identifier for the query lambda. Can contain alphanumeric or dash characters.
	QueryLambda pulumi.StringPtrInput
	// Version of the query lambda this tag should point to.
	Version pulumi.StringPtrInput
	// The name of the workspace the query lambda is in.
	Workspace pulumi.StringPtrInput
}

func (RocksetQueryLambdaTagState) ElementType() reflect.Type {
	return reflect.TypeOf((*rocksetQueryLambdaTagState)(nil)).Elem()
}

type rocksetQueryLambdaTagArgs struct {
	// Unique identifier for the tag. Can contain alphanumeric or dash characters.
	Name *string `pulumi:"name"`
	// Unique identifier for the query lambda. Can contain alphanumeric or dash characters.
	QueryLambda string `pulumi:"queryLambda"`
	// Version of the query lambda this tag should point to.
	Version string `pulumi:"version"`
	// The name of the workspace the query lambda is in.
	Workspace string `pulumi:"workspace"`
}

// The set of arguments for constructing a RocksetQueryLambdaTag resource.
type RocksetQueryLambdaTagArgs struct {
	// Unique identifier for the tag. Can contain alphanumeric or dash characters.
	Name pulumi.StringPtrInput
	// Unique identifier for the query lambda. Can contain alphanumeric or dash characters.
	QueryLambda pulumi.StringInput
	// Version of the query lambda this tag should point to.
	Version pulumi.StringInput
	// The name of the workspace the query lambda is in.
	Workspace pulumi.StringInput
}

func (RocksetQueryLambdaTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rocksetQueryLambdaTagArgs)(nil)).Elem()
}

type RocksetQueryLambdaTagInput interface {
	pulumi.Input

	ToRocksetQueryLambdaTagOutput() RocksetQueryLambdaTagOutput
	ToRocksetQueryLambdaTagOutputWithContext(ctx context.Context) RocksetQueryLambdaTagOutput
}

func (*RocksetQueryLambdaTag) ElementType() reflect.Type {
	return reflect.TypeOf((**RocksetQueryLambdaTag)(nil)).Elem()
}

func (i *RocksetQueryLambdaTag) ToRocksetQueryLambdaTagOutput() RocksetQueryLambdaTagOutput {
	return i.ToRocksetQueryLambdaTagOutputWithContext(context.Background())
}

func (i *RocksetQueryLambdaTag) ToRocksetQueryLambdaTagOutputWithContext(ctx context.Context) RocksetQueryLambdaTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetQueryLambdaTagOutput)
}

// RocksetQueryLambdaTagArrayInput is an input type that accepts RocksetQueryLambdaTagArray and RocksetQueryLambdaTagArrayOutput values.
// You can construct a concrete instance of `RocksetQueryLambdaTagArrayInput` via:
//
//	RocksetQueryLambdaTagArray{ RocksetQueryLambdaTagArgs{...} }
type RocksetQueryLambdaTagArrayInput interface {
	pulumi.Input

	ToRocksetQueryLambdaTagArrayOutput() RocksetQueryLambdaTagArrayOutput
	ToRocksetQueryLambdaTagArrayOutputWithContext(context.Context) RocksetQueryLambdaTagArrayOutput
}

type RocksetQueryLambdaTagArray []RocksetQueryLambdaTagInput

func (RocksetQueryLambdaTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocksetQueryLambdaTag)(nil)).Elem()
}

func (i RocksetQueryLambdaTagArray) ToRocksetQueryLambdaTagArrayOutput() RocksetQueryLambdaTagArrayOutput {
	return i.ToRocksetQueryLambdaTagArrayOutputWithContext(context.Background())
}

func (i RocksetQueryLambdaTagArray) ToRocksetQueryLambdaTagArrayOutputWithContext(ctx context.Context) RocksetQueryLambdaTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetQueryLambdaTagArrayOutput)
}

// RocksetQueryLambdaTagMapInput is an input type that accepts RocksetQueryLambdaTagMap and RocksetQueryLambdaTagMapOutput values.
// You can construct a concrete instance of `RocksetQueryLambdaTagMapInput` via:
//
//	RocksetQueryLambdaTagMap{ "key": RocksetQueryLambdaTagArgs{...} }
type RocksetQueryLambdaTagMapInput interface {
	pulumi.Input

	ToRocksetQueryLambdaTagMapOutput() RocksetQueryLambdaTagMapOutput
	ToRocksetQueryLambdaTagMapOutputWithContext(context.Context) RocksetQueryLambdaTagMapOutput
}

type RocksetQueryLambdaTagMap map[string]RocksetQueryLambdaTagInput

func (RocksetQueryLambdaTagMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocksetQueryLambdaTag)(nil)).Elem()
}

func (i RocksetQueryLambdaTagMap) ToRocksetQueryLambdaTagMapOutput() RocksetQueryLambdaTagMapOutput {
	return i.ToRocksetQueryLambdaTagMapOutputWithContext(context.Background())
}

func (i RocksetQueryLambdaTagMap) ToRocksetQueryLambdaTagMapOutputWithContext(ctx context.Context) RocksetQueryLambdaTagMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetQueryLambdaTagMapOutput)
}

type RocksetQueryLambdaTagOutput struct{ *pulumi.OutputState }

func (RocksetQueryLambdaTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RocksetQueryLambdaTag)(nil)).Elem()
}

func (o RocksetQueryLambdaTagOutput) ToRocksetQueryLambdaTagOutput() RocksetQueryLambdaTagOutput {
	return o
}

func (o RocksetQueryLambdaTagOutput) ToRocksetQueryLambdaTagOutputWithContext(ctx context.Context) RocksetQueryLambdaTagOutput {
	return o
}

// Unique identifier for the tag. Can contain alphanumeric or dash characters.
func (o RocksetQueryLambdaTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RocksetQueryLambdaTag) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique identifier for the query lambda. Can contain alphanumeric or dash characters.
func (o RocksetQueryLambdaTagOutput) QueryLambda() pulumi.StringOutput {
	return o.ApplyT(func(v *RocksetQueryLambdaTag) pulumi.StringOutput { return v.QueryLambda }).(pulumi.StringOutput)
}

// Version of the query lambda this tag should point to.
func (o RocksetQueryLambdaTagOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *RocksetQueryLambdaTag) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

// The name of the workspace the query lambda is in.
func (o RocksetQueryLambdaTagOutput) Workspace() pulumi.StringOutput {
	return o.ApplyT(func(v *RocksetQueryLambdaTag) pulumi.StringOutput { return v.Workspace }).(pulumi.StringOutput)
}

type RocksetQueryLambdaTagArrayOutput struct{ *pulumi.OutputState }

func (RocksetQueryLambdaTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocksetQueryLambdaTag)(nil)).Elem()
}

func (o RocksetQueryLambdaTagArrayOutput) ToRocksetQueryLambdaTagArrayOutput() RocksetQueryLambdaTagArrayOutput {
	return o
}

func (o RocksetQueryLambdaTagArrayOutput) ToRocksetQueryLambdaTagArrayOutputWithContext(ctx context.Context) RocksetQueryLambdaTagArrayOutput {
	return o
}

func (o RocksetQueryLambdaTagArrayOutput) Index(i pulumi.IntInput) RocksetQueryLambdaTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RocksetQueryLambdaTag {
		return vs[0].([]*RocksetQueryLambdaTag)[vs[1].(int)]
	}).(RocksetQueryLambdaTagOutput)
}

type RocksetQueryLambdaTagMapOutput struct{ *pulumi.OutputState }

func (RocksetQueryLambdaTagMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocksetQueryLambdaTag)(nil)).Elem()
}

func (o RocksetQueryLambdaTagMapOutput) ToRocksetQueryLambdaTagMapOutput() RocksetQueryLambdaTagMapOutput {
	return o
}

func (o RocksetQueryLambdaTagMapOutput) ToRocksetQueryLambdaTagMapOutputWithContext(ctx context.Context) RocksetQueryLambdaTagMapOutput {
	return o
}

func (o RocksetQueryLambdaTagMapOutput) MapIndex(k pulumi.StringInput) RocksetQueryLambdaTagOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RocksetQueryLambdaTag {
		return vs[0].(map[string]*RocksetQueryLambdaTag)[vs[1].(string)]
	}).(RocksetQueryLambdaTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetQueryLambdaTagInput)(nil)).Elem(), &RocksetQueryLambdaTag{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetQueryLambdaTagArrayInput)(nil)).Elem(), RocksetQueryLambdaTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetQueryLambdaTagMapInput)(nil)).Elem(), RocksetQueryLambdaTagMap{})
	pulumi.RegisterOutputType(RocksetQueryLambdaTagOutput{})
	pulumi.RegisterOutputType(RocksetQueryLambdaTagArrayOutput{})
	pulumi.RegisterOutputType(RocksetQueryLambdaTagMapOutput{})
}
