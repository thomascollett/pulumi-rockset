// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rockset

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "rockset:index/rocksetAlias:RocksetAlias":
		r = &RocksetAlias{}
	case "rockset:index/rocksetApiKey:RocksetApiKey":
		r = &RocksetApiKey{}
	case "rockset:index/rocksetCollection:RocksetCollection":
		r = &RocksetCollection{}
	case "rockset:index/rocksetDynamodbCollection:RocksetDynamodbCollection":
		r = &RocksetDynamodbCollection{}
	case "rockset:index/rocksetDynamodbIntegration:RocksetDynamodbIntegration":
		r = &RocksetDynamodbIntegration{}
	case "rockset:index/rocksetGcsCollection:RocksetGcsCollection":
		r = &RocksetGcsCollection{}
	case "rockset:index/rocksetGcsIntegration:RocksetGcsIntegration":
		r = &RocksetGcsIntegration{}
	case "rockset:index/rocksetKafkaCollection:RocksetKafkaCollection":
		r = &RocksetKafkaCollection{}
	case "rockset:index/rocksetKafkaIntegration:RocksetKafkaIntegration":
		r = &RocksetKafkaIntegration{}
	case "rockset:index/rocksetKinesisCollection:RocksetKinesisCollection":
		r = &RocksetKinesisCollection{}
	case "rockset:index/rocksetKinesisIntegration:RocksetKinesisIntegration":
		r = &RocksetKinesisIntegration{}
	case "rockset:index/rocksetMongodbCollection:RocksetMongodbCollection":
		r = &RocksetMongodbCollection{}
	case "rockset:index/rocksetMongodbIntegration:RocksetMongodbIntegration":
		r = &RocksetMongodbIntegration{}
	case "rockset:index/rocksetQueryLambda:RocksetQueryLambda":
		r = &RocksetQueryLambda{}
	case "rockset:index/rocksetQueryLambdaTag:RocksetQueryLambdaTag":
		r = &RocksetQueryLambdaTag{}
	case "rockset:index/rocksetRole:RocksetRole":
		r = &RocksetRole{}
	case "rockset:index/rocksetS3Collection:RocksetS3Collection":
		r = &RocksetS3Collection{}
	case "rockset:index/rocksetS3Integration:RocksetS3Integration":
		r = &RocksetS3Integration{}
	case "rockset:index/rocksetUser:RocksetUser":
		r = &RocksetUser{}
	case "rockset:index/rocksetView:RocksetView":
		r = &RocksetView{}
	case "rockset:index/rocksetWorkspace:RocksetWorkspace":
		r = &RocksetWorkspace{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:rockset" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	r := &Provider{}
	err := ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return r, err
}

func init() {
	version, _ := PkgVersion()
	pulumi.RegisterResourceModule(
		"rockset",
		"index/rocksetAlias",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rockset",
		"index/rocksetApiKey",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rockset",
		"index/rocksetCollection",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rockset",
		"index/rocksetDynamodbCollection",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rockset",
		"index/rocksetDynamodbIntegration",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rockset",
		"index/rocksetGcsCollection",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rockset",
		"index/rocksetGcsIntegration",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rockset",
		"index/rocksetKafkaCollection",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rockset",
		"index/rocksetKafkaIntegration",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rockset",
		"index/rocksetKinesisCollection",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rockset",
		"index/rocksetKinesisIntegration",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rockset",
		"index/rocksetMongodbCollection",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rockset",
		"index/rocksetMongodbIntegration",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rockset",
		"index/rocksetQueryLambda",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rockset",
		"index/rocksetQueryLambdaTag",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rockset",
		"index/rocksetRole",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rockset",
		"index/rocksetS3Collection",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rockset",
		"index/rocksetS3Integration",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rockset",
		"index/rocksetUser",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rockset",
		"index/rocksetView",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"rockset",
		"index/rocksetWorkspace",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"rockset",
		&pkg{version},
	)
}
