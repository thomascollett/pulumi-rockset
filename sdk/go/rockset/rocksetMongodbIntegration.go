// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rockset

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Rockset MongoDB Integration.
type RocksetMongodbIntegration struct {
	pulumi.CustomResourceState

	// MongoDB connection URI string. The password is scrubbed from the URI when fetched by the API so this field is NOT set on imports and reads.
	ConnectionUri pulumi.StringOutput `pulumi:"connectionUri"`
	// Text describing the integration.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier for the integration. Can contain alphanumeric or dash characters.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewRocksetMongodbIntegration registers a new resource with the given unique name, arguments, and options.
func NewRocksetMongodbIntegration(ctx *pulumi.Context,
	name string, args *RocksetMongodbIntegrationArgs, opts ...pulumi.ResourceOption) (*RocksetMongodbIntegration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionUri == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionUri'")
	}
	if args.ConnectionUri != nil {
		args.ConnectionUri = pulumi.ToSecret(args.ConnectionUri).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"connectionUri",
	})
	opts = append(opts, secrets)
	opts = pkgResourceDefaultOpts(opts)
	var resource RocksetMongodbIntegration
	err := ctx.RegisterResource("rockset:index/rocksetMongodbIntegration:RocksetMongodbIntegration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRocksetMongodbIntegration gets an existing RocksetMongodbIntegration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRocksetMongodbIntegration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RocksetMongodbIntegrationState, opts ...pulumi.ResourceOption) (*RocksetMongodbIntegration, error) {
	var resource RocksetMongodbIntegration
	err := ctx.ReadResource("rockset:index/rocksetMongodbIntegration:RocksetMongodbIntegration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RocksetMongodbIntegration resources.
type rocksetMongodbIntegrationState struct {
	// MongoDB connection URI string. The password is scrubbed from the URI when fetched by the API so this field is NOT set on imports and reads.
	ConnectionUri *string `pulumi:"connectionUri"`
	// Text describing the integration.
	Description *string `pulumi:"description"`
	// Unique identifier for the integration. Can contain alphanumeric or dash characters.
	Name *string `pulumi:"name"`
}

type RocksetMongodbIntegrationState struct {
	// MongoDB connection URI string. The password is scrubbed from the URI when fetched by the API so this field is NOT set on imports and reads.
	ConnectionUri pulumi.StringPtrInput
	// Text describing the integration.
	Description pulumi.StringPtrInput
	// Unique identifier for the integration. Can contain alphanumeric or dash characters.
	Name pulumi.StringPtrInput
}

func (RocksetMongodbIntegrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*rocksetMongodbIntegrationState)(nil)).Elem()
}

type rocksetMongodbIntegrationArgs struct {
	// MongoDB connection URI string. The password is scrubbed from the URI when fetched by the API so this field is NOT set on imports and reads.
	ConnectionUri string `pulumi:"connectionUri"`
	// Text describing the integration.
	Description *string `pulumi:"description"`
	// Unique identifier for the integration. Can contain alphanumeric or dash characters.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a RocksetMongodbIntegration resource.
type RocksetMongodbIntegrationArgs struct {
	// MongoDB connection URI string. The password is scrubbed from the URI when fetched by the API so this field is NOT set on imports and reads.
	ConnectionUri pulumi.StringInput
	// Text describing the integration.
	Description pulumi.StringPtrInput
	// Unique identifier for the integration. Can contain alphanumeric or dash characters.
	Name pulumi.StringPtrInput
}

func (RocksetMongodbIntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rocksetMongodbIntegrationArgs)(nil)).Elem()
}

type RocksetMongodbIntegrationInput interface {
	pulumi.Input

	ToRocksetMongodbIntegrationOutput() RocksetMongodbIntegrationOutput
	ToRocksetMongodbIntegrationOutputWithContext(ctx context.Context) RocksetMongodbIntegrationOutput
}

func (*RocksetMongodbIntegration) ElementType() reflect.Type {
	return reflect.TypeOf((**RocksetMongodbIntegration)(nil)).Elem()
}

func (i *RocksetMongodbIntegration) ToRocksetMongodbIntegrationOutput() RocksetMongodbIntegrationOutput {
	return i.ToRocksetMongodbIntegrationOutputWithContext(context.Background())
}

func (i *RocksetMongodbIntegration) ToRocksetMongodbIntegrationOutputWithContext(ctx context.Context) RocksetMongodbIntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetMongodbIntegrationOutput)
}

// RocksetMongodbIntegrationArrayInput is an input type that accepts RocksetMongodbIntegrationArray and RocksetMongodbIntegrationArrayOutput values.
// You can construct a concrete instance of `RocksetMongodbIntegrationArrayInput` via:
//
//	RocksetMongodbIntegrationArray{ RocksetMongodbIntegrationArgs{...} }
type RocksetMongodbIntegrationArrayInput interface {
	pulumi.Input

	ToRocksetMongodbIntegrationArrayOutput() RocksetMongodbIntegrationArrayOutput
	ToRocksetMongodbIntegrationArrayOutputWithContext(context.Context) RocksetMongodbIntegrationArrayOutput
}

type RocksetMongodbIntegrationArray []RocksetMongodbIntegrationInput

func (RocksetMongodbIntegrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocksetMongodbIntegration)(nil)).Elem()
}

func (i RocksetMongodbIntegrationArray) ToRocksetMongodbIntegrationArrayOutput() RocksetMongodbIntegrationArrayOutput {
	return i.ToRocksetMongodbIntegrationArrayOutputWithContext(context.Background())
}

func (i RocksetMongodbIntegrationArray) ToRocksetMongodbIntegrationArrayOutputWithContext(ctx context.Context) RocksetMongodbIntegrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetMongodbIntegrationArrayOutput)
}

// RocksetMongodbIntegrationMapInput is an input type that accepts RocksetMongodbIntegrationMap and RocksetMongodbIntegrationMapOutput values.
// You can construct a concrete instance of `RocksetMongodbIntegrationMapInput` via:
//
//	RocksetMongodbIntegrationMap{ "key": RocksetMongodbIntegrationArgs{...} }
type RocksetMongodbIntegrationMapInput interface {
	pulumi.Input

	ToRocksetMongodbIntegrationMapOutput() RocksetMongodbIntegrationMapOutput
	ToRocksetMongodbIntegrationMapOutputWithContext(context.Context) RocksetMongodbIntegrationMapOutput
}

type RocksetMongodbIntegrationMap map[string]RocksetMongodbIntegrationInput

func (RocksetMongodbIntegrationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocksetMongodbIntegration)(nil)).Elem()
}

func (i RocksetMongodbIntegrationMap) ToRocksetMongodbIntegrationMapOutput() RocksetMongodbIntegrationMapOutput {
	return i.ToRocksetMongodbIntegrationMapOutputWithContext(context.Background())
}

func (i RocksetMongodbIntegrationMap) ToRocksetMongodbIntegrationMapOutputWithContext(ctx context.Context) RocksetMongodbIntegrationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetMongodbIntegrationMapOutput)
}

type RocksetMongodbIntegrationOutput struct{ *pulumi.OutputState }

func (RocksetMongodbIntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RocksetMongodbIntegration)(nil)).Elem()
}

func (o RocksetMongodbIntegrationOutput) ToRocksetMongodbIntegrationOutput() RocksetMongodbIntegrationOutput {
	return o
}

func (o RocksetMongodbIntegrationOutput) ToRocksetMongodbIntegrationOutputWithContext(ctx context.Context) RocksetMongodbIntegrationOutput {
	return o
}

// MongoDB connection URI string. The password is scrubbed from the URI when fetched by the API so this field is NOT set on imports and reads.
func (o RocksetMongodbIntegrationOutput) ConnectionUri() pulumi.StringOutput {
	return o.ApplyT(func(v *RocksetMongodbIntegration) pulumi.StringOutput { return v.ConnectionUri }).(pulumi.StringOutput)
}

// Text describing the integration.
func (o RocksetMongodbIntegrationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocksetMongodbIntegration) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier for the integration. Can contain alphanumeric or dash characters.
func (o RocksetMongodbIntegrationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RocksetMongodbIntegration) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type RocksetMongodbIntegrationArrayOutput struct{ *pulumi.OutputState }

func (RocksetMongodbIntegrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocksetMongodbIntegration)(nil)).Elem()
}

func (o RocksetMongodbIntegrationArrayOutput) ToRocksetMongodbIntegrationArrayOutput() RocksetMongodbIntegrationArrayOutput {
	return o
}

func (o RocksetMongodbIntegrationArrayOutput) ToRocksetMongodbIntegrationArrayOutputWithContext(ctx context.Context) RocksetMongodbIntegrationArrayOutput {
	return o
}

func (o RocksetMongodbIntegrationArrayOutput) Index(i pulumi.IntInput) RocksetMongodbIntegrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RocksetMongodbIntegration {
		return vs[0].([]*RocksetMongodbIntegration)[vs[1].(int)]
	}).(RocksetMongodbIntegrationOutput)
}

type RocksetMongodbIntegrationMapOutput struct{ *pulumi.OutputState }

func (RocksetMongodbIntegrationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocksetMongodbIntegration)(nil)).Elem()
}

func (o RocksetMongodbIntegrationMapOutput) ToRocksetMongodbIntegrationMapOutput() RocksetMongodbIntegrationMapOutput {
	return o
}

func (o RocksetMongodbIntegrationMapOutput) ToRocksetMongodbIntegrationMapOutputWithContext(ctx context.Context) RocksetMongodbIntegrationMapOutput {
	return o
}

func (o RocksetMongodbIntegrationMapOutput) MapIndex(k pulumi.StringInput) RocksetMongodbIntegrationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RocksetMongodbIntegration {
		return vs[0].(map[string]*RocksetMongodbIntegration)[vs[1].(string)]
	}).(RocksetMongodbIntegrationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetMongodbIntegrationInput)(nil)).Elem(), &RocksetMongodbIntegration{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetMongodbIntegrationArrayInput)(nil)).Elem(), RocksetMongodbIntegrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetMongodbIntegrationMapInput)(nil)).Elem(), RocksetMongodbIntegrationMap{})
	pulumi.RegisterOutputType(RocksetMongodbIntegrationOutput{})
	pulumi.RegisterOutputType(RocksetMongodbIntegrationArrayOutput{})
	pulumi.RegisterOutputType(RocksetMongodbIntegrationMapOutput{})
}
