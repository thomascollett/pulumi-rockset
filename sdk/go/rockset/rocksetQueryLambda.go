// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rockset

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Rockset Query Lambda.
type RocksetQueryLambda struct {
	pulumi.CustomResourceState

	// Text describing the query lambda.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Unique identifier for the query lambda. Can contain alphanumeric or dash characters.
	Name pulumi.StringOutput              `pulumi:"name"`
	Sqls RocksetQueryLambdaSqlArrayOutput `pulumi:"sqls"`
	// The latest state of this query lambda.
	State pulumi.StringOutput `pulumi:"state"`
	// The latest version string of this query lambda.
	Version pulumi.StringOutput `pulumi:"version"`
	// The name of the workspace.
	Workspace pulumi.StringOutput `pulumi:"workspace"`
}

// NewRocksetQueryLambda registers a new resource with the given unique name, arguments, and options.
func NewRocksetQueryLambda(ctx *pulumi.Context,
	name string, args *RocksetQueryLambdaArgs, opts ...pulumi.ResourceOption) (*RocksetQueryLambda, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Sqls == nil {
		return nil, errors.New("invalid value for required argument 'Sqls'")
	}
	if args.Workspace == nil {
		return nil, errors.New("invalid value for required argument 'Workspace'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RocksetQueryLambda
	err := ctx.RegisterResource("rockset:index/rocksetQueryLambda:RocksetQueryLambda", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRocksetQueryLambda gets an existing RocksetQueryLambda resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRocksetQueryLambda(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RocksetQueryLambdaState, opts ...pulumi.ResourceOption) (*RocksetQueryLambda, error) {
	var resource RocksetQueryLambda
	err := ctx.ReadResource("rockset:index/rocksetQueryLambda:RocksetQueryLambda", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RocksetQueryLambda resources.
type rocksetQueryLambdaState struct {
	// Text describing the query lambda.
	Description *string `pulumi:"description"`
	// Unique identifier for the query lambda. Can contain alphanumeric or dash characters.
	Name *string                 `pulumi:"name"`
	Sqls []RocksetQueryLambdaSql `pulumi:"sqls"`
	// The latest state of this query lambda.
	State *string `pulumi:"state"`
	// The latest version string of this query lambda.
	Version *string `pulumi:"version"`
	// The name of the workspace.
	Workspace *string `pulumi:"workspace"`
}

type RocksetQueryLambdaState struct {
	// Text describing the query lambda.
	Description pulumi.StringPtrInput
	// Unique identifier for the query lambda. Can contain alphanumeric or dash characters.
	Name pulumi.StringPtrInput
	Sqls RocksetQueryLambdaSqlArrayInput
	// The latest state of this query lambda.
	State pulumi.StringPtrInput
	// The latest version string of this query lambda.
	Version pulumi.StringPtrInput
	// The name of the workspace.
	Workspace pulumi.StringPtrInput
}

func (RocksetQueryLambdaState) ElementType() reflect.Type {
	return reflect.TypeOf((*rocksetQueryLambdaState)(nil)).Elem()
}

type rocksetQueryLambdaArgs struct {
	// Text describing the query lambda.
	Description *string `pulumi:"description"`
	// Unique identifier for the query lambda. Can contain alphanumeric or dash characters.
	Name *string                 `pulumi:"name"`
	Sqls []RocksetQueryLambdaSql `pulumi:"sqls"`
	// The name of the workspace.
	Workspace string `pulumi:"workspace"`
}

// The set of arguments for constructing a RocksetQueryLambda resource.
type RocksetQueryLambdaArgs struct {
	// Text describing the query lambda.
	Description pulumi.StringPtrInput
	// Unique identifier for the query lambda. Can contain alphanumeric or dash characters.
	Name pulumi.StringPtrInput
	Sqls RocksetQueryLambdaSqlArrayInput
	// The name of the workspace.
	Workspace pulumi.StringInput
}

func (RocksetQueryLambdaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rocksetQueryLambdaArgs)(nil)).Elem()
}

type RocksetQueryLambdaInput interface {
	pulumi.Input

	ToRocksetQueryLambdaOutput() RocksetQueryLambdaOutput
	ToRocksetQueryLambdaOutputWithContext(ctx context.Context) RocksetQueryLambdaOutput
}

func (*RocksetQueryLambda) ElementType() reflect.Type {
	return reflect.TypeOf((**RocksetQueryLambda)(nil)).Elem()
}

func (i *RocksetQueryLambda) ToRocksetQueryLambdaOutput() RocksetQueryLambdaOutput {
	return i.ToRocksetQueryLambdaOutputWithContext(context.Background())
}

func (i *RocksetQueryLambda) ToRocksetQueryLambdaOutputWithContext(ctx context.Context) RocksetQueryLambdaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetQueryLambdaOutput)
}

// RocksetQueryLambdaArrayInput is an input type that accepts RocksetQueryLambdaArray and RocksetQueryLambdaArrayOutput values.
// You can construct a concrete instance of `RocksetQueryLambdaArrayInput` via:
//
//	RocksetQueryLambdaArray{ RocksetQueryLambdaArgs{...} }
type RocksetQueryLambdaArrayInput interface {
	pulumi.Input

	ToRocksetQueryLambdaArrayOutput() RocksetQueryLambdaArrayOutput
	ToRocksetQueryLambdaArrayOutputWithContext(context.Context) RocksetQueryLambdaArrayOutput
}

type RocksetQueryLambdaArray []RocksetQueryLambdaInput

func (RocksetQueryLambdaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocksetQueryLambda)(nil)).Elem()
}

func (i RocksetQueryLambdaArray) ToRocksetQueryLambdaArrayOutput() RocksetQueryLambdaArrayOutput {
	return i.ToRocksetQueryLambdaArrayOutputWithContext(context.Background())
}

func (i RocksetQueryLambdaArray) ToRocksetQueryLambdaArrayOutputWithContext(ctx context.Context) RocksetQueryLambdaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetQueryLambdaArrayOutput)
}

// RocksetQueryLambdaMapInput is an input type that accepts RocksetQueryLambdaMap and RocksetQueryLambdaMapOutput values.
// You can construct a concrete instance of `RocksetQueryLambdaMapInput` via:
//
//	RocksetQueryLambdaMap{ "key": RocksetQueryLambdaArgs{...} }
type RocksetQueryLambdaMapInput interface {
	pulumi.Input

	ToRocksetQueryLambdaMapOutput() RocksetQueryLambdaMapOutput
	ToRocksetQueryLambdaMapOutputWithContext(context.Context) RocksetQueryLambdaMapOutput
}

type RocksetQueryLambdaMap map[string]RocksetQueryLambdaInput

func (RocksetQueryLambdaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocksetQueryLambda)(nil)).Elem()
}

func (i RocksetQueryLambdaMap) ToRocksetQueryLambdaMapOutput() RocksetQueryLambdaMapOutput {
	return i.ToRocksetQueryLambdaMapOutputWithContext(context.Background())
}

func (i RocksetQueryLambdaMap) ToRocksetQueryLambdaMapOutputWithContext(ctx context.Context) RocksetQueryLambdaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocksetQueryLambdaMapOutput)
}

type RocksetQueryLambdaOutput struct{ *pulumi.OutputState }

func (RocksetQueryLambdaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RocksetQueryLambda)(nil)).Elem()
}

func (o RocksetQueryLambdaOutput) ToRocksetQueryLambdaOutput() RocksetQueryLambdaOutput {
	return o
}

func (o RocksetQueryLambdaOutput) ToRocksetQueryLambdaOutputWithContext(ctx context.Context) RocksetQueryLambdaOutput {
	return o
}

// Text describing the query lambda.
func (o RocksetQueryLambdaOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocksetQueryLambda) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Unique identifier for the query lambda. Can contain alphanumeric or dash characters.
func (o RocksetQueryLambdaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RocksetQueryLambda) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RocksetQueryLambdaOutput) Sqls() RocksetQueryLambdaSqlArrayOutput {
	return o.ApplyT(func(v *RocksetQueryLambda) RocksetQueryLambdaSqlArrayOutput { return v.Sqls }).(RocksetQueryLambdaSqlArrayOutput)
}

// The latest state of this query lambda.
func (o RocksetQueryLambdaOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *RocksetQueryLambda) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The latest version string of this query lambda.
func (o RocksetQueryLambdaOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *RocksetQueryLambda) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

// The name of the workspace.
func (o RocksetQueryLambdaOutput) Workspace() pulumi.StringOutput {
	return o.ApplyT(func(v *RocksetQueryLambda) pulumi.StringOutput { return v.Workspace }).(pulumi.StringOutput)
}

type RocksetQueryLambdaArrayOutput struct{ *pulumi.OutputState }

func (RocksetQueryLambdaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocksetQueryLambda)(nil)).Elem()
}

func (o RocksetQueryLambdaArrayOutput) ToRocksetQueryLambdaArrayOutput() RocksetQueryLambdaArrayOutput {
	return o
}

func (o RocksetQueryLambdaArrayOutput) ToRocksetQueryLambdaArrayOutputWithContext(ctx context.Context) RocksetQueryLambdaArrayOutput {
	return o
}

func (o RocksetQueryLambdaArrayOutput) Index(i pulumi.IntInput) RocksetQueryLambdaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RocksetQueryLambda {
		return vs[0].([]*RocksetQueryLambda)[vs[1].(int)]
	}).(RocksetQueryLambdaOutput)
}

type RocksetQueryLambdaMapOutput struct{ *pulumi.OutputState }

func (RocksetQueryLambdaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocksetQueryLambda)(nil)).Elem()
}

func (o RocksetQueryLambdaMapOutput) ToRocksetQueryLambdaMapOutput() RocksetQueryLambdaMapOutput {
	return o
}

func (o RocksetQueryLambdaMapOutput) ToRocksetQueryLambdaMapOutputWithContext(ctx context.Context) RocksetQueryLambdaMapOutput {
	return o
}

func (o RocksetQueryLambdaMapOutput) MapIndex(k pulumi.StringInput) RocksetQueryLambdaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RocksetQueryLambda {
		return vs[0].(map[string]*RocksetQueryLambda)[vs[1].(string)]
	}).(RocksetQueryLambdaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetQueryLambdaInput)(nil)).Elem(), &RocksetQueryLambda{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetQueryLambdaArrayInput)(nil)).Elem(), RocksetQueryLambdaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocksetQueryLambdaMapInput)(nil)).Elem(), RocksetQueryLambdaMap{})
	pulumi.RegisterOutputType(RocksetQueryLambdaOutput{})
	pulumi.RegisterOutputType(RocksetQueryLambdaArrayOutput{})
	pulumi.RegisterOutputType(RocksetQueryLambdaMapOutput{})
}
