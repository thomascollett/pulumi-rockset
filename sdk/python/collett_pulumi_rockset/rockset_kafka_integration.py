# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['RocksetKafkaIntegrationArgs', 'RocksetKafkaIntegration']

@pulumi.input_type
class RocksetKafkaIntegrationArgs:
    def __init__(__self__, *,
                 bootstrap_servers: Optional[pulumi.Input[str]] = None,
                 connection_string: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 kafka_data_format: Optional[pulumi.Input[str]] = None,
                 kafka_topic_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 schema_registry_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 security_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 use_v3: Optional[pulumi.Input[bool]] = None,
                 wait_for_integration: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a RocksetKafkaIntegration resource.
        :param pulumi.Input[str] bootstrap_servers: The Kafka bootstrap server url(s). Required only for V3 integration.
        :param pulumi.Input[str] connection_string: Kafka connection string.
        :param pulumi.Input[str] description: Text describing the integration.
        :param pulumi.Input[str] kafka_data_format: The format of the Kafka topics being tailed. Possible values: JSON, AVRO.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] kafka_topic_names: Kafka topics to tail.
        :param pulumi.Input[str] name: Unique identifier for the integration. Can contain alphanumeric or dash characters.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] schema_registry_config: Kafka configuration for schema registry. Required only for V3 integration.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] security_config: Kafka security configurations. Required only for V3 integration.
        :param pulumi.Input[bool] use_v3: Use v3 for Confluent Cloud.
        :param pulumi.Input[bool] wait_for_integration: Wait until the integration is active.
        """
        if bootstrap_servers is not None:
            pulumi.set(__self__, "bootstrap_servers", bootstrap_servers)
        if connection_string is not None:
            pulumi.set(__self__, "connection_string", connection_string)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if kafka_data_format is not None:
            pulumi.set(__self__, "kafka_data_format", kafka_data_format)
        if kafka_topic_names is not None:
            pulumi.set(__self__, "kafka_topic_names", kafka_topic_names)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if schema_registry_config is not None:
            pulumi.set(__self__, "schema_registry_config", schema_registry_config)
        if security_config is not None:
            pulumi.set(__self__, "security_config", security_config)
        if use_v3 is not None:
            pulumi.set(__self__, "use_v3", use_v3)
        if wait_for_integration is not None:
            pulumi.set(__self__, "wait_for_integration", wait_for_integration)

    @property
    @pulumi.getter(name="bootstrapServers")
    def bootstrap_servers(self) -> Optional[pulumi.Input[str]]:
        """
        The Kafka bootstrap server url(s). Required only for V3 integration.
        """
        return pulumi.get(self, "bootstrap_servers")

    @bootstrap_servers.setter
    def bootstrap_servers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bootstrap_servers", value)

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> Optional[pulumi.Input[str]]:
        """
        Kafka connection string.
        """
        return pulumi.get(self, "connection_string")

    @connection_string.setter
    def connection_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_string", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Text describing the integration.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="kafkaDataFormat")
    def kafka_data_format(self) -> Optional[pulumi.Input[str]]:
        """
        The format of the Kafka topics being tailed. Possible values: JSON, AVRO.
        """
        return pulumi.get(self, "kafka_data_format")

    @kafka_data_format.setter
    def kafka_data_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_data_format", value)

    @property
    @pulumi.getter(name="kafkaTopicNames")
    def kafka_topic_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Kafka topics to tail.
        """
        return pulumi.get(self, "kafka_topic_names")

    @kafka_topic_names.setter
    def kafka_topic_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "kafka_topic_names", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Unique identifier for the integration. Can contain alphanumeric or dash characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="schemaRegistryConfig")
    def schema_registry_config(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Kafka configuration for schema registry. Required only for V3 integration.
        """
        return pulumi.get(self, "schema_registry_config")

    @schema_registry_config.setter
    def schema_registry_config(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "schema_registry_config", value)

    @property
    @pulumi.getter(name="securityConfig")
    def security_config(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Kafka security configurations. Required only for V3 integration.
        """
        return pulumi.get(self, "security_config")

    @security_config.setter
    def security_config(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "security_config", value)

    @property
    @pulumi.getter(name="useV3")
    def use_v3(self) -> Optional[pulumi.Input[bool]]:
        """
        Use v3 for Confluent Cloud.
        """
        return pulumi.get(self, "use_v3")

    @use_v3.setter
    def use_v3(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_v3", value)

    @property
    @pulumi.getter(name="waitForIntegration")
    def wait_for_integration(self) -> Optional[pulumi.Input[bool]]:
        """
        Wait until the integration is active.
        """
        return pulumi.get(self, "wait_for_integration")

    @wait_for_integration.setter
    def wait_for_integration(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "wait_for_integration", value)


@pulumi.input_type
class _RocksetKafkaIntegrationState:
    def __init__(__self__, *,
                 bootstrap_servers: Optional[pulumi.Input[str]] = None,
                 connection_string: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 kafka_data_format: Optional[pulumi.Input[str]] = None,
                 kafka_topic_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 schema_registry_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 security_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 use_v3: Optional[pulumi.Input[bool]] = None,
                 wait_for_integration: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering RocksetKafkaIntegration resources.
        :param pulumi.Input[str] bootstrap_servers: The Kafka bootstrap server url(s). Required only for V3 integration.
        :param pulumi.Input[str] connection_string: Kafka connection string.
        :param pulumi.Input[str] description: Text describing the integration.
        :param pulumi.Input[str] kafka_data_format: The format of the Kafka topics being tailed. Possible values: JSON, AVRO.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] kafka_topic_names: Kafka topics to tail.
        :param pulumi.Input[str] name: Unique identifier for the integration. Can contain alphanumeric or dash characters.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] schema_registry_config: Kafka configuration for schema registry. Required only for V3 integration.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] security_config: Kafka security configurations. Required only for V3 integration.
        :param pulumi.Input[bool] use_v3: Use v3 for Confluent Cloud.
        :param pulumi.Input[bool] wait_for_integration: Wait until the integration is active.
        """
        if bootstrap_servers is not None:
            pulumi.set(__self__, "bootstrap_servers", bootstrap_servers)
        if connection_string is not None:
            pulumi.set(__self__, "connection_string", connection_string)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if kafka_data_format is not None:
            pulumi.set(__self__, "kafka_data_format", kafka_data_format)
        if kafka_topic_names is not None:
            pulumi.set(__self__, "kafka_topic_names", kafka_topic_names)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if schema_registry_config is not None:
            pulumi.set(__self__, "schema_registry_config", schema_registry_config)
        if security_config is not None:
            pulumi.set(__self__, "security_config", security_config)
        if use_v3 is not None:
            pulumi.set(__self__, "use_v3", use_v3)
        if wait_for_integration is not None:
            pulumi.set(__self__, "wait_for_integration", wait_for_integration)

    @property
    @pulumi.getter(name="bootstrapServers")
    def bootstrap_servers(self) -> Optional[pulumi.Input[str]]:
        """
        The Kafka bootstrap server url(s). Required only for V3 integration.
        """
        return pulumi.get(self, "bootstrap_servers")

    @bootstrap_servers.setter
    def bootstrap_servers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bootstrap_servers", value)

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> Optional[pulumi.Input[str]]:
        """
        Kafka connection string.
        """
        return pulumi.get(self, "connection_string")

    @connection_string.setter
    def connection_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_string", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Text describing the integration.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="kafkaDataFormat")
    def kafka_data_format(self) -> Optional[pulumi.Input[str]]:
        """
        The format of the Kafka topics being tailed. Possible values: JSON, AVRO.
        """
        return pulumi.get(self, "kafka_data_format")

    @kafka_data_format.setter
    def kafka_data_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kafka_data_format", value)

    @property
    @pulumi.getter(name="kafkaTopicNames")
    def kafka_topic_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Kafka topics to tail.
        """
        return pulumi.get(self, "kafka_topic_names")

    @kafka_topic_names.setter
    def kafka_topic_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "kafka_topic_names", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Unique identifier for the integration. Can contain alphanumeric or dash characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="schemaRegistryConfig")
    def schema_registry_config(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Kafka configuration for schema registry. Required only for V3 integration.
        """
        return pulumi.get(self, "schema_registry_config")

    @schema_registry_config.setter
    def schema_registry_config(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "schema_registry_config", value)

    @property
    @pulumi.getter(name="securityConfig")
    def security_config(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Kafka security configurations. Required only for V3 integration.
        """
        return pulumi.get(self, "security_config")

    @security_config.setter
    def security_config(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "security_config", value)

    @property
    @pulumi.getter(name="useV3")
    def use_v3(self) -> Optional[pulumi.Input[bool]]:
        """
        Use v3 for Confluent Cloud.
        """
        return pulumi.get(self, "use_v3")

    @use_v3.setter
    def use_v3(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_v3", value)

    @property
    @pulumi.getter(name="waitForIntegration")
    def wait_for_integration(self) -> Optional[pulumi.Input[bool]]:
        """
        Wait until the integration is active.
        """
        return pulumi.get(self, "wait_for_integration")

    @wait_for_integration.setter
    def wait_for_integration(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "wait_for_integration", value)


class RocksetKafkaIntegration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bootstrap_servers: Optional[pulumi.Input[str]] = None,
                 connection_string: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 kafka_data_format: Optional[pulumi.Input[str]] = None,
                 kafka_topic_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 schema_registry_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 security_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 use_v3: Optional[pulumi.Input[bool]] = None,
                 wait_for_integration: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Create a RocksetKafkaIntegration resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bootstrap_servers: The Kafka bootstrap server url(s). Required only for V3 integration.
        :param pulumi.Input[str] connection_string: Kafka connection string.
        :param pulumi.Input[str] description: Text describing the integration.
        :param pulumi.Input[str] kafka_data_format: The format of the Kafka topics being tailed. Possible values: JSON, AVRO.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] kafka_topic_names: Kafka topics to tail.
        :param pulumi.Input[str] name: Unique identifier for the integration. Can contain alphanumeric or dash characters.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] schema_registry_config: Kafka configuration for schema registry. Required only for V3 integration.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] security_config: Kafka security configurations. Required only for V3 integration.
        :param pulumi.Input[bool] use_v3: Use v3 for Confluent Cloud.
        :param pulumi.Input[bool] wait_for_integration: Wait until the integration is active.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[RocksetKafkaIntegrationArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a RocksetKafkaIntegration resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param RocksetKafkaIntegrationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RocksetKafkaIntegrationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bootstrap_servers: Optional[pulumi.Input[str]] = None,
                 connection_string: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 kafka_data_format: Optional[pulumi.Input[str]] = None,
                 kafka_topic_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 schema_registry_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 security_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 use_v3: Optional[pulumi.Input[bool]] = None,
                 wait_for_integration: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RocksetKafkaIntegrationArgs.__new__(RocksetKafkaIntegrationArgs)

            __props__.__dict__["bootstrap_servers"] = bootstrap_servers
            __props__.__dict__["connection_string"] = connection_string
            __props__.__dict__["description"] = description
            __props__.__dict__["kafka_data_format"] = kafka_data_format
            __props__.__dict__["kafka_topic_names"] = kafka_topic_names
            __props__.__dict__["name"] = name
            __props__.__dict__["schema_registry_config"] = schema_registry_config
            __props__.__dict__["security_config"] = security_config
            __props__.__dict__["use_v3"] = use_v3
            __props__.__dict__["wait_for_integration"] = wait_for_integration
        super(RocksetKafkaIntegration, __self__).__init__(
            'rockset:index/rocksetKafkaIntegration:RocksetKafkaIntegration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            bootstrap_servers: Optional[pulumi.Input[str]] = None,
            connection_string: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            kafka_data_format: Optional[pulumi.Input[str]] = None,
            kafka_topic_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            schema_registry_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            security_config: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            use_v3: Optional[pulumi.Input[bool]] = None,
            wait_for_integration: Optional[pulumi.Input[bool]] = None) -> 'RocksetKafkaIntegration':
        """
        Get an existing RocksetKafkaIntegration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] bootstrap_servers: The Kafka bootstrap server url(s). Required only for V3 integration.
        :param pulumi.Input[str] connection_string: Kafka connection string.
        :param pulumi.Input[str] description: Text describing the integration.
        :param pulumi.Input[str] kafka_data_format: The format of the Kafka topics being tailed. Possible values: JSON, AVRO.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] kafka_topic_names: Kafka topics to tail.
        :param pulumi.Input[str] name: Unique identifier for the integration. Can contain alphanumeric or dash characters.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] schema_registry_config: Kafka configuration for schema registry. Required only for V3 integration.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] security_config: Kafka security configurations. Required only for V3 integration.
        :param pulumi.Input[bool] use_v3: Use v3 for Confluent Cloud.
        :param pulumi.Input[bool] wait_for_integration: Wait until the integration is active.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RocksetKafkaIntegrationState.__new__(_RocksetKafkaIntegrationState)

        __props__.__dict__["bootstrap_servers"] = bootstrap_servers
        __props__.__dict__["connection_string"] = connection_string
        __props__.__dict__["description"] = description
        __props__.__dict__["kafka_data_format"] = kafka_data_format
        __props__.__dict__["kafka_topic_names"] = kafka_topic_names
        __props__.__dict__["name"] = name
        __props__.__dict__["schema_registry_config"] = schema_registry_config
        __props__.__dict__["security_config"] = security_config
        __props__.__dict__["use_v3"] = use_v3
        __props__.__dict__["wait_for_integration"] = wait_for_integration
        return RocksetKafkaIntegration(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="bootstrapServers")
    def bootstrap_servers(self) -> pulumi.Output[Optional[str]]:
        """
        The Kafka bootstrap server url(s). Required only for V3 integration.
        """
        return pulumi.get(self, "bootstrap_servers")

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> pulumi.Output[str]:
        """
        Kafka connection string.
        """
        return pulumi.get(self, "connection_string")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Text describing the integration.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="kafkaDataFormat")
    def kafka_data_format(self) -> pulumi.Output[Optional[str]]:
        """
        The format of the Kafka topics being tailed. Possible values: JSON, AVRO.
        """
        return pulumi.get(self, "kafka_data_format")

    @property
    @pulumi.getter(name="kafkaTopicNames")
    def kafka_topic_names(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Kafka topics to tail.
        """
        return pulumi.get(self, "kafka_topic_names")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Unique identifier for the integration. Can contain alphanumeric or dash characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="schemaRegistryConfig")
    def schema_registry_config(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Kafka configuration for schema registry. Required only for V3 integration.
        """
        return pulumi.get(self, "schema_registry_config")

    @property
    @pulumi.getter(name="securityConfig")
    def security_config(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Kafka security configurations. Required only for V3 integration.
        """
        return pulumi.get(self, "security_config")

    @property
    @pulumi.getter(name="useV3")
    def use_v3(self) -> pulumi.Output[Optional[bool]]:
        """
        Use v3 for Confluent Cloud.
        """
        return pulumi.get(self, "use_v3")

    @property
    @pulumi.getter(name="waitForIntegration")
    def wait_for_integration(self) -> pulumi.Output[Optional[bool]]:
        """
        Wait until the integration is active.
        """
        return pulumi.get(self, "wait_for_integration")

