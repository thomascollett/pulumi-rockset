# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['RocksetUserArgs', 'RocksetUser']

@pulumi.input_type
class RocksetUserArgs:
    def __init__(__self__, *,
                 email: pulumi.Input[str],
                 roles: pulumi.Input[Sequence[pulumi.Input[str]]],
                 first_name: Optional[pulumi.Input[str]] = None,
                 last_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a RocksetUser resource.
        :param pulumi.Input[str] email: Email address of the user. Also used to identify the user.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: List of roles for the user. E.g. 'admin', 'member', 'read-only'.
        :param pulumi.Input[str] first_name: User's first name. This can only be set once the state is ACTIVE, i.e after the user has accepted the invite.
        :param pulumi.Input[str] last_name: User's last name. This can only be set once the state is ACTIVE, i.e after the user has accepted the invite.
        """
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "roles", roles)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        """
        Email address of the user. Also used to identify the user.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def roles(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of roles for the user. E.g. 'admin', 'member', 'read-only'.
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[pulumi.Input[str]]:
        """
        User's first name. This can only be set once the state is ACTIVE, i.e after the user has accepted the invite.
        """
        return pulumi.get(self, "first_name")

    @first_name.setter
    def first_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "first_name", value)

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[pulumi.Input[str]]:
        """
        User's last name. This can only be set once the state is ACTIVE, i.e after the user has accepted the invite.
        """
        return pulumi.get(self, "last_name")

    @last_name.setter
    def last_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_name", value)


@pulumi.input_type
class _RocksetUserState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 first_name: Optional[pulumi.Input[str]] = None,
                 last_name: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 state: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RocksetUser resources.
        :param pulumi.Input[str] created_at: The ISO-8601 time of when the user was created.
        :param pulumi.Input[str] email: Email address of the user. Also used to identify the user.
        :param pulumi.Input[str] first_name: User's first name. This can only be set once the state is ACTIVE, i.e after the user has accepted the invite.
        :param pulumi.Input[str] last_name: User's last name. This can only be set once the state is ACTIVE, i.e after the user has accepted the invite.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: List of roles for the user. E.g. 'admin', 'member', 'read-only'.
        :param pulumi.Input[str] state: State of the user, either NEW or ACTIVE.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        The ISO-8601 time of when the user was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        Email address of the user. Also used to identify the user.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[pulumi.Input[str]]:
        """
        User's first name. This can only be set once the state is ACTIVE, i.e after the user has accepted the invite.
        """
        return pulumi.get(self, "first_name")

    @first_name.setter
    def first_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "first_name", value)

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[pulumi.Input[str]]:
        """
        User's last name. This can only be set once the state is ACTIVE, i.e after the user has accepted the invite.
        """
        return pulumi.get(self, "last_name")

    @last_name.setter
    def last_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_name", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of roles for the user. E.g. 'admin', 'member', 'read-only'.
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        State of the user, either NEW or ACTIVE.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


class RocksetUser(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 first_name: Optional[pulumi.Input[str]] = None,
                 last_name: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Manages a Rockset User.

        First and last name can only be managed for users who have accepted the invite,
        i.e. when the state is ACCEPTED.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] email: Email address of the user. Also used to identify the user.
        :param pulumi.Input[str] first_name: User's first name. This can only be set once the state is ACTIVE, i.e after the user has accepted the invite.
        :param pulumi.Input[str] last_name: User's last name. This can only be set once the state is ACTIVE, i.e after the user has accepted the invite.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: List of roles for the user. E.g. 'admin', 'member', 'read-only'.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RocksetUserArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a Rockset User.

        First and last name can only be managed for users who have accepted the invite,
        i.e. when the state is ACCEPTED.

        :param str resource_name: The name of the resource.
        :param RocksetUserArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RocksetUserArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 first_name: Optional[pulumi.Input[str]] = None,
                 last_name: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RocksetUserArgs.__new__(RocksetUserArgs)

            if email is None and not opts.urn:
                raise TypeError("Missing required property 'email'")
            __props__.__dict__["email"] = email
            __props__.__dict__["first_name"] = first_name
            __props__.__dict__["last_name"] = last_name
            if roles is None and not opts.urn:
                raise TypeError("Missing required property 'roles'")
            __props__.__dict__["roles"] = roles
            __props__.__dict__["created_at"] = None
            __props__.__dict__["state"] = None
        super(RocksetUser, __self__).__init__(
            'rockset:index/rocksetUser:RocksetUser',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            email: Optional[pulumi.Input[str]] = None,
            first_name: Optional[pulumi.Input[str]] = None,
            last_name: Optional[pulumi.Input[str]] = None,
            roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            state: Optional[pulumi.Input[str]] = None) -> 'RocksetUser':
        """
        Get an existing RocksetUser resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] created_at: The ISO-8601 time of when the user was created.
        :param pulumi.Input[str] email: Email address of the user. Also used to identify the user.
        :param pulumi.Input[str] first_name: User's first name. This can only be set once the state is ACTIVE, i.e after the user has accepted the invite.
        :param pulumi.Input[str] last_name: User's last name. This can only be set once the state is ACTIVE, i.e after the user has accepted the invite.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: List of roles for the user. E.g. 'admin', 'member', 'read-only'.
        :param pulumi.Input[str] state: State of the user, either NEW or ACTIVE.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RocksetUserState.__new__(_RocksetUserState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["email"] = email
        __props__.__dict__["first_name"] = first_name
        __props__.__dict__["last_name"] = last_name
        __props__.__dict__["roles"] = roles
        __props__.__dict__["state"] = state
        return RocksetUser(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        The ISO-8601 time of when the user was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def email(self) -> pulumi.Output[str]:
        """
        Email address of the user. Also used to identify the user.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> pulumi.Output[Optional[str]]:
        """
        User's first name. This can only be set once the state is ACTIVE, i.e after the user has accepted the invite.
        """
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> pulumi.Output[Optional[str]]:
        """
        User's last name. This can only be set once the state is ACTIVE, i.e after the user has accepted the invite.
        """
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def roles(self) -> pulumi.Output[Sequence[str]]:
        """
        List of roles for the user. E.g. 'admin', 'member', 'read-only'.
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        State of the user, either NEW or ACTIVE.
        """
        return pulumi.get(self, "state")

