# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RocksetQueryLambdaArgs', 'RocksetQueryLambda']

@pulumi.input_type
class RocksetQueryLambdaArgs:
    def __init__(__self__, *,
                 sqls: pulumi.Input[Sequence[pulumi.Input['RocksetQueryLambdaSqlArgs']]],
                 workspace: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a RocksetQueryLambda resource.
        :param pulumi.Input[str] workspace: The name of the workspace.
        :param pulumi.Input[str] description: Text describing the query lambda.
        :param pulumi.Input[str] name: Unique identifier for the query lambda. Can contain alphanumeric or dash characters.
        """
        pulumi.set(__self__, "sqls", sqls)
        pulumi.set(__self__, "workspace", workspace)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def sqls(self) -> pulumi.Input[Sequence[pulumi.Input['RocksetQueryLambdaSqlArgs']]]:
        return pulumi.get(self, "sqls")

    @sqls.setter
    def sqls(self, value: pulumi.Input[Sequence[pulumi.Input['RocksetQueryLambdaSqlArgs']]]):
        pulumi.set(self, "sqls", value)

    @property
    @pulumi.getter
    def workspace(self) -> pulumi.Input[str]:
        """
        The name of the workspace.
        """
        return pulumi.get(self, "workspace")

    @workspace.setter
    def workspace(self, value: pulumi.Input[str]):
        pulumi.set(self, "workspace", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Text describing the query lambda.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Unique identifier for the query lambda. Can contain alphanumeric or dash characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _RocksetQueryLambdaState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 sqls: Optional[pulumi.Input[Sequence[pulumi.Input['RocksetQueryLambdaSqlArgs']]]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 workspace: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RocksetQueryLambda resources.
        :param pulumi.Input[str] description: Text describing the query lambda.
        :param pulumi.Input[str] name: Unique identifier for the query lambda. Can contain alphanumeric or dash characters.
        :param pulumi.Input[str] state: The latest state of this query lambda.
        :param pulumi.Input[str] version: The latest version string of this query lambda.
        :param pulumi.Input[str] workspace: The name of the workspace.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if sqls is not None:
            pulumi.set(__self__, "sqls", sqls)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if workspace is not None:
            pulumi.set(__self__, "workspace", workspace)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Text describing the query lambda.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Unique identifier for the query lambda. Can contain alphanumeric or dash characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def sqls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RocksetQueryLambdaSqlArgs']]]]:
        return pulumi.get(self, "sqls")

    @sqls.setter
    def sqls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RocksetQueryLambdaSqlArgs']]]]):
        pulumi.set(self, "sqls", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        The latest state of this query lambda.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        The latest version string of this query lambda.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter
    def workspace(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the workspace.
        """
        return pulumi.get(self, "workspace")

    @workspace.setter
    def workspace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspace", value)


class RocksetQueryLambda(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 sqls: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RocksetQueryLambdaSqlArgs']]]]] = None,
                 workspace: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages a Rockset Query Lambda.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Text describing the query lambda.
        :param pulumi.Input[str] name: Unique identifier for the query lambda. Can contain alphanumeric or dash characters.
        :param pulumi.Input[str] workspace: The name of the workspace.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RocksetQueryLambdaArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a Rockset Query Lambda.

        :param str resource_name: The name of the resource.
        :param RocksetQueryLambdaArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RocksetQueryLambdaArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 sqls: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RocksetQueryLambdaSqlArgs']]]]] = None,
                 workspace: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RocksetQueryLambdaArgs.__new__(RocksetQueryLambdaArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            if sqls is None and not opts.urn:
                raise TypeError("Missing required property 'sqls'")
            __props__.__dict__["sqls"] = sqls
            if workspace is None and not opts.urn:
                raise TypeError("Missing required property 'workspace'")
            __props__.__dict__["workspace"] = workspace
            __props__.__dict__["state"] = None
            __props__.__dict__["version"] = None
        super(RocksetQueryLambda, __self__).__init__(
            'rockset:index/rocksetQueryLambda:RocksetQueryLambda',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            sqls: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RocksetQueryLambdaSqlArgs']]]]] = None,
            state: Optional[pulumi.Input[str]] = None,
            version: Optional[pulumi.Input[str]] = None,
            workspace: Optional[pulumi.Input[str]] = None) -> 'RocksetQueryLambda':
        """
        Get an existing RocksetQueryLambda resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Text describing the query lambda.
        :param pulumi.Input[str] name: Unique identifier for the query lambda. Can contain alphanumeric or dash characters.
        :param pulumi.Input[str] state: The latest state of this query lambda.
        :param pulumi.Input[str] version: The latest version string of this query lambda.
        :param pulumi.Input[str] workspace: The name of the workspace.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RocksetQueryLambdaState.__new__(_RocksetQueryLambdaState)

        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["sqls"] = sqls
        __props__.__dict__["state"] = state
        __props__.__dict__["version"] = version
        __props__.__dict__["workspace"] = workspace
        return RocksetQueryLambda(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Text describing the query lambda.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Unique identifier for the query lambda. Can contain alphanumeric or dash characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def sqls(self) -> pulumi.Output[Sequence['outputs.RocksetQueryLambdaSql']]:
        return pulumi.get(self, "sqls")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        The latest state of this query lambda.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[str]:
        """
        The latest version string of this query lambda.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def workspace(self) -> pulumi.Output[str]:
        """
        The name of the workspace.
        """
        return pulumi.get(self, "workspace")

