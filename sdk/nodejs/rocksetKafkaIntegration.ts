// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RocksetKafkaIntegration extends pulumi.CustomResource {
    /**
     * Get an existing RocksetKafkaIntegration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RocksetKafkaIntegrationState, opts?: pulumi.CustomResourceOptions): RocksetKafkaIntegration {
        return new RocksetKafkaIntegration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rockset:index/rocksetKafkaIntegration:RocksetKafkaIntegration';

    /**
     * Returns true if the given object is an instance of RocksetKafkaIntegration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RocksetKafkaIntegration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RocksetKafkaIntegration.__pulumiType;
    }

    /**
     * The Kafka bootstrap server url(s). Required only for V3 integration.
     */
    public readonly bootstrapServers!: pulumi.Output<string | undefined>;
    /**
     * Kafka connection string.
     */
    public readonly connectionString!: pulumi.Output<string>;
    /**
     * Text describing the integration.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The format of the Kafka topics being tailed. Possible values: JSON, AVRO.
     */
    public readonly kafkaDataFormat!: pulumi.Output<string | undefined>;
    /**
     * Kafka topics to tail.
     */
    public readonly kafkaTopicNames!: pulumi.Output<string[] | undefined>;
    /**
     * Unique identifier for the integration. Can contain alphanumeric or dash characters.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Kafka configuration for schema registry. Required only for V3 integration.
     */
    public readonly schemaRegistryConfig!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Kafka security configurations. Required only for V3 integration.
     */
    public readonly securityConfig!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Use v3 for Confluent Cloud.
     */
    public readonly useV3!: pulumi.Output<boolean | undefined>;
    /**
     * Wait until the integration is active.
     */
    public readonly waitForIntegration!: pulumi.Output<boolean | undefined>;

    /**
     * Create a RocksetKafkaIntegration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RocksetKafkaIntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RocksetKafkaIntegrationArgs | RocksetKafkaIntegrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RocksetKafkaIntegrationState | undefined;
            resourceInputs["bootstrapServers"] = state ? state.bootstrapServers : undefined;
            resourceInputs["connectionString"] = state ? state.connectionString : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["kafkaDataFormat"] = state ? state.kafkaDataFormat : undefined;
            resourceInputs["kafkaTopicNames"] = state ? state.kafkaTopicNames : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["schemaRegistryConfig"] = state ? state.schemaRegistryConfig : undefined;
            resourceInputs["securityConfig"] = state ? state.securityConfig : undefined;
            resourceInputs["useV3"] = state ? state.useV3 : undefined;
            resourceInputs["waitForIntegration"] = state ? state.waitForIntegration : undefined;
        } else {
            const args = argsOrState as RocksetKafkaIntegrationArgs | undefined;
            resourceInputs["bootstrapServers"] = args ? args.bootstrapServers : undefined;
            resourceInputs["connectionString"] = args ? args.connectionString : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["kafkaDataFormat"] = args ? args.kafkaDataFormat : undefined;
            resourceInputs["kafkaTopicNames"] = args ? args.kafkaTopicNames : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["schemaRegistryConfig"] = args ? args.schemaRegistryConfig : undefined;
            resourceInputs["securityConfig"] = args ? args.securityConfig : undefined;
            resourceInputs["useV3"] = args ? args.useV3 : undefined;
            resourceInputs["waitForIntegration"] = args ? args.waitForIntegration : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RocksetKafkaIntegration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RocksetKafkaIntegration resources.
 */
export interface RocksetKafkaIntegrationState {
    /**
     * The Kafka bootstrap server url(s). Required only for V3 integration.
     */
    bootstrapServers?: pulumi.Input<string>;
    /**
     * Kafka connection string.
     */
    connectionString?: pulumi.Input<string>;
    /**
     * Text describing the integration.
     */
    description?: pulumi.Input<string>;
    /**
     * The format of the Kafka topics being tailed. Possible values: JSON, AVRO.
     */
    kafkaDataFormat?: pulumi.Input<string>;
    /**
     * Kafka topics to tail.
     */
    kafkaTopicNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unique identifier for the integration. Can contain alphanumeric or dash characters.
     */
    name?: pulumi.Input<string>;
    /**
     * Kafka configuration for schema registry. Required only for V3 integration.
     */
    schemaRegistryConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Kafka security configurations. Required only for V3 integration.
     */
    securityConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Use v3 for Confluent Cloud.
     */
    useV3?: pulumi.Input<boolean>;
    /**
     * Wait until the integration is active.
     */
    waitForIntegration?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a RocksetKafkaIntegration resource.
 */
export interface RocksetKafkaIntegrationArgs {
    /**
     * The Kafka bootstrap server url(s). Required only for V3 integration.
     */
    bootstrapServers?: pulumi.Input<string>;
    /**
     * Kafka connection string.
     */
    connectionString?: pulumi.Input<string>;
    /**
     * Text describing the integration.
     */
    description?: pulumi.Input<string>;
    /**
     * The format of the Kafka topics being tailed. Possible values: JSON, AVRO.
     */
    kafkaDataFormat?: pulumi.Input<string>;
    /**
     * Kafka topics to tail.
     */
    kafkaTopicNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unique identifier for the integration. Can contain alphanumeric or dash characters.
     */
    name?: pulumi.Input<string>;
    /**
     * Kafka configuration for schema registry. Required only for V3 integration.
     */
    schemaRegistryConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Kafka security configurations. Required only for V3 integration.
     */
    securityConfig?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Use v3 for Confluent Cloud.
     */
    useV3?: pulumi.Input<boolean>;
    /**
     * Wait until the integration is active.
     */
    waitForIntegration?: pulumi.Input<boolean>;
}
