// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./getAccount";
export * from "./provider";
export * from "./rocksetAlias";
export * from "./rocksetApiKey";
export * from "./rocksetCollection";
export * from "./rocksetDynamodbCollection";
export * from "./rocksetDynamodbIntegration";
export * from "./rocksetGcsCollection";
export * from "./rocksetGcsIntegration";
export * from "./rocksetKafkaCollection";
export * from "./rocksetKafkaIntegration";
export * from "./rocksetKinesisCollection";
export * from "./rocksetKinesisIntegration";
export * from "./rocksetMongodbCollection";
export * from "./rocksetMongodbIntegration";
export * from "./rocksetQueryLambda";
export * from "./rocksetQueryLambdaTag";
export * from "./rocksetRole";
export * from "./rocksetS3Collection";
export * from "./rocksetS3Integration";
export * from "./rocksetUser";
export * from "./rocksetView";
export * from "./rocksetWorkspace";

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

// Import resources to register:
import { RocksetAlias } from "./rocksetAlias";
import { RocksetApiKey } from "./rocksetApiKey";
import { RocksetCollection } from "./rocksetCollection";
import { RocksetDynamodbCollection } from "./rocksetDynamodbCollection";
import { RocksetDynamodbIntegration } from "./rocksetDynamodbIntegration";
import { RocksetGcsCollection } from "./rocksetGcsCollection";
import { RocksetGcsIntegration } from "./rocksetGcsIntegration";
import { RocksetKafkaCollection } from "./rocksetKafkaCollection";
import { RocksetKafkaIntegration } from "./rocksetKafkaIntegration";
import { RocksetKinesisCollection } from "./rocksetKinesisCollection";
import { RocksetKinesisIntegration } from "./rocksetKinesisIntegration";
import { RocksetMongodbCollection } from "./rocksetMongodbCollection";
import { RocksetMongodbIntegration } from "./rocksetMongodbIntegration";
import { RocksetQueryLambda } from "./rocksetQueryLambda";
import { RocksetQueryLambdaTag } from "./rocksetQueryLambdaTag";
import { RocksetRole } from "./rocksetRole";
import { RocksetS3Collection } from "./rocksetS3Collection";
import { RocksetS3Integration } from "./rocksetS3Integration";
import { RocksetUser } from "./rocksetUser";
import { RocksetView } from "./rocksetView";
import { RocksetWorkspace } from "./rocksetWorkspace";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "rockset:index/rocksetAlias:RocksetAlias":
                return new RocksetAlias(name, <any>undefined, { urn })
            case "rockset:index/rocksetApiKey:RocksetApiKey":
                return new RocksetApiKey(name, <any>undefined, { urn })
            case "rockset:index/rocksetCollection:RocksetCollection":
                return new RocksetCollection(name, <any>undefined, { urn })
            case "rockset:index/rocksetDynamodbCollection:RocksetDynamodbCollection":
                return new RocksetDynamodbCollection(name, <any>undefined, { urn })
            case "rockset:index/rocksetDynamodbIntegration:RocksetDynamodbIntegration":
                return new RocksetDynamodbIntegration(name, <any>undefined, { urn })
            case "rockset:index/rocksetGcsCollection:RocksetGcsCollection":
                return new RocksetGcsCollection(name, <any>undefined, { urn })
            case "rockset:index/rocksetGcsIntegration:RocksetGcsIntegration":
                return new RocksetGcsIntegration(name, <any>undefined, { urn })
            case "rockset:index/rocksetKafkaCollection:RocksetKafkaCollection":
                return new RocksetKafkaCollection(name, <any>undefined, { urn })
            case "rockset:index/rocksetKafkaIntegration:RocksetKafkaIntegration":
                return new RocksetKafkaIntegration(name, <any>undefined, { urn })
            case "rockset:index/rocksetKinesisCollection:RocksetKinesisCollection":
                return new RocksetKinesisCollection(name, <any>undefined, { urn })
            case "rockset:index/rocksetKinesisIntegration:RocksetKinesisIntegration":
                return new RocksetKinesisIntegration(name, <any>undefined, { urn })
            case "rockset:index/rocksetMongodbCollection:RocksetMongodbCollection":
                return new RocksetMongodbCollection(name, <any>undefined, { urn })
            case "rockset:index/rocksetMongodbIntegration:RocksetMongodbIntegration":
                return new RocksetMongodbIntegration(name, <any>undefined, { urn })
            case "rockset:index/rocksetQueryLambda:RocksetQueryLambda":
                return new RocksetQueryLambda(name, <any>undefined, { urn })
            case "rockset:index/rocksetQueryLambdaTag:RocksetQueryLambdaTag":
                return new RocksetQueryLambdaTag(name, <any>undefined, { urn })
            case "rockset:index/rocksetRole:RocksetRole":
                return new RocksetRole(name, <any>undefined, { urn })
            case "rockset:index/rocksetS3Collection:RocksetS3Collection":
                return new RocksetS3Collection(name, <any>undefined, { urn })
            case "rockset:index/rocksetS3Integration:RocksetS3Integration":
                return new RocksetS3Integration(name, <any>undefined, { urn })
            case "rockset:index/rocksetUser:RocksetUser":
                return new RocksetUser(name, <any>undefined, { urn })
            case "rockset:index/rocksetView:RocksetView":
                return new RocksetView(name, <any>undefined, { urn })
            case "rockset:index/rocksetWorkspace:RocksetWorkspace":
                return new RocksetWorkspace(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("rockset", "index/rocksetAlias", _module)
pulumi.runtime.registerResourceModule("rockset", "index/rocksetApiKey", _module)
pulumi.runtime.registerResourceModule("rockset", "index/rocksetCollection", _module)
pulumi.runtime.registerResourceModule("rockset", "index/rocksetDynamodbCollection", _module)
pulumi.runtime.registerResourceModule("rockset", "index/rocksetDynamodbIntegration", _module)
pulumi.runtime.registerResourceModule("rockset", "index/rocksetGcsCollection", _module)
pulumi.runtime.registerResourceModule("rockset", "index/rocksetGcsIntegration", _module)
pulumi.runtime.registerResourceModule("rockset", "index/rocksetKafkaCollection", _module)
pulumi.runtime.registerResourceModule("rockset", "index/rocksetKafkaIntegration", _module)
pulumi.runtime.registerResourceModule("rockset", "index/rocksetKinesisCollection", _module)
pulumi.runtime.registerResourceModule("rockset", "index/rocksetKinesisIntegration", _module)
pulumi.runtime.registerResourceModule("rockset", "index/rocksetMongodbCollection", _module)
pulumi.runtime.registerResourceModule("rockset", "index/rocksetMongodbIntegration", _module)
pulumi.runtime.registerResourceModule("rockset", "index/rocksetQueryLambda", _module)
pulumi.runtime.registerResourceModule("rockset", "index/rocksetQueryLambdaTag", _module)
pulumi.runtime.registerResourceModule("rockset", "index/rocksetRole", _module)
pulumi.runtime.registerResourceModule("rockset", "index/rocksetS3Collection", _module)
pulumi.runtime.registerResourceModule("rockset", "index/rocksetS3Integration", _module)
pulumi.runtime.registerResourceModule("rockset", "index/rocksetUser", _module)
pulumi.runtime.registerResourceModule("rockset", "index/rocksetView", _module)
pulumi.runtime.registerResourceModule("rockset", "index/rocksetWorkspace", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("rockset", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:rockset") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
