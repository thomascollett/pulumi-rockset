// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { GetAccountResult } from "./getAccount";
export const getAccount: typeof import("./getAccount").getAccount = null as any;
utilities.lazyLoad(exports, ["getAccount"], () => require("./getAccount"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RocksetAliasArgs, RocksetAliasState } from "./rocksetAlias";
export type RocksetAlias = import("./rocksetAlias").RocksetAlias;
export const RocksetAlias: typeof import("./rocksetAlias").RocksetAlias = null as any;
utilities.lazyLoad(exports, ["RocksetAlias"], () => require("./rocksetAlias"));

export { RocksetApiKeyArgs, RocksetApiKeyState } from "./rocksetApiKey";
export type RocksetApiKey = import("./rocksetApiKey").RocksetApiKey;
export const RocksetApiKey: typeof import("./rocksetApiKey").RocksetApiKey = null as any;
utilities.lazyLoad(exports, ["RocksetApiKey"], () => require("./rocksetApiKey"));

export { RocksetCollectionArgs, RocksetCollectionState } from "./rocksetCollection";
export type RocksetCollection = import("./rocksetCollection").RocksetCollection;
export const RocksetCollection: typeof import("./rocksetCollection").RocksetCollection = null as any;
utilities.lazyLoad(exports, ["RocksetCollection"], () => require("./rocksetCollection"));

export { RocksetDynamodbCollectionArgs, RocksetDynamodbCollectionState } from "./rocksetDynamodbCollection";
export type RocksetDynamodbCollection = import("./rocksetDynamodbCollection").RocksetDynamodbCollection;
export const RocksetDynamodbCollection: typeof import("./rocksetDynamodbCollection").RocksetDynamodbCollection = null as any;
utilities.lazyLoad(exports, ["RocksetDynamodbCollection"], () => require("./rocksetDynamodbCollection"));

export { RocksetDynamodbIntegrationArgs, RocksetDynamodbIntegrationState } from "./rocksetDynamodbIntegration";
export type RocksetDynamodbIntegration = import("./rocksetDynamodbIntegration").RocksetDynamodbIntegration;
export const RocksetDynamodbIntegration: typeof import("./rocksetDynamodbIntegration").RocksetDynamodbIntegration = null as any;
utilities.lazyLoad(exports, ["RocksetDynamodbIntegration"], () => require("./rocksetDynamodbIntegration"));

export { RocksetGcsCollectionArgs, RocksetGcsCollectionState } from "./rocksetGcsCollection";
export type RocksetGcsCollection = import("./rocksetGcsCollection").RocksetGcsCollection;
export const RocksetGcsCollection: typeof import("./rocksetGcsCollection").RocksetGcsCollection = null as any;
utilities.lazyLoad(exports, ["RocksetGcsCollection"], () => require("./rocksetGcsCollection"));

export { RocksetGcsIntegrationArgs, RocksetGcsIntegrationState } from "./rocksetGcsIntegration";
export type RocksetGcsIntegration = import("./rocksetGcsIntegration").RocksetGcsIntegration;
export const RocksetGcsIntegration: typeof import("./rocksetGcsIntegration").RocksetGcsIntegration = null as any;
utilities.lazyLoad(exports, ["RocksetGcsIntegration"], () => require("./rocksetGcsIntegration"));

export { RocksetKafkaCollectionArgs, RocksetKafkaCollectionState } from "./rocksetKafkaCollection";
export type RocksetKafkaCollection = import("./rocksetKafkaCollection").RocksetKafkaCollection;
export const RocksetKafkaCollection: typeof import("./rocksetKafkaCollection").RocksetKafkaCollection = null as any;
utilities.lazyLoad(exports, ["RocksetKafkaCollection"], () => require("./rocksetKafkaCollection"));

export { RocksetKafkaIntegrationArgs, RocksetKafkaIntegrationState } from "./rocksetKafkaIntegration";
export type RocksetKafkaIntegration = import("./rocksetKafkaIntegration").RocksetKafkaIntegration;
export const RocksetKafkaIntegration: typeof import("./rocksetKafkaIntegration").RocksetKafkaIntegration = null as any;
utilities.lazyLoad(exports, ["RocksetKafkaIntegration"], () => require("./rocksetKafkaIntegration"));

export { RocksetKinesisCollectionArgs, RocksetKinesisCollectionState } from "./rocksetKinesisCollection";
export type RocksetKinesisCollection = import("./rocksetKinesisCollection").RocksetKinesisCollection;
export const RocksetKinesisCollection: typeof import("./rocksetKinesisCollection").RocksetKinesisCollection = null as any;
utilities.lazyLoad(exports, ["RocksetKinesisCollection"], () => require("./rocksetKinesisCollection"));

export { RocksetKinesisIntegrationArgs, RocksetKinesisIntegrationState } from "./rocksetKinesisIntegration";
export type RocksetKinesisIntegration = import("./rocksetKinesisIntegration").RocksetKinesisIntegration;
export const RocksetKinesisIntegration: typeof import("./rocksetKinesisIntegration").RocksetKinesisIntegration = null as any;
utilities.lazyLoad(exports, ["RocksetKinesisIntegration"], () => require("./rocksetKinesisIntegration"));

export { RocksetMongodbCollectionArgs, RocksetMongodbCollectionState } from "./rocksetMongodbCollection";
export type RocksetMongodbCollection = import("./rocksetMongodbCollection").RocksetMongodbCollection;
export const RocksetMongodbCollection: typeof import("./rocksetMongodbCollection").RocksetMongodbCollection = null as any;
utilities.lazyLoad(exports, ["RocksetMongodbCollection"], () => require("./rocksetMongodbCollection"));

export { RocksetMongodbIntegrationArgs, RocksetMongodbIntegrationState } from "./rocksetMongodbIntegration";
export type RocksetMongodbIntegration = import("./rocksetMongodbIntegration").RocksetMongodbIntegration;
export const RocksetMongodbIntegration: typeof import("./rocksetMongodbIntegration").RocksetMongodbIntegration = null as any;
utilities.lazyLoad(exports, ["RocksetMongodbIntegration"], () => require("./rocksetMongodbIntegration"));

export { RocksetQueryLambdaArgs, RocksetQueryLambdaState } from "./rocksetQueryLambda";
export type RocksetQueryLambda = import("./rocksetQueryLambda").RocksetQueryLambda;
export const RocksetQueryLambda: typeof import("./rocksetQueryLambda").RocksetQueryLambda = null as any;
utilities.lazyLoad(exports, ["RocksetQueryLambda"], () => require("./rocksetQueryLambda"));

export { RocksetQueryLambdaTagArgs, RocksetQueryLambdaTagState } from "./rocksetQueryLambdaTag";
export type RocksetQueryLambdaTag = import("./rocksetQueryLambdaTag").RocksetQueryLambdaTag;
export const RocksetQueryLambdaTag: typeof import("./rocksetQueryLambdaTag").RocksetQueryLambdaTag = null as any;
utilities.lazyLoad(exports, ["RocksetQueryLambdaTag"], () => require("./rocksetQueryLambdaTag"));

export { RocksetRoleArgs, RocksetRoleState } from "./rocksetRole";
export type RocksetRole = import("./rocksetRole").RocksetRole;
export const RocksetRole: typeof import("./rocksetRole").RocksetRole = null as any;
utilities.lazyLoad(exports, ["RocksetRole"], () => require("./rocksetRole"));

export { RocksetS3CollectionArgs, RocksetS3CollectionState } from "./rocksetS3Collection";
export type RocksetS3Collection = import("./rocksetS3Collection").RocksetS3Collection;
export const RocksetS3Collection: typeof import("./rocksetS3Collection").RocksetS3Collection = null as any;
utilities.lazyLoad(exports, ["RocksetS3Collection"], () => require("./rocksetS3Collection"));

export { RocksetS3IntegrationArgs, RocksetS3IntegrationState } from "./rocksetS3Integration";
export type RocksetS3Integration = import("./rocksetS3Integration").RocksetS3Integration;
export const RocksetS3Integration: typeof import("./rocksetS3Integration").RocksetS3Integration = null as any;
utilities.lazyLoad(exports, ["RocksetS3Integration"], () => require("./rocksetS3Integration"));

export { RocksetUserArgs, RocksetUserState } from "./rocksetUser";
export type RocksetUser = import("./rocksetUser").RocksetUser;
export const RocksetUser: typeof import("./rocksetUser").RocksetUser = null as any;
utilities.lazyLoad(exports, ["RocksetUser"], () => require("./rocksetUser"));

export { RocksetViewArgs, RocksetViewState } from "./rocksetView";
export type RocksetView = import("./rocksetView").RocksetView;
export const RocksetView: typeof import("./rocksetView").RocksetView = null as any;
utilities.lazyLoad(exports, ["RocksetView"], () => require("./rocksetView"));

export { RocksetWorkspaceArgs, RocksetWorkspaceState } from "./rocksetWorkspace";
export type RocksetWorkspace = import("./rocksetWorkspace").RocksetWorkspace;
export const RocksetWorkspace: typeof import("./rocksetWorkspace").RocksetWorkspace = null as any;
utilities.lazyLoad(exports, ["RocksetWorkspace"], () => require("./rocksetWorkspace"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "rockset:index/rocksetAlias:RocksetAlias":
                return new RocksetAlias(name, <any>undefined, { urn })
            case "rockset:index/rocksetApiKey:RocksetApiKey":
                return new RocksetApiKey(name, <any>undefined, { urn })
            case "rockset:index/rocksetCollection:RocksetCollection":
                return new RocksetCollection(name, <any>undefined, { urn })
            case "rockset:index/rocksetDynamodbCollection:RocksetDynamodbCollection":
                return new RocksetDynamodbCollection(name, <any>undefined, { urn })
            case "rockset:index/rocksetDynamodbIntegration:RocksetDynamodbIntegration":
                return new RocksetDynamodbIntegration(name, <any>undefined, { urn })
            case "rockset:index/rocksetGcsCollection:RocksetGcsCollection":
                return new RocksetGcsCollection(name, <any>undefined, { urn })
            case "rockset:index/rocksetGcsIntegration:RocksetGcsIntegration":
                return new RocksetGcsIntegration(name, <any>undefined, { urn })
            case "rockset:index/rocksetKafkaCollection:RocksetKafkaCollection":
                return new RocksetKafkaCollection(name, <any>undefined, { urn })
            case "rockset:index/rocksetKafkaIntegration:RocksetKafkaIntegration":
                return new RocksetKafkaIntegration(name, <any>undefined, { urn })
            case "rockset:index/rocksetKinesisCollection:RocksetKinesisCollection":
                return new RocksetKinesisCollection(name, <any>undefined, { urn })
            case "rockset:index/rocksetKinesisIntegration:RocksetKinesisIntegration":
                return new RocksetKinesisIntegration(name, <any>undefined, { urn })
            case "rockset:index/rocksetMongodbCollection:RocksetMongodbCollection":
                return new RocksetMongodbCollection(name, <any>undefined, { urn })
            case "rockset:index/rocksetMongodbIntegration:RocksetMongodbIntegration":
                return new RocksetMongodbIntegration(name, <any>undefined, { urn })
            case "rockset:index/rocksetQueryLambda:RocksetQueryLambda":
                return new RocksetQueryLambda(name, <any>undefined, { urn })
            case "rockset:index/rocksetQueryLambdaTag:RocksetQueryLambdaTag":
                return new RocksetQueryLambdaTag(name, <any>undefined, { urn })
            case "rockset:index/rocksetRole:RocksetRole":
                return new RocksetRole(name, <any>undefined, { urn })
            case "rockset:index/rocksetS3Collection:RocksetS3Collection":
                return new RocksetS3Collection(name, <any>undefined, { urn })
            case "rockset:index/rocksetS3Integration:RocksetS3Integration":
                return new RocksetS3Integration(name, <any>undefined, { urn })
            case "rockset:index/rocksetUser:RocksetUser":
                return new RocksetUser(name, <any>undefined, { urn })
            case "rockset:index/rocksetView:RocksetView":
                return new RocksetView(name, <any>undefined, { urn })
            case "rockset:index/rocksetWorkspace:RocksetWorkspace":
                return new RocksetWorkspace(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("rockset", "index/rocksetAlias", _module)
pulumi.runtime.registerResourceModule("rockset", "index/rocksetApiKey", _module)
pulumi.runtime.registerResourceModule("rockset", "index/rocksetCollection", _module)
pulumi.runtime.registerResourceModule("rockset", "index/rocksetDynamodbCollection", _module)
pulumi.runtime.registerResourceModule("rockset", "index/rocksetDynamodbIntegration", _module)
pulumi.runtime.registerResourceModule("rockset", "index/rocksetGcsCollection", _module)
pulumi.runtime.registerResourceModule("rockset", "index/rocksetGcsIntegration", _module)
pulumi.runtime.registerResourceModule("rockset", "index/rocksetKafkaCollection", _module)
pulumi.runtime.registerResourceModule("rockset", "index/rocksetKafkaIntegration", _module)
pulumi.runtime.registerResourceModule("rockset", "index/rocksetKinesisCollection", _module)
pulumi.runtime.registerResourceModule("rockset", "index/rocksetKinesisIntegration", _module)
pulumi.runtime.registerResourceModule("rockset", "index/rocksetMongodbCollection", _module)
pulumi.runtime.registerResourceModule("rockset", "index/rocksetMongodbIntegration", _module)
pulumi.runtime.registerResourceModule("rockset", "index/rocksetQueryLambda", _module)
pulumi.runtime.registerResourceModule("rockset", "index/rocksetQueryLambdaTag", _module)
pulumi.runtime.registerResourceModule("rockset", "index/rocksetRole", _module)
pulumi.runtime.registerResourceModule("rockset", "index/rocksetS3Collection", _module)
pulumi.runtime.registerResourceModule("rockset", "index/rocksetS3Integration", _module)
pulumi.runtime.registerResourceModule("rockset", "index/rocksetUser", _module)
pulumi.runtime.registerResourceModule("rockset", "index/rocksetView", _module)
pulumi.runtime.registerResourceModule("rockset", "index/rocksetWorkspace", _module)
pulumi.runtime.registerResourcePackage("rockset", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:rockset") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
