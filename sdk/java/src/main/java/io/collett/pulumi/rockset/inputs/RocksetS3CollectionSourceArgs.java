// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.collett.pulumi.rockset.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import io.collett.pulumi.rockset.inputs.RocksetS3CollectionSourceCsvArgs;
import io.collett.pulumi.rockset.inputs.RocksetS3CollectionSourceXmlArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RocksetS3CollectionSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final RocksetS3CollectionSourceArgs Empty = new RocksetS3CollectionSourceArgs();

    /**
     * S3 bucket containing the target data.
     * 
     */
    @Import(name="bucket", required=true)
    private Output<String> bucket;

    /**
     * @return S3 bucket containing the target data.
     * 
     */
    public Output<String> bucket() {
        return this.bucket;
    }

    @Import(name="csv")
    private @Nullable Output<RocksetS3CollectionSourceCsvArgs> csv;

    public Optional<Output<RocksetS3CollectionSourceCsvArgs>> csv() {
        return Optional.ofNullable(this.csv);
    }

    /**
     * Format of the data. One of: json, csv, xml. xml and csv blocks can only be set for their respective formats.
     * 
     */
    @Import(name="format", required=true)
    private Output<String> format;

    /**
     * @return Format of the data. One of: json, csv, xml. xml and csv blocks can only be set for their respective formats.
     * 
     */
    public Output<String> format() {
        return this.format;
    }

    /**
     * The name of the Rockset S3 integration. If no S3 integration is provided only data in public S3 buckets are accessible.
     * 
     */
    @Import(name="integrationName", required=true)
    private Output<String> integrationName;

    /**
     * @return The name of the Rockset S3 integration. If no S3 integration is provided only data in public S3 buckets are accessible.
     * 
     */
    public Output<String> integrationName() {
        return this.integrationName;
    }

    /**
     * Regex path pattern to S3 keys.
     * 
     */
    @Import(name="pattern")
    private @Nullable Output<String> pattern;

    /**
     * @return Regex path pattern to S3 keys.
     * 
     */
    public Optional<Output<String>> pattern() {
        return Optional.ofNullable(this.pattern);
    }

    /**
     * Simple path prefix to S3 keys.
     * 
     * @deprecated
     * use pattern instead
     * 
     */
    @Deprecated /* use pattern instead */
    @Import(name="prefix")
    private @Nullable Output<String> prefix;

    /**
     * @return Simple path prefix to S3 keys.
     * 
     * @deprecated
     * use pattern instead
     * 
     */
    @Deprecated /* use pattern instead */
    public Optional<Output<String>> prefix() {
        return Optional.ofNullable(this.prefix);
    }

    @Import(name="xml")
    private @Nullable Output<RocksetS3CollectionSourceXmlArgs> xml;

    public Optional<Output<RocksetS3CollectionSourceXmlArgs>> xml() {
        return Optional.ofNullable(this.xml);
    }

    private RocksetS3CollectionSourceArgs() {}

    private RocksetS3CollectionSourceArgs(RocksetS3CollectionSourceArgs $) {
        this.bucket = $.bucket;
        this.csv = $.csv;
        this.format = $.format;
        this.integrationName = $.integrationName;
        this.pattern = $.pattern;
        this.prefix = $.prefix;
        this.xml = $.xml;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RocksetS3CollectionSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RocksetS3CollectionSourceArgs $;

        public Builder() {
            $ = new RocksetS3CollectionSourceArgs();
        }

        public Builder(RocksetS3CollectionSourceArgs defaults) {
            $ = new RocksetS3CollectionSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bucket S3 bucket containing the target data.
         * 
         * @return builder
         * 
         */
        public Builder bucket(Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        /**
         * @param bucket S3 bucket containing the target data.
         * 
         * @return builder
         * 
         */
        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        public Builder csv(@Nullable Output<RocksetS3CollectionSourceCsvArgs> csv) {
            $.csv = csv;
            return this;
        }

        public Builder csv(RocksetS3CollectionSourceCsvArgs csv) {
            return csv(Output.of(csv));
        }

        /**
         * @param format Format of the data. One of: json, csv, xml. xml and csv blocks can only be set for their respective formats.
         * 
         * @return builder
         * 
         */
        public Builder format(Output<String> format) {
            $.format = format;
            return this;
        }

        /**
         * @param format Format of the data. One of: json, csv, xml. xml and csv blocks can only be set for their respective formats.
         * 
         * @return builder
         * 
         */
        public Builder format(String format) {
            return format(Output.of(format));
        }

        /**
         * @param integrationName The name of the Rockset S3 integration. If no S3 integration is provided only data in public S3 buckets are accessible.
         * 
         * @return builder
         * 
         */
        public Builder integrationName(Output<String> integrationName) {
            $.integrationName = integrationName;
            return this;
        }

        /**
         * @param integrationName The name of the Rockset S3 integration. If no S3 integration is provided only data in public S3 buckets are accessible.
         * 
         * @return builder
         * 
         */
        public Builder integrationName(String integrationName) {
            return integrationName(Output.of(integrationName));
        }

        /**
         * @param pattern Regex path pattern to S3 keys.
         * 
         * @return builder
         * 
         */
        public Builder pattern(@Nullable Output<String> pattern) {
            $.pattern = pattern;
            return this;
        }

        /**
         * @param pattern Regex path pattern to S3 keys.
         * 
         * @return builder
         * 
         */
        public Builder pattern(String pattern) {
            return pattern(Output.of(pattern));
        }

        /**
         * @param prefix Simple path prefix to S3 keys.
         * 
         * @return builder
         * 
         * @deprecated
         * use pattern instead
         * 
         */
        @Deprecated /* use pattern instead */
        public Builder prefix(@Nullable Output<String> prefix) {
            $.prefix = prefix;
            return this;
        }

        /**
         * @param prefix Simple path prefix to S3 keys.
         * 
         * @return builder
         * 
         * @deprecated
         * use pattern instead
         * 
         */
        @Deprecated /* use pattern instead */
        public Builder prefix(String prefix) {
            return prefix(Output.of(prefix));
        }

        public Builder xml(@Nullable Output<RocksetS3CollectionSourceXmlArgs> xml) {
            $.xml = xml;
            return this;
        }

        public Builder xml(RocksetS3CollectionSourceXmlArgs xml) {
            return xml(Output.of(xml));
        }

        public RocksetS3CollectionSourceArgs build() {
            $.bucket = Objects.requireNonNull($.bucket, "expected parameter 'bucket' to be non-null");
            $.format = Objects.requireNonNull($.format, "expected parameter 'format' to be non-null");
            $.integrationName = Objects.requireNonNull($.integrationName, "expected parameter 'integrationName' to be non-null");
            return $;
        }
    }

}
