// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.collett.pulumi.rockset;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import io.collett.pulumi.rockset.inputs.RocksetRolePrivilegeArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RocksetRoleArgs extends com.pulumi.resources.ResourceArgs {

    public static final RocksetRoleArgs Empty = new RocksetRoleArgs();

    /**
     * Role description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Role description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Role name.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Role name.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Privileges associated with the role. For a full list see [API documentation](https://rockset.com/docs/iam/#supported-privileges)
     * 
     */
    @Import(name="privileges")
    private @Nullable Output<List<RocksetRolePrivilegeArgs>> privileges;

    /**
     * @return Privileges associated with the role. For a full list see [API documentation](https://rockset.com/docs/iam/#supported-privileges)
     * 
     */
    public Optional<Output<List<RocksetRolePrivilegeArgs>>> privileges() {
        return Optional.ofNullable(this.privileges);
    }

    private RocksetRoleArgs() {}

    private RocksetRoleArgs(RocksetRoleArgs $) {
        this.description = $.description;
        this.name = $.name;
        this.privileges = $.privileges;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RocksetRoleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RocksetRoleArgs $;

        public Builder() {
            $ = new RocksetRoleArgs();
        }

        public Builder(RocksetRoleArgs defaults) {
            $ = new RocksetRoleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Role description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Role description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name Role name.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Role name.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param privileges Privileges associated with the role. For a full list see [API documentation](https://rockset.com/docs/iam/#supported-privileges)
         * 
         * @return builder
         * 
         */
        public Builder privileges(@Nullable Output<List<RocksetRolePrivilegeArgs>> privileges) {
            $.privileges = privileges;
            return this;
        }

        /**
         * @param privileges Privileges associated with the role. For a full list see [API documentation](https://rockset.com/docs/iam/#supported-privileges)
         * 
         * @return builder
         * 
         */
        public Builder privileges(List<RocksetRolePrivilegeArgs> privileges) {
            return privileges(Output.of(privileges));
        }

        /**
         * @param privileges Privileges associated with the role. For a full list see [API documentation](https://rockset.com/docs/iam/#supported-privileges)
         * 
         * @return builder
         * 
         */
        public Builder privileges(RocksetRolePrivilegeArgs... privileges) {
            return privileges(List.of(privileges));
        }

        public RocksetRoleArgs build() {
            return $;
        }
    }

}
