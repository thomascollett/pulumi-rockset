// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.collett.pulumi.rockset;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import io.collett.pulumi.rockset.inputs.RocksetQueryLambdaSqlArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RocksetQueryLambdaArgs extends com.pulumi.resources.ResourceArgs {

    public static final RocksetQueryLambdaArgs Empty = new RocksetQueryLambdaArgs();

    /**
     * Text describing the query lambda.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Text describing the query lambda.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Unique identifier for the query lambda. Can contain alphanumeric or dash characters.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Unique identifier for the query lambda. Can contain alphanumeric or dash characters.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="sqls", required=true)
    private Output<List<RocksetQueryLambdaSqlArgs>> sqls;

    public Output<List<RocksetQueryLambdaSqlArgs>> sqls() {
        return this.sqls;
    }

    /**
     * The name of the workspace.
     * 
     */
    @Import(name="workspace", required=true)
    private Output<String> workspace;

    /**
     * @return The name of the workspace.
     * 
     */
    public Output<String> workspace() {
        return this.workspace;
    }

    private RocksetQueryLambdaArgs() {}

    private RocksetQueryLambdaArgs(RocksetQueryLambdaArgs $) {
        this.description = $.description;
        this.name = $.name;
        this.sqls = $.sqls;
        this.workspace = $.workspace;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RocksetQueryLambdaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RocksetQueryLambdaArgs $;

        public Builder() {
            $ = new RocksetQueryLambdaArgs();
        }

        public Builder(RocksetQueryLambdaArgs defaults) {
            $ = new RocksetQueryLambdaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Text describing the query lambda.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Text describing the query lambda.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name Unique identifier for the query lambda. Can contain alphanumeric or dash characters.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Unique identifier for the query lambda. Can contain alphanumeric or dash characters.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder sqls(Output<List<RocksetQueryLambdaSqlArgs>> sqls) {
            $.sqls = sqls;
            return this;
        }

        public Builder sqls(List<RocksetQueryLambdaSqlArgs> sqls) {
            return sqls(Output.of(sqls));
        }

        public Builder sqls(RocksetQueryLambdaSqlArgs... sqls) {
            return sqls(List.of(sqls));
        }

        /**
         * @param workspace The name of the workspace.
         * 
         * @return builder
         * 
         */
        public Builder workspace(Output<String> workspace) {
            $.workspace = workspace;
            return this;
        }

        /**
         * @param workspace The name of the workspace.
         * 
         * @return builder
         * 
         */
        public Builder workspace(String workspace) {
            return workspace(Output.of(workspace));
        }

        public RocksetQueryLambdaArgs build() {
            $.sqls = Objects.requireNonNull($.sqls, "expected parameter 'sqls' to be non-null");
            $.workspace = Objects.requireNonNull($.workspace, "expected parameter 'workspace' to be non-null");
            return $;
        }
    }

}
