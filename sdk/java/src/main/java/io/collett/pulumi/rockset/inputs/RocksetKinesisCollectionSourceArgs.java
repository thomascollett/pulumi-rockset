// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.collett.pulumi.rockset.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RocksetKinesisCollectionSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final RocksetKinesisCollectionSourceArgs Empty = new RocksetKinesisCollectionSourceArgs();

    /**
     * AWS region name for the Kinesis stream, by default us-west-2 is used
     * 
     */
    @Import(name="awsRegion")
    private @Nullable Output<String> awsRegion;

    /**
     * @return AWS region name for the Kinesis stream, by default us-west-2 is used
     * 
     */
    public Optional<Output<String>> awsRegion() {
        return Optional.ofNullable(this.awsRegion);
    }

    /**
     * Set of fields that correspond to a DMS primary key. Can only be set if format is mysql or postgres.
     * 
     */
    @Import(name="dmsPrimaryKeys")
    private @Nullable Output<List<String>> dmsPrimaryKeys;

    /**
     * @return Set of fields that correspond to a DMS primary key. Can only be set if format is mysql or postgres.
     * 
     */
    public Optional<Output<List<String>>> dmsPrimaryKeys() {
        return Optional.ofNullable(this.dmsPrimaryKeys);
    }

    /**
     * Format of the data. One of: json, mysql, postgres. dms*primary*keys list can only be set for mysql or postgres.
     * 
     */
    @Import(name="format", required=true)
    private Output<String> format;

    /**
     * @return Format of the data. One of: json, mysql, postgres. dms*primary*keys list can only be set for mysql or postgres.
     * 
     */
    public Output<String> format() {
        return this.format;
    }

    /**
     * The name of the Rockset Kinesis integration.
     * 
     */
    @Import(name="integrationName", required=true)
    private Output<String> integrationName;

    /**
     * @return The name of the Rockset Kinesis integration.
     * 
     */
    public Output<String> integrationName() {
        return this.integrationName;
    }

    /**
     * Name of Kinesis stream.
     * 
     */
    @Import(name="streamName", required=true)
    private Output<String> streamName;

    /**
     * @return Name of Kinesis stream.
     * 
     */
    public Output<String> streamName() {
        return this.streamName;
    }

    private RocksetKinesisCollectionSourceArgs() {}

    private RocksetKinesisCollectionSourceArgs(RocksetKinesisCollectionSourceArgs $) {
        this.awsRegion = $.awsRegion;
        this.dmsPrimaryKeys = $.dmsPrimaryKeys;
        this.format = $.format;
        this.integrationName = $.integrationName;
        this.streamName = $.streamName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RocksetKinesisCollectionSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RocksetKinesisCollectionSourceArgs $;

        public Builder() {
            $ = new RocksetKinesisCollectionSourceArgs();
        }

        public Builder(RocksetKinesisCollectionSourceArgs defaults) {
            $ = new RocksetKinesisCollectionSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param awsRegion AWS region name for the Kinesis stream, by default us-west-2 is used
         * 
         * @return builder
         * 
         */
        public Builder awsRegion(@Nullable Output<String> awsRegion) {
            $.awsRegion = awsRegion;
            return this;
        }

        /**
         * @param awsRegion AWS region name for the Kinesis stream, by default us-west-2 is used
         * 
         * @return builder
         * 
         */
        public Builder awsRegion(String awsRegion) {
            return awsRegion(Output.of(awsRegion));
        }

        /**
         * @param dmsPrimaryKeys Set of fields that correspond to a DMS primary key. Can only be set if format is mysql or postgres.
         * 
         * @return builder
         * 
         */
        public Builder dmsPrimaryKeys(@Nullable Output<List<String>> dmsPrimaryKeys) {
            $.dmsPrimaryKeys = dmsPrimaryKeys;
            return this;
        }

        /**
         * @param dmsPrimaryKeys Set of fields that correspond to a DMS primary key. Can only be set if format is mysql or postgres.
         * 
         * @return builder
         * 
         */
        public Builder dmsPrimaryKeys(List<String> dmsPrimaryKeys) {
            return dmsPrimaryKeys(Output.of(dmsPrimaryKeys));
        }

        /**
         * @param dmsPrimaryKeys Set of fields that correspond to a DMS primary key. Can only be set if format is mysql or postgres.
         * 
         * @return builder
         * 
         */
        public Builder dmsPrimaryKeys(String... dmsPrimaryKeys) {
            return dmsPrimaryKeys(List.of(dmsPrimaryKeys));
        }

        /**
         * @param format Format of the data. One of: json, mysql, postgres. dms*primary*keys list can only be set for mysql or postgres.
         * 
         * @return builder
         * 
         */
        public Builder format(Output<String> format) {
            $.format = format;
            return this;
        }

        /**
         * @param format Format of the data. One of: json, mysql, postgres. dms*primary*keys list can only be set for mysql or postgres.
         * 
         * @return builder
         * 
         */
        public Builder format(String format) {
            return format(Output.of(format));
        }

        /**
         * @param integrationName The name of the Rockset Kinesis integration.
         * 
         * @return builder
         * 
         */
        public Builder integrationName(Output<String> integrationName) {
            $.integrationName = integrationName;
            return this;
        }

        /**
         * @param integrationName The name of the Rockset Kinesis integration.
         * 
         * @return builder
         * 
         */
        public Builder integrationName(String integrationName) {
            return integrationName(Output.of(integrationName));
        }

        /**
         * @param streamName Name of Kinesis stream.
         * 
         * @return builder
         * 
         */
        public Builder streamName(Output<String> streamName) {
            $.streamName = streamName;
            return this;
        }

        /**
         * @param streamName Name of Kinesis stream.
         * 
         * @return builder
         * 
         */
        public Builder streamName(String streamName) {
            return streamName(Output.of(streamName));
        }

        public RocksetKinesisCollectionSourceArgs build() {
            $.format = Objects.requireNonNull($.format, "expected parameter 'format' to be non-null");
            $.integrationName = Objects.requireNonNull($.integrationName, "expected parameter 'integrationName' to be non-null");
            $.streamName = Objects.requireNonNull($.streamName, "expected parameter 'streamName' to be non-null");
            return $;
        }
    }

}
