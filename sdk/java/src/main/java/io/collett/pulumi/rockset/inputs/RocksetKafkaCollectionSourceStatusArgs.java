// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.collett.pulumi.rockset.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import io.collett.pulumi.rockset.inputs.RocksetKafkaCollectionSourceStatusPartitionArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RocksetKafkaCollectionSourceStatusArgs extends com.pulumi.resources.ResourceArgs {

    public static final RocksetKafkaCollectionSourceStatusArgs Empty = new RocksetKafkaCollectionSourceStatusArgs();

    @Import(name="documentsProcessed")
    private @Nullable Output<Integer> documentsProcessed;

    public Optional<Output<Integer>> documentsProcessed() {
        return Optional.ofNullable(this.documentsProcessed);
    }

    @Import(name="lastConsumedTime")
    private @Nullable Output<String> lastConsumedTime;

    public Optional<Output<String>> lastConsumedTime() {
        return Optional.ofNullable(this.lastConsumedTime);
    }

    @Import(name="partitions")
    private @Nullable Output<List<RocksetKafkaCollectionSourceStatusPartitionArgs>> partitions;

    public Optional<Output<List<RocksetKafkaCollectionSourceStatusPartitionArgs>>> partitions() {
        return Optional.ofNullable(this.partitions);
    }

    @Import(name="state")
    private @Nullable Output<String> state;

    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    private RocksetKafkaCollectionSourceStatusArgs() {}

    private RocksetKafkaCollectionSourceStatusArgs(RocksetKafkaCollectionSourceStatusArgs $) {
        this.documentsProcessed = $.documentsProcessed;
        this.lastConsumedTime = $.lastConsumedTime;
        this.partitions = $.partitions;
        this.state = $.state;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RocksetKafkaCollectionSourceStatusArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RocksetKafkaCollectionSourceStatusArgs $;

        public Builder() {
            $ = new RocksetKafkaCollectionSourceStatusArgs();
        }

        public Builder(RocksetKafkaCollectionSourceStatusArgs defaults) {
            $ = new RocksetKafkaCollectionSourceStatusArgs(Objects.requireNonNull(defaults));
        }

        public Builder documentsProcessed(@Nullable Output<Integer> documentsProcessed) {
            $.documentsProcessed = documentsProcessed;
            return this;
        }

        public Builder documentsProcessed(Integer documentsProcessed) {
            return documentsProcessed(Output.of(documentsProcessed));
        }

        public Builder lastConsumedTime(@Nullable Output<String> lastConsumedTime) {
            $.lastConsumedTime = lastConsumedTime;
            return this;
        }

        public Builder lastConsumedTime(String lastConsumedTime) {
            return lastConsumedTime(Output.of(lastConsumedTime));
        }

        public Builder partitions(@Nullable Output<List<RocksetKafkaCollectionSourceStatusPartitionArgs>> partitions) {
            $.partitions = partitions;
            return this;
        }

        public Builder partitions(List<RocksetKafkaCollectionSourceStatusPartitionArgs> partitions) {
            return partitions(Output.of(partitions));
        }

        public Builder partitions(RocksetKafkaCollectionSourceStatusPartitionArgs... partitions) {
            return partitions(List.of(partitions));
        }

        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        public Builder state(String state) {
            return state(Output.of(state));
        }

        public RocksetKafkaCollectionSourceStatusArgs build() {
            return $;
        }
    }

}
