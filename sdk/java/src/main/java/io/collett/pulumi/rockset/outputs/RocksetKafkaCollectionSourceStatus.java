// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.collett.pulumi.rockset.outputs;

import com.pulumi.core.annotations.CustomType;
import io.collett.pulumi.rockset.outputs.RocksetKafkaCollectionSourceStatusPartition;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RocksetKafkaCollectionSourceStatus {
    private @Nullable Integer documentsProcessed;
    private @Nullable String lastConsumedTime;
    private @Nullable List<RocksetKafkaCollectionSourceStatusPartition> partitions;
    private @Nullable String state;

    private RocksetKafkaCollectionSourceStatus() {}
    public Optional<Integer> documentsProcessed() {
        return Optional.ofNullable(this.documentsProcessed);
    }
    public Optional<String> lastConsumedTime() {
        return Optional.ofNullable(this.lastConsumedTime);
    }
    public List<RocksetKafkaCollectionSourceStatusPartition> partitions() {
        return this.partitions == null ? List.of() : this.partitions;
    }
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RocksetKafkaCollectionSourceStatus defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer documentsProcessed;
        private @Nullable String lastConsumedTime;
        private @Nullable List<RocksetKafkaCollectionSourceStatusPartition> partitions;
        private @Nullable String state;
        public Builder() {}
        public Builder(RocksetKafkaCollectionSourceStatus defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.documentsProcessed = defaults.documentsProcessed;
    	      this.lastConsumedTime = defaults.lastConsumedTime;
    	      this.partitions = defaults.partitions;
    	      this.state = defaults.state;
        }

        @CustomType.Setter
        public Builder documentsProcessed(@Nullable Integer documentsProcessed) {
            this.documentsProcessed = documentsProcessed;
            return this;
        }
        @CustomType.Setter
        public Builder lastConsumedTime(@Nullable String lastConsumedTime) {
            this.lastConsumedTime = lastConsumedTime;
            return this;
        }
        @CustomType.Setter
        public Builder partitions(@Nullable List<RocksetKafkaCollectionSourceStatusPartition> partitions) {
            this.partitions = partitions;
            return this;
        }
        public Builder partitions(RocksetKafkaCollectionSourceStatusPartition... partitions) {
            return partitions(List.of(partitions));
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        public RocksetKafkaCollectionSourceStatus build() {
            final var o = new RocksetKafkaCollectionSourceStatus();
            o.documentsProcessed = documentsProcessed;
            o.lastConsumedTime = lastConsumedTime;
            o.partitions = partitions;
            o.state = state;
            return o;
        }
    }
}
