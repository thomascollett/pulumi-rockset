// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.collett.pulumi.rockset.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RocksetMongodbCollectionSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final RocksetMongodbCollectionSourceArgs Empty = new RocksetMongodbCollectionSourceArgs();

    /**
     * MongoDB collection name of the target collection.
     * 
     */
    @Import(name="collectionName", required=true)
    private Output<String> collectionName;

    /**
     * @return MongoDB collection name of the target collection.
     * 
     */
    public Output<String> collectionName() {
        return this.collectionName;
    }

    /**
     * MongoDB database name containing the target collection.
     * 
     */
    @Import(name="databaseName", required=true)
    private Output<String> databaseName;

    /**
     * @return MongoDB database name containing the target collection.
     * 
     */
    public Output<String> databaseName() {
        return this.databaseName;
    }

    /**
     * The name of the Rockset MongoDB integration.
     * 
     */
    @Import(name="integrationName", required=true)
    private Output<String> integrationName;

    /**
     * @return The name of the Rockset MongoDB integration.
     * 
     */
    public Output<String> integrationName() {
        return this.integrationName;
    }

    /**
     * MongoDB scan end time.
     * 
     */
    @Import(name="scanEndTime")
    private @Nullable Output<String> scanEndTime;

    /**
     * @return MongoDB scan end time.
     * 
     */
    public Optional<Output<String>> scanEndTime() {
        return Optional.ofNullable(this.scanEndTime);
    }

    /**
     * Number of records inserted using scan.
     * 
     */
    @Import(name="scanRecordsProcessed")
    private @Nullable Output<Integer> scanRecordsProcessed;

    /**
     * @return Number of records inserted using scan.
     * 
     */
    public Optional<Output<Integer>> scanRecordsProcessed() {
        return Optional.ofNullable(this.scanRecordsProcessed);
    }

    /**
     * MongoDB scan start time.
     * 
     */
    @Import(name="scanStartTime")
    private @Nullable Output<String> scanStartTime;

    /**
     * @return MongoDB scan start time.
     * 
     */
    public Optional<Output<String>> scanStartTime() {
        return Optional.ofNullable(this.scanStartTime);
    }

    /**
     * Number of records in MongoDB table at time of scan.
     * 
     */
    @Import(name="scanTotalRecords")
    private @Nullable Output<Integer> scanTotalRecords;

    /**
     * @return Number of records in MongoDB table at time of scan.
     * 
     */
    public Optional<Output<Integer>> scanTotalRecords() {
        return Optional.ofNullable(this.scanTotalRecords);
    }

    /**
     * State of current ingest for this table.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return State of current ingest for this table.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * ISO-8601 date when delete from source was last processed.
     * 
     */
    @Import(name="streamLastDeleteProcessedAt")
    private @Nullable Output<String> streamLastDeleteProcessedAt;

    /**
     * @return ISO-8601 date when delete from source was last processed.
     * 
     */
    public Optional<Output<String>> streamLastDeleteProcessedAt() {
        return Optional.ofNullable(this.streamLastDeleteProcessedAt);
    }

    /**
     * ISO-8601 date when new insert from source was last processed.
     * 
     */
    @Import(name="streamLastInsertProcessedAt")
    private @Nullable Output<String> streamLastInsertProcessedAt;

    /**
     * @return ISO-8601 date when new insert from source was last processed.
     * 
     */
    public Optional<Output<String>> streamLastInsertProcessedAt() {
        return Optional.ofNullable(this.streamLastInsertProcessedAt);
    }

    /**
     * ISO-8601 date when update from source was last processed.
     * 
     */
    @Import(name="streamLastUpdateProcessedAt")
    private @Nullable Output<String> streamLastUpdateProcessedAt;

    /**
     * @return ISO-8601 date when update from source was last processed.
     * 
     */
    public Optional<Output<String>> streamLastUpdateProcessedAt() {
        return Optional.ofNullable(this.streamLastUpdateProcessedAt);
    }

    /**
     * Number of new records deleted using stream.
     * 
     */
    @Import(name="streamRecordsDeleted")
    private @Nullable Output<Integer> streamRecordsDeleted;

    /**
     * @return Number of new records deleted using stream.
     * 
     */
    public Optional<Output<Integer>> streamRecordsDeleted() {
        return Optional.ofNullable(this.streamRecordsDeleted);
    }

    /**
     * Number of new records inserted using stream.
     * 
     */
    @Import(name="streamRecordsInserted")
    private @Nullable Output<Integer> streamRecordsInserted;

    /**
     * @return Number of new records inserted using stream.
     * 
     */
    public Optional<Output<Integer>> streamRecordsInserted() {
        return Optional.ofNullable(this.streamRecordsInserted);
    }

    /**
     * Number of new records updated using stream.
     * 
     */
    @Import(name="streamRecordsUpdated")
    private @Nullable Output<Integer> streamRecordsUpdated;

    /**
     * @return Number of new records updated using stream.
     * 
     */
    public Optional<Output<Integer>> streamRecordsUpdated() {
        return Optional.ofNullable(this.streamRecordsUpdated);
    }

    private RocksetMongodbCollectionSourceArgs() {}

    private RocksetMongodbCollectionSourceArgs(RocksetMongodbCollectionSourceArgs $) {
        this.collectionName = $.collectionName;
        this.databaseName = $.databaseName;
        this.integrationName = $.integrationName;
        this.scanEndTime = $.scanEndTime;
        this.scanRecordsProcessed = $.scanRecordsProcessed;
        this.scanStartTime = $.scanStartTime;
        this.scanTotalRecords = $.scanTotalRecords;
        this.state = $.state;
        this.streamLastDeleteProcessedAt = $.streamLastDeleteProcessedAt;
        this.streamLastInsertProcessedAt = $.streamLastInsertProcessedAt;
        this.streamLastUpdateProcessedAt = $.streamLastUpdateProcessedAt;
        this.streamRecordsDeleted = $.streamRecordsDeleted;
        this.streamRecordsInserted = $.streamRecordsInserted;
        this.streamRecordsUpdated = $.streamRecordsUpdated;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RocksetMongodbCollectionSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RocksetMongodbCollectionSourceArgs $;

        public Builder() {
            $ = new RocksetMongodbCollectionSourceArgs();
        }

        public Builder(RocksetMongodbCollectionSourceArgs defaults) {
            $ = new RocksetMongodbCollectionSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param collectionName MongoDB collection name of the target collection.
         * 
         * @return builder
         * 
         */
        public Builder collectionName(Output<String> collectionName) {
            $.collectionName = collectionName;
            return this;
        }

        /**
         * @param collectionName MongoDB collection name of the target collection.
         * 
         * @return builder
         * 
         */
        public Builder collectionName(String collectionName) {
            return collectionName(Output.of(collectionName));
        }

        /**
         * @param databaseName MongoDB database name containing the target collection.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        /**
         * @param databaseName MongoDB database name containing the target collection.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        /**
         * @param integrationName The name of the Rockset MongoDB integration.
         * 
         * @return builder
         * 
         */
        public Builder integrationName(Output<String> integrationName) {
            $.integrationName = integrationName;
            return this;
        }

        /**
         * @param integrationName The name of the Rockset MongoDB integration.
         * 
         * @return builder
         * 
         */
        public Builder integrationName(String integrationName) {
            return integrationName(Output.of(integrationName));
        }

        /**
         * @param scanEndTime MongoDB scan end time.
         * 
         * @return builder
         * 
         */
        public Builder scanEndTime(@Nullable Output<String> scanEndTime) {
            $.scanEndTime = scanEndTime;
            return this;
        }

        /**
         * @param scanEndTime MongoDB scan end time.
         * 
         * @return builder
         * 
         */
        public Builder scanEndTime(String scanEndTime) {
            return scanEndTime(Output.of(scanEndTime));
        }

        /**
         * @param scanRecordsProcessed Number of records inserted using scan.
         * 
         * @return builder
         * 
         */
        public Builder scanRecordsProcessed(@Nullable Output<Integer> scanRecordsProcessed) {
            $.scanRecordsProcessed = scanRecordsProcessed;
            return this;
        }

        /**
         * @param scanRecordsProcessed Number of records inserted using scan.
         * 
         * @return builder
         * 
         */
        public Builder scanRecordsProcessed(Integer scanRecordsProcessed) {
            return scanRecordsProcessed(Output.of(scanRecordsProcessed));
        }

        /**
         * @param scanStartTime MongoDB scan start time.
         * 
         * @return builder
         * 
         */
        public Builder scanStartTime(@Nullable Output<String> scanStartTime) {
            $.scanStartTime = scanStartTime;
            return this;
        }

        /**
         * @param scanStartTime MongoDB scan start time.
         * 
         * @return builder
         * 
         */
        public Builder scanStartTime(String scanStartTime) {
            return scanStartTime(Output.of(scanStartTime));
        }

        /**
         * @param scanTotalRecords Number of records in MongoDB table at time of scan.
         * 
         * @return builder
         * 
         */
        public Builder scanTotalRecords(@Nullable Output<Integer> scanTotalRecords) {
            $.scanTotalRecords = scanTotalRecords;
            return this;
        }

        /**
         * @param scanTotalRecords Number of records in MongoDB table at time of scan.
         * 
         * @return builder
         * 
         */
        public Builder scanTotalRecords(Integer scanTotalRecords) {
            return scanTotalRecords(Output.of(scanTotalRecords));
        }

        /**
         * @param state State of current ingest for this table.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state State of current ingest for this table.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param streamLastDeleteProcessedAt ISO-8601 date when delete from source was last processed.
         * 
         * @return builder
         * 
         */
        public Builder streamLastDeleteProcessedAt(@Nullable Output<String> streamLastDeleteProcessedAt) {
            $.streamLastDeleteProcessedAt = streamLastDeleteProcessedAt;
            return this;
        }

        /**
         * @param streamLastDeleteProcessedAt ISO-8601 date when delete from source was last processed.
         * 
         * @return builder
         * 
         */
        public Builder streamLastDeleteProcessedAt(String streamLastDeleteProcessedAt) {
            return streamLastDeleteProcessedAt(Output.of(streamLastDeleteProcessedAt));
        }

        /**
         * @param streamLastInsertProcessedAt ISO-8601 date when new insert from source was last processed.
         * 
         * @return builder
         * 
         */
        public Builder streamLastInsertProcessedAt(@Nullable Output<String> streamLastInsertProcessedAt) {
            $.streamLastInsertProcessedAt = streamLastInsertProcessedAt;
            return this;
        }

        /**
         * @param streamLastInsertProcessedAt ISO-8601 date when new insert from source was last processed.
         * 
         * @return builder
         * 
         */
        public Builder streamLastInsertProcessedAt(String streamLastInsertProcessedAt) {
            return streamLastInsertProcessedAt(Output.of(streamLastInsertProcessedAt));
        }

        /**
         * @param streamLastUpdateProcessedAt ISO-8601 date when update from source was last processed.
         * 
         * @return builder
         * 
         */
        public Builder streamLastUpdateProcessedAt(@Nullable Output<String> streamLastUpdateProcessedAt) {
            $.streamLastUpdateProcessedAt = streamLastUpdateProcessedAt;
            return this;
        }

        /**
         * @param streamLastUpdateProcessedAt ISO-8601 date when update from source was last processed.
         * 
         * @return builder
         * 
         */
        public Builder streamLastUpdateProcessedAt(String streamLastUpdateProcessedAt) {
            return streamLastUpdateProcessedAt(Output.of(streamLastUpdateProcessedAt));
        }

        /**
         * @param streamRecordsDeleted Number of new records deleted using stream.
         * 
         * @return builder
         * 
         */
        public Builder streamRecordsDeleted(@Nullable Output<Integer> streamRecordsDeleted) {
            $.streamRecordsDeleted = streamRecordsDeleted;
            return this;
        }

        /**
         * @param streamRecordsDeleted Number of new records deleted using stream.
         * 
         * @return builder
         * 
         */
        public Builder streamRecordsDeleted(Integer streamRecordsDeleted) {
            return streamRecordsDeleted(Output.of(streamRecordsDeleted));
        }

        /**
         * @param streamRecordsInserted Number of new records inserted using stream.
         * 
         * @return builder
         * 
         */
        public Builder streamRecordsInserted(@Nullable Output<Integer> streamRecordsInserted) {
            $.streamRecordsInserted = streamRecordsInserted;
            return this;
        }

        /**
         * @param streamRecordsInserted Number of new records inserted using stream.
         * 
         * @return builder
         * 
         */
        public Builder streamRecordsInserted(Integer streamRecordsInserted) {
            return streamRecordsInserted(Output.of(streamRecordsInserted));
        }

        /**
         * @param streamRecordsUpdated Number of new records updated using stream.
         * 
         * @return builder
         * 
         */
        public Builder streamRecordsUpdated(@Nullable Output<Integer> streamRecordsUpdated) {
            $.streamRecordsUpdated = streamRecordsUpdated;
            return this;
        }

        /**
         * @param streamRecordsUpdated Number of new records updated using stream.
         * 
         * @return builder
         * 
         */
        public Builder streamRecordsUpdated(Integer streamRecordsUpdated) {
            return streamRecordsUpdated(Output.of(streamRecordsUpdated));
        }

        public RocksetMongodbCollectionSourceArgs build() {
            $.collectionName = Objects.requireNonNull($.collectionName, "expected parameter 'collectionName' to be non-null");
            $.databaseName = Objects.requireNonNull($.databaseName, "expected parameter 'databaseName' to be non-null");
            $.integrationName = Objects.requireNonNull($.integrationName, "expected parameter 'integrationName' to be non-null");
            return $;
        }
    }

}
