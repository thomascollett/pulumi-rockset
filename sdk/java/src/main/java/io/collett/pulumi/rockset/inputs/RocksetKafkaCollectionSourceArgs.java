// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.collett.pulumi.rockset.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import io.collett.pulumi.rockset.inputs.RocksetKafkaCollectionSourceStatusArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RocksetKafkaCollectionSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final RocksetKafkaCollectionSourceArgs Empty = new RocksetKafkaCollectionSourceArgs();

    /**
     * The Kafka consumer group Id being used.
     * 
     */
    @Import(name="consumerGroupId")
    private @Nullable Output<String> consumerGroupId;

    /**
     * @return The Kafka consumer group Id being used.
     * 
     */
    public Optional<Output<String>> consumerGroupId() {
        return Optional.ofNullable(this.consumerGroupId);
    }

    /**
     * The name of the Rockset Kafka integration.
     * 
     */
    @Import(name="integrationName", required=true)
    private Output<String> integrationName;

    /**
     * @return The name of the Rockset Kafka integration.
     * 
     */
    public Output<String> integrationName() {
        return this.integrationName;
    }

    /**
     * The offset reset policy. Possible values: LATEST, EARLIEST. Only valid with v3 collections.
     * 
     */
    @Import(name="offsetResetPolicy")
    private @Nullable Output<String> offsetResetPolicy;

    /**
     * @return The offset reset policy. Possible values: LATEST, EARLIEST. Only valid with v3 collections.
     * 
     */
    public Optional<Output<String>> offsetResetPolicy() {
        return Optional.ofNullable(this.offsetResetPolicy);
    }

    @Import(name="statuses")
    private @Nullable Output<List<RocksetKafkaCollectionSourceStatusArgs>> statuses;

    public Optional<Output<List<RocksetKafkaCollectionSourceStatusArgs>>> statuses() {
        return Optional.ofNullable(this.statuses);
    }

    /**
     * Name of Kafka topic to be tailed.
     * 
     */
    @Import(name="topicName", required=true)
    private Output<String> topicName;

    /**
     * @return Name of Kafka topic to be tailed.
     * 
     */
    public Output<String> topicName() {
        return this.topicName;
    }

    /**
     * Whether to use v3 integration. Required if the kafka integration uses v3.
     * 
     */
    @Import(name="useV3")
    private @Nullable Output<Boolean> useV3;

    /**
     * @return Whether to use v3 integration. Required if the kafka integration uses v3.
     * 
     */
    public Optional<Output<Boolean>> useV3() {
        return Optional.ofNullable(this.useV3);
    }

    private RocksetKafkaCollectionSourceArgs() {}

    private RocksetKafkaCollectionSourceArgs(RocksetKafkaCollectionSourceArgs $) {
        this.consumerGroupId = $.consumerGroupId;
        this.integrationName = $.integrationName;
        this.offsetResetPolicy = $.offsetResetPolicy;
        this.statuses = $.statuses;
        this.topicName = $.topicName;
        this.useV3 = $.useV3;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RocksetKafkaCollectionSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RocksetKafkaCollectionSourceArgs $;

        public Builder() {
            $ = new RocksetKafkaCollectionSourceArgs();
        }

        public Builder(RocksetKafkaCollectionSourceArgs defaults) {
            $ = new RocksetKafkaCollectionSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param consumerGroupId The Kafka consumer group Id being used.
         * 
         * @return builder
         * 
         */
        public Builder consumerGroupId(@Nullable Output<String> consumerGroupId) {
            $.consumerGroupId = consumerGroupId;
            return this;
        }

        /**
         * @param consumerGroupId The Kafka consumer group Id being used.
         * 
         * @return builder
         * 
         */
        public Builder consumerGroupId(String consumerGroupId) {
            return consumerGroupId(Output.of(consumerGroupId));
        }

        /**
         * @param integrationName The name of the Rockset Kafka integration.
         * 
         * @return builder
         * 
         */
        public Builder integrationName(Output<String> integrationName) {
            $.integrationName = integrationName;
            return this;
        }

        /**
         * @param integrationName The name of the Rockset Kafka integration.
         * 
         * @return builder
         * 
         */
        public Builder integrationName(String integrationName) {
            return integrationName(Output.of(integrationName));
        }

        /**
         * @param offsetResetPolicy The offset reset policy. Possible values: LATEST, EARLIEST. Only valid with v3 collections.
         * 
         * @return builder
         * 
         */
        public Builder offsetResetPolicy(@Nullable Output<String> offsetResetPolicy) {
            $.offsetResetPolicy = offsetResetPolicy;
            return this;
        }

        /**
         * @param offsetResetPolicy The offset reset policy. Possible values: LATEST, EARLIEST. Only valid with v3 collections.
         * 
         * @return builder
         * 
         */
        public Builder offsetResetPolicy(String offsetResetPolicy) {
            return offsetResetPolicy(Output.of(offsetResetPolicy));
        }

        public Builder statuses(@Nullable Output<List<RocksetKafkaCollectionSourceStatusArgs>> statuses) {
            $.statuses = statuses;
            return this;
        }

        public Builder statuses(List<RocksetKafkaCollectionSourceStatusArgs> statuses) {
            return statuses(Output.of(statuses));
        }

        public Builder statuses(RocksetKafkaCollectionSourceStatusArgs... statuses) {
            return statuses(List.of(statuses));
        }

        /**
         * @param topicName Name of Kafka topic to be tailed.
         * 
         * @return builder
         * 
         */
        public Builder topicName(Output<String> topicName) {
            $.topicName = topicName;
            return this;
        }

        /**
         * @param topicName Name of Kafka topic to be tailed.
         * 
         * @return builder
         * 
         */
        public Builder topicName(String topicName) {
            return topicName(Output.of(topicName));
        }

        /**
         * @param useV3 Whether to use v3 integration. Required if the kafka integration uses v3.
         * 
         * @return builder
         * 
         */
        public Builder useV3(@Nullable Output<Boolean> useV3) {
            $.useV3 = useV3;
            return this;
        }

        /**
         * @param useV3 Whether to use v3 integration. Required if the kafka integration uses v3.
         * 
         * @return builder
         * 
         */
        public Builder useV3(Boolean useV3) {
            return useV3(Output.of(useV3));
        }

        public RocksetKafkaCollectionSourceArgs build() {
            $.integrationName = Objects.requireNonNull($.integrationName, "expected parameter 'integrationName' to be non-null");
            $.topicName = Objects.requireNonNull($.topicName, "expected parameter 'topicName' to be non-null");
            return $;
        }
    }

}
