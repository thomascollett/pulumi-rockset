// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.collett.pulumi.rockset.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RocksetDynamodbCollectionSource {
    /**
     * @return AWS region name of DynamoDB table, by default us-west-2 is used.
     * 
     */
    private @Nullable String awsRegion;
    /**
     * @return The name of the Rockset DynamoDB integration.
     * 
     */
    private String integrationName;
    /**
     * @return Max RCU usage for scan.
     * 
     */
    private @Nullable Integer rcu;
    /**
     * @return DynamoDB scan end time.
     * 
     */
    private @Nullable String scanEndTime;
    /**
     * @return Number of records inserted using scan.
     * 
     */
    private @Nullable Integer scanRecordsProcessed;
    /**
     * @return DynamoDB scan start time.
     * 
     */
    private @Nullable String scanStartTime;
    /**
     * @return Number of records in DynamoDB table at time of scan.
     * 
     */
    private @Nullable Integer scanTotalRecords;
    /**
     * @return State of current ingest for this table.
     * 
     */
    private @Nullable String state;
    /**
     * @return ISO-8601 date when source was last processed.
     * 
     */
    private @Nullable String streamLastProcessedAt;
    /**
     * @return Name of DynamoDB table containing data.
     * 
     */
    private String tableName;
    /**
     * @return Whether the initial table scan should use the DynamoDB scan API. If false, export will be performed using an S3 bucket.
     * 
     */
    private @Nullable Boolean useScanApi;

    private RocksetDynamodbCollectionSource() {}
    /**
     * @return AWS region name of DynamoDB table, by default us-west-2 is used.
     * 
     */
    public Optional<String> awsRegion() {
        return Optional.ofNullable(this.awsRegion);
    }
    /**
     * @return The name of the Rockset DynamoDB integration.
     * 
     */
    public String integrationName() {
        return this.integrationName;
    }
    /**
     * @return Max RCU usage for scan.
     * 
     */
    public Optional<Integer> rcu() {
        return Optional.ofNullable(this.rcu);
    }
    /**
     * @return DynamoDB scan end time.
     * 
     */
    public Optional<String> scanEndTime() {
        return Optional.ofNullable(this.scanEndTime);
    }
    /**
     * @return Number of records inserted using scan.
     * 
     */
    public Optional<Integer> scanRecordsProcessed() {
        return Optional.ofNullable(this.scanRecordsProcessed);
    }
    /**
     * @return DynamoDB scan start time.
     * 
     */
    public Optional<String> scanStartTime() {
        return Optional.ofNullable(this.scanStartTime);
    }
    /**
     * @return Number of records in DynamoDB table at time of scan.
     * 
     */
    public Optional<Integer> scanTotalRecords() {
        return Optional.ofNullable(this.scanTotalRecords);
    }
    /**
     * @return State of current ingest for this table.
     * 
     */
    public Optional<String> state() {
        return Optional.ofNullable(this.state);
    }
    /**
     * @return ISO-8601 date when source was last processed.
     * 
     */
    public Optional<String> streamLastProcessedAt() {
        return Optional.ofNullable(this.streamLastProcessedAt);
    }
    /**
     * @return Name of DynamoDB table containing data.
     * 
     */
    public String tableName() {
        return this.tableName;
    }
    /**
     * @return Whether the initial table scan should use the DynamoDB scan API. If false, export will be performed using an S3 bucket.
     * 
     */
    public Optional<Boolean> useScanApi() {
        return Optional.ofNullable(this.useScanApi);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RocksetDynamodbCollectionSource defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String awsRegion;
        private String integrationName;
        private @Nullable Integer rcu;
        private @Nullable String scanEndTime;
        private @Nullable Integer scanRecordsProcessed;
        private @Nullable String scanStartTime;
        private @Nullable Integer scanTotalRecords;
        private @Nullable String state;
        private @Nullable String streamLastProcessedAt;
        private String tableName;
        private @Nullable Boolean useScanApi;
        public Builder() {}
        public Builder(RocksetDynamodbCollectionSource defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.awsRegion = defaults.awsRegion;
    	      this.integrationName = defaults.integrationName;
    	      this.rcu = defaults.rcu;
    	      this.scanEndTime = defaults.scanEndTime;
    	      this.scanRecordsProcessed = defaults.scanRecordsProcessed;
    	      this.scanStartTime = defaults.scanStartTime;
    	      this.scanTotalRecords = defaults.scanTotalRecords;
    	      this.state = defaults.state;
    	      this.streamLastProcessedAt = defaults.streamLastProcessedAt;
    	      this.tableName = defaults.tableName;
    	      this.useScanApi = defaults.useScanApi;
        }

        @CustomType.Setter
        public Builder awsRegion(@Nullable String awsRegion) {
            this.awsRegion = awsRegion;
            return this;
        }
        @CustomType.Setter
        public Builder integrationName(String integrationName) {
            this.integrationName = Objects.requireNonNull(integrationName);
            return this;
        }
        @CustomType.Setter
        public Builder rcu(@Nullable Integer rcu) {
            this.rcu = rcu;
            return this;
        }
        @CustomType.Setter
        public Builder scanEndTime(@Nullable String scanEndTime) {
            this.scanEndTime = scanEndTime;
            return this;
        }
        @CustomType.Setter
        public Builder scanRecordsProcessed(@Nullable Integer scanRecordsProcessed) {
            this.scanRecordsProcessed = scanRecordsProcessed;
            return this;
        }
        @CustomType.Setter
        public Builder scanStartTime(@Nullable String scanStartTime) {
            this.scanStartTime = scanStartTime;
            return this;
        }
        @CustomType.Setter
        public Builder scanTotalRecords(@Nullable Integer scanTotalRecords) {
            this.scanTotalRecords = scanTotalRecords;
            return this;
        }
        @CustomType.Setter
        public Builder state(@Nullable String state) {
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder streamLastProcessedAt(@Nullable String streamLastProcessedAt) {
            this.streamLastProcessedAt = streamLastProcessedAt;
            return this;
        }
        @CustomType.Setter
        public Builder tableName(String tableName) {
            this.tableName = Objects.requireNonNull(tableName);
            return this;
        }
        @CustomType.Setter
        public Builder useScanApi(@Nullable Boolean useScanApi) {
            this.useScanApi = useScanApi;
            return this;
        }
        public RocksetDynamodbCollectionSource build() {
            final var o = new RocksetDynamodbCollectionSource();
            o.awsRegion = awsRegion;
            o.integrationName = integrationName;
            o.rcu = rcu;
            o.scanEndTime = scanEndTime;
            o.scanRecordsProcessed = scanRecordsProcessed;
            o.scanStartTime = scanStartTime;
            o.scanTotalRecords = scanTotalRecords;
            o.state = state;
            o.streamLastProcessedAt = streamLastProcessedAt;
            o.tableName = tableName;
            o.useScanApi = useScanApi;
            return o;
        }
    }
}
