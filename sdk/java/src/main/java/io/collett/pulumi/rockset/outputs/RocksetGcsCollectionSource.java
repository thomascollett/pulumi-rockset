// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.collett.pulumi.rockset.outputs;

import com.pulumi.core.annotations.CustomType;
import io.collett.pulumi.rockset.outputs.RocksetGcsCollectionSourceCsv;
import io.collett.pulumi.rockset.outputs.RocksetGcsCollectionSourceXml;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RocksetGcsCollectionSource {
    /**
     * @return GCS bucket containing the target data.
     * 
     */
    private String bucket;
    private @Nullable RocksetGcsCollectionSourceCsv csv;
    /**
     * @return Format of the data. One of: json, csv, xml. xml and csv blocks can only be set for their respective formats.
     * 
     */
    private String format;
    /**
     * @return The name of the Rockset GCS integration.
     * 
     */
    private String integrationName;
    /**
     * @return Simple path prefix to GCS key.
     * 
     */
    private @Nullable String prefix;
    private @Nullable RocksetGcsCollectionSourceXml xml;

    private RocksetGcsCollectionSource() {}
    /**
     * @return GCS bucket containing the target data.
     * 
     */
    public String bucket() {
        return this.bucket;
    }
    public Optional<RocksetGcsCollectionSourceCsv> csv() {
        return Optional.ofNullable(this.csv);
    }
    /**
     * @return Format of the data. One of: json, csv, xml. xml and csv blocks can only be set for their respective formats.
     * 
     */
    public String format() {
        return this.format;
    }
    /**
     * @return The name of the Rockset GCS integration.
     * 
     */
    public String integrationName() {
        return this.integrationName;
    }
    /**
     * @return Simple path prefix to GCS key.
     * 
     */
    public Optional<String> prefix() {
        return Optional.ofNullable(this.prefix);
    }
    public Optional<RocksetGcsCollectionSourceXml> xml() {
        return Optional.ofNullable(this.xml);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RocksetGcsCollectionSource defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String bucket;
        private @Nullable RocksetGcsCollectionSourceCsv csv;
        private String format;
        private String integrationName;
        private @Nullable String prefix;
        private @Nullable RocksetGcsCollectionSourceXml xml;
        public Builder() {}
        public Builder(RocksetGcsCollectionSource defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bucket = defaults.bucket;
    	      this.csv = defaults.csv;
    	      this.format = defaults.format;
    	      this.integrationName = defaults.integrationName;
    	      this.prefix = defaults.prefix;
    	      this.xml = defaults.xml;
        }

        @CustomType.Setter
        public Builder bucket(String bucket) {
            this.bucket = Objects.requireNonNull(bucket);
            return this;
        }
        @CustomType.Setter
        public Builder csv(@Nullable RocksetGcsCollectionSourceCsv csv) {
            this.csv = csv;
            return this;
        }
        @CustomType.Setter
        public Builder format(String format) {
            this.format = Objects.requireNonNull(format);
            return this;
        }
        @CustomType.Setter
        public Builder integrationName(String integrationName) {
            this.integrationName = Objects.requireNonNull(integrationName);
            return this;
        }
        @CustomType.Setter
        public Builder prefix(@Nullable String prefix) {
            this.prefix = prefix;
            return this;
        }
        @CustomType.Setter
        public Builder xml(@Nullable RocksetGcsCollectionSourceXml xml) {
            this.xml = xml;
            return this;
        }
        public RocksetGcsCollectionSource build() {
            final var o = new RocksetGcsCollectionSource();
            o.bucket = bucket;
            o.csv = csv;
            o.format = format;
            o.integrationName = integrationName;
            o.prefix = prefix;
            o.xml = xml;
            return o;
        }
    }
}
