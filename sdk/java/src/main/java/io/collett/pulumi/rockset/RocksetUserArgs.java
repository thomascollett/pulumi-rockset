// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.collett.pulumi.rockset;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RocksetUserArgs extends com.pulumi.resources.ResourceArgs {

    public static final RocksetUserArgs Empty = new RocksetUserArgs();

    /**
     * Email address of the user. Also used to identify the user.
     * 
     */
    @Import(name="email", required=true)
    private Output<String> email;

    /**
     * @return Email address of the user. Also used to identify the user.
     * 
     */
    public Output<String> email() {
        return this.email;
    }

    /**
     * User&#39;s first name. This can only be set once the state is ACTIVE, i.e after the user has accepted the invite.
     * 
     */
    @Import(name="firstName")
    private @Nullable Output<String> firstName;

    /**
     * @return User&#39;s first name. This can only be set once the state is ACTIVE, i.e after the user has accepted the invite.
     * 
     */
    public Optional<Output<String>> firstName() {
        return Optional.ofNullable(this.firstName);
    }

    /**
     * User&#39;s last name. This can only be set once the state is ACTIVE, i.e after the user has accepted the invite.
     * 
     */
    @Import(name="lastName")
    private @Nullable Output<String> lastName;

    /**
     * @return User&#39;s last name. This can only be set once the state is ACTIVE, i.e after the user has accepted the invite.
     * 
     */
    public Optional<Output<String>> lastName() {
        return Optional.ofNullable(this.lastName);
    }

    /**
     * List of roles for the user. E.g. &#39;admin&#39;, &#39;member&#39;, &#39;read-only&#39;.
     * 
     */
    @Import(name="roles", required=true)
    private Output<List<String>> roles;

    /**
     * @return List of roles for the user. E.g. &#39;admin&#39;, &#39;member&#39;, &#39;read-only&#39;.
     * 
     */
    public Output<List<String>> roles() {
        return this.roles;
    }

    private RocksetUserArgs() {}

    private RocksetUserArgs(RocksetUserArgs $) {
        this.email = $.email;
        this.firstName = $.firstName;
        this.lastName = $.lastName;
        this.roles = $.roles;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RocksetUserArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RocksetUserArgs $;

        public Builder() {
            $ = new RocksetUserArgs();
        }

        public Builder(RocksetUserArgs defaults) {
            $ = new RocksetUserArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param email Email address of the user. Also used to identify the user.
         * 
         * @return builder
         * 
         */
        public Builder email(Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email Email address of the user. Also used to identify the user.
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param firstName User&#39;s first name. This can only be set once the state is ACTIVE, i.e after the user has accepted the invite.
         * 
         * @return builder
         * 
         */
        public Builder firstName(@Nullable Output<String> firstName) {
            $.firstName = firstName;
            return this;
        }

        /**
         * @param firstName User&#39;s first name. This can only be set once the state is ACTIVE, i.e after the user has accepted the invite.
         * 
         * @return builder
         * 
         */
        public Builder firstName(String firstName) {
            return firstName(Output.of(firstName));
        }

        /**
         * @param lastName User&#39;s last name. This can only be set once the state is ACTIVE, i.e after the user has accepted the invite.
         * 
         * @return builder
         * 
         */
        public Builder lastName(@Nullable Output<String> lastName) {
            $.lastName = lastName;
            return this;
        }

        /**
         * @param lastName User&#39;s last name. This can only be set once the state is ACTIVE, i.e after the user has accepted the invite.
         * 
         * @return builder
         * 
         */
        public Builder lastName(String lastName) {
            return lastName(Output.of(lastName));
        }

        /**
         * @param roles List of roles for the user. E.g. &#39;admin&#39;, &#39;member&#39;, &#39;read-only&#39;.
         * 
         * @return builder
         * 
         */
        public Builder roles(Output<List<String>> roles) {
            $.roles = roles;
            return this;
        }

        /**
         * @param roles List of roles for the user. E.g. &#39;admin&#39;, &#39;member&#39;, &#39;read-only&#39;.
         * 
         * @return builder
         * 
         */
        public Builder roles(List<String> roles) {
            return roles(Output.of(roles));
        }

        /**
         * @param roles List of roles for the user. E.g. &#39;admin&#39;, &#39;member&#39;, &#39;read-only&#39;.
         * 
         * @return builder
         * 
         */
        public Builder roles(String... roles) {
            return roles(List.of(roles));
        }

        public RocksetUserArgs build() {
            $.email = Objects.requireNonNull($.email, "expected parameter 'email' to be non-null");
            $.roles = Objects.requireNonNull($.roles, "expected parameter 'roles' to be non-null");
            return $;
        }
    }

}
