// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.collett.pulumi.rockset.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RocksetDynamodbCollectionSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final RocksetDynamodbCollectionSourceArgs Empty = new RocksetDynamodbCollectionSourceArgs();

    /**
     * AWS region name of DynamoDB table, by default us-west-2 is used.
     * 
     */
    @Import(name="awsRegion")
    private @Nullable Output<String> awsRegion;

    /**
     * @return AWS region name of DynamoDB table, by default us-west-2 is used.
     * 
     */
    public Optional<Output<String>> awsRegion() {
        return Optional.ofNullable(this.awsRegion);
    }

    /**
     * The name of the Rockset DynamoDB integration.
     * 
     */
    @Import(name="integrationName", required=true)
    private Output<String> integrationName;

    /**
     * @return The name of the Rockset DynamoDB integration.
     * 
     */
    public Output<String> integrationName() {
        return this.integrationName;
    }

    /**
     * Max RCU usage for scan.
     * 
     */
    @Import(name="rcu")
    private @Nullable Output<Integer> rcu;

    /**
     * @return Max RCU usage for scan.
     * 
     */
    public Optional<Output<Integer>> rcu() {
        return Optional.ofNullable(this.rcu);
    }

    /**
     * DynamoDB scan end time.
     * 
     */
    @Import(name="scanEndTime")
    private @Nullable Output<String> scanEndTime;

    /**
     * @return DynamoDB scan end time.
     * 
     */
    public Optional<Output<String>> scanEndTime() {
        return Optional.ofNullable(this.scanEndTime);
    }

    /**
     * Number of records inserted using scan.
     * 
     */
    @Import(name="scanRecordsProcessed")
    private @Nullable Output<Integer> scanRecordsProcessed;

    /**
     * @return Number of records inserted using scan.
     * 
     */
    public Optional<Output<Integer>> scanRecordsProcessed() {
        return Optional.ofNullable(this.scanRecordsProcessed);
    }

    /**
     * DynamoDB scan start time.
     * 
     */
    @Import(name="scanStartTime")
    private @Nullable Output<String> scanStartTime;

    /**
     * @return DynamoDB scan start time.
     * 
     */
    public Optional<Output<String>> scanStartTime() {
        return Optional.ofNullable(this.scanStartTime);
    }

    /**
     * Number of records in DynamoDB table at time of scan.
     * 
     */
    @Import(name="scanTotalRecords")
    private @Nullable Output<Integer> scanTotalRecords;

    /**
     * @return Number of records in DynamoDB table at time of scan.
     * 
     */
    public Optional<Output<Integer>> scanTotalRecords() {
        return Optional.ofNullable(this.scanTotalRecords);
    }

    /**
     * State of current ingest for this table.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return State of current ingest for this table.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * ISO-8601 date when source was last processed.
     * 
     */
    @Import(name="streamLastProcessedAt")
    private @Nullable Output<String> streamLastProcessedAt;

    /**
     * @return ISO-8601 date when source was last processed.
     * 
     */
    public Optional<Output<String>> streamLastProcessedAt() {
        return Optional.ofNullable(this.streamLastProcessedAt);
    }

    /**
     * Name of DynamoDB table containing data.
     * 
     */
    @Import(name="tableName", required=true)
    private Output<String> tableName;

    /**
     * @return Name of DynamoDB table containing data.
     * 
     */
    public Output<String> tableName() {
        return this.tableName;
    }

    /**
     * Whether the initial table scan should use the DynamoDB scan API. If false, export will be performed using an S3 bucket.
     * 
     */
    @Import(name="useScanApi")
    private @Nullable Output<Boolean> useScanApi;

    /**
     * @return Whether the initial table scan should use the DynamoDB scan API. If false, export will be performed using an S3 bucket.
     * 
     */
    public Optional<Output<Boolean>> useScanApi() {
        return Optional.ofNullable(this.useScanApi);
    }

    private RocksetDynamodbCollectionSourceArgs() {}

    private RocksetDynamodbCollectionSourceArgs(RocksetDynamodbCollectionSourceArgs $) {
        this.awsRegion = $.awsRegion;
        this.integrationName = $.integrationName;
        this.rcu = $.rcu;
        this.scanEndTime = $.scanEndTime;
        this.scanRecordsProcessed = $.scanRecordsProcessed;
        this.scanStartTime = $.scanStartTime;
        this.scanTotalRecords = $.scanTotalRecords;
        this.state = $.state;
        this.streamLastProcessedAt = $.streamLastProcessedAt;
        this.tableName = $.tableName;
        this.useScanApi = $.useScanApi;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RocksetDynamodbCollectionSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RocksetDynamodbCollectionSourceArgs $;

        public Builder() {
            $ = new RocksetDynamodbCollectionSourceArgs();
        }

        public Builder(RocksetDynamodbCollectionSourceArgs defaults) {
            $ = new RocksetDynamodbCollectionSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param awsRegion AWS region name of DynamoDB table, by default us-west-2 is used.
         * 
         * @return builder
         * 
         */
        public Builder awsRegion(@Nullable Output<String> awsRegion) {
            $.awsRegion = awsRegion;
            return this;
        }

        /**
         * @param awsRegion AWS region name of DynamoDB table, by default us-west-2 is used.
         * 
         * @return builder
         * 
         */
        public Builder awsRegion(String awsRegion) {
            return awsRegion(Output.of(awsRegion));
        }

        /**
         * @param integrationName The name of the Rockset DynamoDB integration.
         * 
         * @return builder
         * 
         */
        public Builder integrationName(Output<String> integrationName) {
            $.integrationName = integrationName;
            return this;
        }

        /**
         * @param integrationName The name of the Rockset DynamoDB integration.
         * 
         * @return builder
         * 
         */
        public Builder integrationName(String integrationName) {
            return integrationName(Output.of(integrationName));
        }

        /**
         * @param rcu Max RCU usage for scan.
         * 
         * @return builder
         * 
         */
        public Builder rcu(@Nullable Output<Integer> rcu) {
            $.rcu = rcu;
            return this;
        }

        /**
         * @param rcu Max RCU usage for scan.
         * 
         * @return builder
         * 
         */
        public Builder rcu(Integer rcu) {
            return rcu(Output.of(rcu));
        }

        /**
         * @param scanEndTime DynamoDB scan end time.
         * 
         * @return builder
         * 
         */
        public Builder scanEndTime(@Nullable Output<String> scanEndTime) {
            $.scanEndTime = scanEndTime;
            return this;
        }

        /**
         * @param scanEndTime DynamoDB scan end time.
         * 
         * @return builder
         * 
         */
        public Builder scanEndTime(String scanEndTime) {
            return scanEndTime(Output.of(scanEndTime));
        }

        /**
         * @param scanRecordsProcessed Number of records inserted using scan.
         * 
         * @return builder
         * 
         */
        public Builder scanRecordsProcessed(@Nullable Output<Integer> scanRecordsProcessed) {
            $.scanRecordsProcessed = scanRecordsProcessed;
            return this;
        }

        /**
         * @param scanRecordsProcessed Number of records inserted using scan.
         * 
         * @return builder
         * 
         */
        public Builder scanRecordsProcessed(Integer scanRecordsProcessed) {
            return scanRecordsProcessed(Output.of(scanRecordsProcessed));
        }

        /**
         * @param scanStartTime DynamoDB scan start time.
         * 
         * @return builder
         * 
         */
        public Builder scanStartTime(@Nullable Output<String> scanStartTime) {
            $.scanStartTime = scanStartTime;
            return this;
        }

        /**
         * @param scanStartTime DynamoDB scan start time.
         * 
         * @return builder
         * 
         */
        public Builder scanStartTime(String scanStartTime) {
            return scanStartTime(Output.of(scanStartTime));
        }

        /**
         * @param scanTotalRecords Number of records in DynamoDB table at time of scan.
         * 
         * @return builder
         * 
         */
        public Builder scanTotalRecords(@Nullable Output<Integer> scanTotalRecords) {
            $.scanTotalRecords = scanTotalRecords;
            return this;
        }

        /**
         * @param scanTotalRecords Number of records in DynamoDB table at time of scan.
         * 
         * @return builder
         * 
         */
        public Builder scanTotalRecords(Integer scanTotalRecords) {
            return scanTotalRecords(Output.of(scanTotalRecords));
        }

        /**
         * @param state State of current ingest for this table.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state State of current ingest for this table.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param streamLastProcessedAt ISO-8601 date when source was last processed.
         * 
         * @return builder
         * 
         */
        public Builder streamLastProcessedAt(@Nullable Output<String> streamLastProcessedAt) {
            $.streamLastProcessedAt = streamLastProcessedAt;
            return this;
        }

        /**
         * @param streamLastProcessedAt ISO-8601 date when source was last processed.
         * 
         * @return builder
         * 
         */
        public Builder streamLastProcessedAt(String streamLastProcessedAt) {
            return streamLastProcessedAt(Output.of(streamLastProcessedAt));
        }

        /**
         * @param tableName Name of DynamoDB table containing data.
         * 
         * @return builder
         * 
         */
        public Builder tableName(Output<String> tableName) {
            $.tableName = tableName;
            return this;
        }

        /**
         * @param tableName Name of DynamoDB table containing data.
         * 
         * @return builder
         * 
         */
        public Builder tableName(String tableName) {
            return tableName(Output.of(tableName));
        }

        /**
         * @param useScanApi Whether the initial table scan should use the DynamoDB scan API. If false, export will be performed using an S3 bucket.
         * 
         * @return builder
         * 
         */
        public Builder useScanApi(@Nullable Output<Boolean> useScanApi) {
            $.useScanApi = useScanApi;
            return this;
        }

        /**
         * @param useScanApi Whether the initial table scan should use the DynamoDB scan API. If false, export will be performed using an S3 bucket.
         * 
         * @return builder
         * 
         */
        public Builder useScanApi(Boolean useScanApi) {
            return useScanApi(Output.of(useScanApi));
        }

        public RocksetDynamodbCollectionSourceArgs build() {
            $.integrationName = Objects.requireNonNull($.integrationName, "expected parameter 'integrationName' to be non-null");
            $.tableName = Objects.requireNonNull($.tableName, "expected parameter 'tableName' to be non-null");
            return $;
        }
    }

}
