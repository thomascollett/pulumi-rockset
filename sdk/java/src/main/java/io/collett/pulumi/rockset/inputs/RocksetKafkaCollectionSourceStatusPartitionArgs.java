// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.collett.pulumi.rockset.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RocksetKafkaCollectionSourceStatusPartitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final RocksetKafkaCollectionSourceStatusPartitionArgs Empty = new RocksetKafkaCollectionSourceStatusPartitionArgs();

    @Import(name="offsetLag")
    private @Nullable Output<Integer> offsetLag;

    public Optional<Output<Integer>> offsetLag() {
        return Optional.ofNullable(this.offsetLag);
    }

    @Import(name="partitionNumber")
    private @Nullable Output<Integer> partitionNumber;

    public Optional<Output<Integer>> partitionNumber() {
        return Optional.ofNullable(this.partitionNumber);
    }

    @Import(name="partitionOffset")
    private @Nullable Output<Integer> partitionOffset;

    public Optional<Output<Integer>> partitionOffset() {
        return Optional.ofNullable(this.partitionOffset);
    }

    private RocksetKafkaCollectionSourceStatusPartitionArgs() {}

    private RocksetKafkaCollectionSourceStatusPartitionArgs(RocksetKafkaCollectionSourceStatusPartitionArgs $) {
        this.offsetLag = $.offsetLag;
        this.partitionNumber = $.partitionNumber;
        this.partitionOffset = $.partitionOffset;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RocksetKafkaCollectionSourceStatusPartitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RocksetKafkaCollectionSourceStatusPartitionArgs $;

        public Builder() {
            $ = new RocksetKafkaCollectionSourceStatusPartitionArgs();
        }

        public Builder(RocksetKafkaCollectionSourceStatusPartitionArgs defaults) {
            $ = new RocksetKafkaCollectionSourceStatusPartitionArgs(Objects.requireNonNull(defaults));
        }

        public Builder offsetLag(@Nullable Output<Integer> offsetLag) {
            $.offsetLag = offsetLag;
            return this;
        }

        public Builder offsetLag(Integer offsetLag) {
            return offsetLag(Output.of(offsetLag));
        }

        public Builder partitionNumber(@Nullable Output<Integer> partitionNumber) {
            $.partitionNumber = partitionNumber;
            return this;
        }

        public Builder partitionNumber(Integer partitionNumber) {
            return partitionNumber(Output.of(partitionNumber));
        }

        public Builder partitionOffset(@Nullable Output<Integer> partitionOffset) {
            $.partitionOffset = partitionOffset;
            return this;
        }

        public Builder partitionOffset(Integer partitionOffset) {
            return partitionOffset(Output.of(partitionOffset));
        }

        public RocksetKafkaCollectionSourceStatusPartitionArgs build() {
            return $;
        }
    }

}
