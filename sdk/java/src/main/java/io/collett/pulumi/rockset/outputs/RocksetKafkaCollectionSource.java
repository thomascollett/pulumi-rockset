// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.collett.pulumi.rockset.outputs;

import com.pulumi.core.annotations.CustomType;
import io.collett.pulumi.rockset.outputs.RocksetKafkaCollectionSourceStatus;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RocksetKafkaCollectionSource {
    /**
     * @return The Kafka consumer group Id being used.
     * 
     */
    private @Nullable String consumerGroupId;
    /**
     * @return The name of the Rockset Kafka integration.
     * 
     */
    private String integrationName;
    /**
     * @return The offset reset policy. Possible values: LATEST, EARLIEST. Only valid with v3 collections.
     * 
     */
    private @Nullable String offsetResetPolicy;
    private @Nullable List<RocksetKafkaCollectionSourceStatus> statuses;
    /**
     * @return Name of Kafka topic to be tailed.
     * 
     */
    private String topicName;
    /**
     * @return Whether to use v3 integration. Required if the kafka integration uses v3.
     * 
     */
    private @Nullable Boolean useV3;

    private RocksetKafkaCollectionSource() {}
    /**
     * @return The Kafka consumer group Id being used.
     * 
     */
    public Optional<String> consumerGroupId() {
        return Optional.ofNullable(this.consumerGroupId);
    }
    /**
     * @return The name of the Rockset Kafka integration.
     * 
     */
    public String integrationName() {
        return this.integrationName;
    }
    /**
     * @return The offset reset policy. Possible values: LATEST, EARLIEST. Only valid with v3 collections.
     * 
     */
    public Optional<String> offsetResetPolicy() {
        return Optional.ofNullable(this.offsetResetPolicy);
    }
    public List<RocksetKafkaCollectionSourceStatus> statuses() {
        return this.statuses == null ? List.of() : this.statuses;
    }
    /**
     * @return Name of Kafka topic to be tailed.
     * 
     */
    public String topicName() {
        return this.topicName;
    }
    /**
     * @return Whether to use v3 integration. Required if the kafka integration uses v3.
     * 
     */
    public Optional<Boolean> useV3() {
        return Optional.ofNullable(this.useV3);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RocksetKafkaCollectionSource defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String consumerGroupId;
        private String integrationName;
        private @Nullable String offsetResetPolicy;
        private @Nullable List<RocksetKafkaCollectionSourceStatus> statuses;
        private String topicName;
        private @Nullable Boolean useV3;
        public Builder() {}
        public Builder(RocksetKafkaCollectionSource defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.consumerGroupId = defaults.consumerGroupId;
    	      this.integrationName = defaults.integrationName;
    	      this.offsetResetPolicy = defaults.offsetResetPolicy;
    	      this.statuses = defaults.statuses;
    	      this.topicName = defaults.topicName;
    	      this.useV3 = defaults.useV3;
        }

        @CustomType.Setter
        public Builder consumerGroupId(@Nullable String consumerGroupId) {
            this.consumerGroupId = consumerGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder integrationName(String integrationName) {
            this.integrationName = Objects.requireNonNull(integrationName);
            return this;
        }
        @CustomType.Setter
        public Builder offsetResetPolicy(@Nullable String offsetResetPolicy) {
            this.offsetResetPolicy = offsetResetPolicy;
            return this;
        }
        @CustomType.Setter
        public Builder statuses(@Nullable List<RocksetKafkaCollectionSourceStatus> statuses) {
            this.statuses = statuses;
            return this;
        }
        public Builder statuses(RocksetKafkaCollectionSourceStatus... statuses) {
            return statuses(List.of(statuses));
        }
        @CustomType.Setter
        public Builder topicName(String topicName) {
            this.topicName = Objects.requireNonNull(topicName);
            return this;
        }
        @CustomType.Setter
        public Builder useV3(@Nullable Boolean useV3) {
            this.useV3 = useV3;
            return this;
        }
        public RocksetKafkaCollectionSource build() {
            final var o = new RocksetKafkaCollectionSource();
            o.consumerGroupId = consumerGroupId;
            o.integrationName = integrationName;
            o.offsetResetPolicy = offsetResetPolicy;
            o.statuses = statuses;
            o.topicName = topicName;
            o.useV3 = useV3;
            return o;
        }
    }
}
