{
    "name": "rockset",
    "displayName": "Rockset",
    "description": "A Pulumi package for creating and managing Rockset resources.",
    "keywords": [
        "pulumi",
        "rockset",
        "category/database"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`rockset` Terraform Provider](https://github.com/rockset/terraform-provider-rockset).",
    "repository": "https://github.com/thomascollett/pulumi-rockset",
    "logoUrl": "https://www.datocms-assets.com/2885/1646941580-rslogo-rockset-light_bg.svg",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumi/pulumi-rockset/sdk/go/rockset"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing Rockset resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/rockset/terraform-provider-rockset)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-rockset` repo](https://github.com/thomascollett/pulumi-rockset/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-rockset` repo](https://github.com/rockset/terraform-provider-rockset/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/rockset/terraform-provider-rockset)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-rockset` repo](https://github.com/thomascollett/pulumi-rockset/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-rockset` repo](https://github.com/rockset/terraform-provider-rockset/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    },
    "config": {
        "variables": {
            "apiKey": {
                "type": "string",
                "description": "The API key used to access Rockset\n",
                "secret": true
            },
            "apiServer": {
                "type": "string",
                "description": "The API server for accessing Rockset\n"
            }
        }
    },
    "types": {
        "rockset:index/RocksetDynamodbCollectionSource:RocksetDynamodbCollectionSource": {
            "properties": {
                "awsRegion": {
                    "type": "string",
                    "description": "AWS region name of DynamoDB table, by default us-west-2 is used.\n",
                    "willReplaceOnChanges": true
                },
                "integrationName": {
                    "type": "string",
                    "description": "The name of the Rockset DynamoDB integration.\n",
                    "willReplaceOnChanges": true
                },
                "rcu": {
                    "type": "integer",
                    "description": "Max RCU usage for scan.\n",
                    "willReplaceOnChanges": true
                },
                "scanEndTime": {
                    "type": "string",
                    "description": "DynamoDB scan end time.\n"
                },
                "scanRecordsProcessed": {
                    "type": "integer",
                    "description": "Number of records inserted using scan.\n"
                },
                "scanStartTime": {
                    "type": "string",
                    "description": "DynamoDB scan start time.\n"
                },
                "scanTotalRecords": {
                    "type": "integer",
                    "description": "Number of records in DynamoDB table at time of scan.\n"
                },
                "state": {
                    "type": "string",
                    "description": "State of current ingest for this table.\n"
                },
                "streamLastProcessedAt": {
                    "type": "string",
                    "description": "ISO-8601 date when source was last processed.\n"
                },
                "tableName": {
                    "type": "string",
                    "description": "Name of DynamoDB table containing data.\n",
                    "willReplaceOnChanges": true
                },
                "useScanApi": {
                    "type": "boolean",
                    "description": "Whether the initial table scan should use the DynamoDB scan API. If false, export will be performed using an S3 bucket.\n"
                }
            },
            "type": "object",
            "required": [
                "integrationName",
                "tableName"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "integrationName",
                        "scanEndTime",
                        "scanRecordsProcessed",
                        "scanStartTime",
                        "scanTotalRecords",
                        "state",
                        "streamLastProcessedAt",
                        "tableName"
                    ]
                }
            }
        },
        "rockset:index/RocksetGcsCollectionSource:RocksetGcsCollectionSource": {
            "properties": {
                "bucket": {
                    "type": "string",
                    "description": "GCS bucket containing the target data.\n",
                    "willReplaceOnChanges": true
                },
                "csv": {
                    "$ref": "#/types/rockset:index/RocksetGcsCollectionSourceCsv:RocksetGcsCollectionSourceCsv",
                    "willReplaceOnChanges": true
                },
                "format": {
                    "type": "string",
                    "description": "Format of the data. One of: json, csv, xml. xml and csv blocks can only be set for their respective formats.\n",
                    "willReplaceOnChanges": true
                },
                "integrationName": {
                    "type": "string",
                    "description": "The name of the Rockset GCS integration.\n",
                    "willReplaceOnChanges": true
                },
                "prefix": {
                    "type": "string",
                    "description": "Simple path prefix to GCS key.\n",
                    "willReplaceOnChanges": true
                },
                "xml": {
                    "$ref": "#/types/rockset:index/RocksetGcsCollectionSourceXml:RocksetGcsCollectionSourceXml",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "bucket",
                "format",
                "integrationName"
            ]
        },
        "rockset:index/RocksetGcsCollectionSourceCsv:RocksetGcsCollectionSourceCsv": {
            "properties": {
                "columnNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "willReplaceOnChanges": true
                },
                "columnTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "willReplaceOnChanges": true
                },
                "encoding": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "escapeChar": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "firstLineAsColumnNames": {
                    "type": "boolean",
                    "willReplaceOnChanges": true
                },
                "quoteChar": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "separator": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "rockset:index/RocksetGcsCollectionSourceXml:RocksetGcsCollectionSourceXml": {
            "properties": {
                "attributePrefix": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "docTag": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "encoding": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "rootTag": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "valueTag": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "rockset:index/RocksetKafkaCollectionSource:RocksetKafkaCollectionSource": {
            "properties": {
                "consumerGroupId": {
                    "type": "string",
                    "description": "The Kafka consumer group Id being used.\n"
                },
                "integrationName": {
                    "type": "string",
                    "description": "The name of the Rockset Kafka integration.\n",
                    "willReplaceOnChanges": true
                },
                "offsetResetPolicy": {
                    "type": "string",
                    "description": "The offset reset policy. Possible values: LATEST, EARLIEST. Only valid with v3 collections.\n",
                    "willReplaceOnChanges": true
                },
                "statuses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rockset:index/RocksetKafkaCollectionSourceStatus:RocksetKafkaCollectionSourceStatus"
                    }
                },
                "topicName": {
                    "type": "string",
                    "description": "Name of Kafka topic to be tailed.\n",
                    "willReplaceOnChanges": true
                },
                "useV3": {
                    "type": "boolean",
                    "description": "Whether to use v3 integration. Required if the kafka integration uses v3.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "integrationName",
                "topicName"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "consumerGroupId",
                        "integrationName",
                        "statuses",
                        "topicName"
                    ]
                }
            }
        },
        "rockset:index/RocksetKafkaCollectionSourceStatus:RocksetKafkaCollectionSourceStatus": {
            "properties": {
                "documentsProcessed": {
                    "type": "integer"
                },
                "lastConsumedTime": {
                    "type": "string"
                },
                "partitions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rockset:index/RocksetKafkaCollectionSourceStatusPartition:RocksetKafkaCollectionSourceStatusPartition"
                    }
                },
                "state": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "documentsProcessed",
                        "lastConsumedTime",
                        "partitions",
                        "state"
                    ]
                }
            }
        },
        "rockset:index/RocksetKafkaCollectionSourceStatusPartition:RocksetKafkaCollectionSourceStatusPartition": {
            "properties": {
                "offsetLag": {
                    "type": "integer"
                },
                "partitionNumber": {
                    "type": "integer"
                },
                "partitionOffset": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "offsetLag",
                        "partitionNumber",
                        "partitionOffset"
                    ]
                }
            }
        },
        "rockset:index/RocksetKinesisCollectionSource:RocksetKinesisCollectionSource": {
            "properties": {
                "awsRegion": {
                    "type": "string",
                    "description": "AWS region name for the Kinesis stream, by default us-west-2 is used\n",
                    "willReplaceOnChanges": true
                },
                "dmsPrimaryKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of fields that correspond to a DMS primary key. Can only be set if format is mysql or postgres.\n",
                    "willReplaceOnChanges": true
                },
                "format": {
                    "type": "string",
                    "description": "Format of the data. One of: json, mysql, postgres. dms*primary*keys list can only be set for mysql or postgres.\n",
                    "willReplaceOnChanges": true
                },
                "integrationName": {
                    "type": "string",
                    "description": "The name of the Rockset Kinesis integration.\n",
                    "willReplaceOnChanges": true
                },
                "streamName": {
                    "type": "string",
                    "description": "Name of Kinesis stream.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "format",
                "integrationName",
                "streamName"
            ]
        },
        "rockset:index/RocksetMongodbCollectionSource:RocksetMongodbCollectionSource": {
            "properties": {
                "collectionName": {
                    "type": "string",
                    "description": "MongoDB collection name of the target collection.\n",
                    "willReplaceOnChanges": true
                },
                "databaseName": {
                    "type": "string",
                    "description": "MongoDB database name containing the target collection.\n",
                    "willReplaceOnChanges": true
                },
                "integrationName": {
                    "type": "string",
                    "description": "The name of the Rockset MongoDB integration.\n",
                    "willReplaceOnChanges": true
                },
                "scanEndTime": {
                    "type": "string",
                    "description": "MongoDB scan end time.\n"
                },
                "scanRecordsProcessed": {
                    "type": "integer",
                    "description": "Number of records inserted using scan.\n"
                },
                "scanStartTime": {
                    "type": "string",
                    "description": "MongoDB scan start time.\n"
                },
                "scanTotalRecords": {
                    "type": "integer",
                    "description": "Number of records in MongoDB table at time of scan.\n"
                },
                "state": {
                    "type": "string",
                    "description": "State of current ingest for this table.\n"
                },
                "streamLastDeleteProcessedAt": {
                    "type": "string",
                    "description": "ISO-8601 date when delete from source was last processed.\n"
                },
                "streamLastInsertProcessedAt": {
                    "type": "string",
                    "description": "ISO-8601 date when new insert from source was last processed.\n"
                },
                "streamLastUpdateProcessedAt": {
                    "type": "string",
                    "description": "ISO-8601 date when update from source was last processed.\n"
                },
                "streamRecordsDeleted": {
                    "type": "integer",
                    "description": "Number of new records deleted using stream.\n"
                },
                "streamRecordsInserted": {
                    "type": "integer",
                    "description": "Number of new records inserted using stream.\n"
                },
                "streamRecordsUpdated": {
                    "type": "integer",
                    "description": "Number of new records updated using stream.\n"
                }
            },
            "type": "object",
            "required": [
                "collectionName",
                "databaseName",
                "integrationName"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "collectionName",
                        "databaseName",
                        "integrationName",
                        "scanEndTime",
                        "scanRecordsProcessed",
                        "scanStartTime",
                        "scanTotalRecords",
                        "state",
                        "streamLastDeleteProcessedAt",
                        "streamLastInsertProcessedAt",
                        "streamLastUpdateProcessedAt",
                        "streamRecordsDeleted",
                        "streamRecordsInserted",
                        "streamRecordsUpdated"
                    ]
                }
            }
        },
        "rockset:index/RocksetQueryLambdaSql:RocksetQueryLambdaSql": {
            "properties": {
                "defaultParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rockset:index/RocksetQueryLambdaSqlDefaultParameter:RocksetQueryLambdaSqlDefaultParameter"
                    }
                },
                "query": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "query"
            ]
        },
        "rockset:index/RocksetQueryLambdaSqlDefaultParameter:RocksetQueryLambdaSqlDefaultParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Unique identifier for the query lambda. Can contain alphanumeric or dash characters.\n"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type",
                "value"
            ]
        },
        "rockset:index/RocksetRolePrivilege:RocksetRolePrivilege": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action allowed by this privilege.\n"
                },
                "cluster": {
                    "type": "string",
                    "description": "Rockset cluster ID for which this action is allowed. Only valid for Workspace actions. Use '*ALL*' for actions which apply to all clusters.\n"
                },
                "resourceName": {
                    "type": "string",
                    "description": "The resource on which this action is allowed. Defaults to 'All' if not specified.\n"
                }
            },
            "type": "object",
            "required": [
                "action"
            ]
        },
        "rockset:index/RocksetS3CollectionSource:RocksetS3CollectionSource": {
            "properties": {
                "bucket": {
                    "type": "string",
                    "description": "S3 bucket containing the target data.\n",
                    "willReplaceOnChanges": true
                },
                "csv": {
                    "$ref": "#/types/rockset:index/RocksetS3CollectionSourceCsv:RocksetS3CollectionSourceCsv",
                    "willReplaceOnChanges": true
                },
                "format": {
                    "type": "string",
                    "description": "Format of the data. One of: json, csv, xml. xml and csv blocks can only be set for their respective formats.\n",
                    "willReplaceOnChanges": true
                },
                "integrationName": {
                    "type": "string",
                    "description": "The name of the Rockset S3 integration. If no S3 integration is provided only data in public S3 buckets are accessible.\n",
                    "willReplaceOnChanges": true
                },
                "pattern": {
                    "type": "string",
                    "description": "Regex path pattern to S3 keys.\n",
                    "willReplaceOnChanges": true
                },
                "prefix": {
                    "type": "string",
                    "description": "Simple path prefix to S3 keys.\n",
                    "deprecationMessage": "use pattern instead",
                    "willReplaceOnChanges": true
                },
                "xml": {
                    "$ref": "#/types/rockset:index/RocksetS3CollectionSourceXml:RocksetS3CollectionSourceXml",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "bucket",
                "format",
                "integrationName"
            ]
        },
        "rockset:index/RocksetS3CollectionSourceCsv:RocksetS3CollectionSourceCsv": {
            "properties": {
                "columnNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "willReplaceOnChanges": true
                },
                "columnTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "willReplaceOnChanges": true
                },
                "encoding": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "escapeChar": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "firstLineAsColumnNames": {
                    "type": "boolean",
                    "willReplaceOnChanges": true
                },
                "quoteChar": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "separator": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "rockset:index/RocksetS3CollectionSourceXml:RocksetS3CollectionSourceXml": {
            "properties": {
                "attributePrefix": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "docTag": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "encoding": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "rootTag": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "valueTag": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "rockset:index/getAccountCluster:getAccountCluster": {
            "properties": {
                "apiServer": {
                    "type": "string"
                },
                "awsRegion": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "apiServer",
                "awsRegion",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the rockset package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "apiKey": {
                "type": "string",
                "description": "The API key used to access Rockset\n",
                "secret": true
            },
            "apiServer": {
                "type": "string",
                "description": "The API server for accessing Rockset\n"
            }
        },
        "inputProperties": {
            "apiKey": {
                "type": "string",
                "description": "The API key used to access Rockset\n",
                "secret": true
            },
            "apiServer": {
                "type": "string",
                "description": "The API server for accessing Rockset\n"
            }
        }
    },
    "resources": {
        "rockset:index/rocksetAlias:RocksetAlias": {
            "description": "Manages an alias for a set of collections.\n",
            "properties": {
                "collections": {
                    "type": "string",
                    "description": "List of collections for this alias to refer to.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Text describing the alias.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique identifier for the alias. Can contain alphanumeric or dash characters.\n"
                },
                "workspace": {
                    "type": "string",
                    "description": "Name of the workspace the alias will be in.\n"
                }
            },
            "required": [
                "collections",
                "name",
                "workspace"
            ],
            "inputProperties": {
                "collections": {
                    "type": "string",
                    "description": "List of collections for this alias to refer to.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Text describing the alias.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique identifier for the alias. Can contain alphanumeric or dash characters.\n",
                    "willReplaceOnChanges": true
                },
                "workspace": {
                    "type": "string",
                    "description": "Name of the workspace the alias will be in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "collections",
                "workspace"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RocksetAlias resources.\n",
                "properties": {
                    "collections": {
                        "type": "string",
                        "description": "List of collections for this alias to refer to.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Text describing the alias.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Unique identifier for the alias. Can contain alphanumeric or dash characters.\n",
                        "willReplaceOnChanges": true
                    },
                    "workspace": {
                        "type": "string",
                        "description": "Name of the workspace the alias will be in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rockset:index/rocksetApiKey:RocksetApiKey": {
            "description": "Manage a Rockset Api Key.\n\nCan be used together with roles to scope the actions the api key can take.\n",
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The resulting Rockset api key.\n",
                    "secret": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the api key.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role the api key will use. If not specified, \"All User Assigned Roles\" will be used.\n"
                },
                "user": {
                    "type": "string",
                    "description": "The user the key is created for.\n"
                }
            },
            "required": [
                "key",
                "name",
                "user"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Name of the api key.\n",
                    "willReplaceOnChanges": true
                },
                "role": {
                    "type": "string",
                    "description": "The role the api key will use. If not specified, \"All User Assigned Roles\" will be used.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RocksetApiKey resources.\n",
                "properties": {
                    "key": {
                        "type": "string",
                        "description": "The resulting Rockset api key.\n",
                        "secret": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the api key.\n",
                        "willReplaceOnChanges": true
                    },
                    "role": {
                        "type": "string",
                        "description": "The role the api key will use. If not specified, \"All User Assigned Roles\" will be used.\n",
                        "willReplaceOnChanges": true
                    },
                    "user": {
                        "type": "string",
                        "description": "The user the key is created for.\n"
                    }
                },
                "type": "object"
            }
        },
        "rockset:index/rocksetCollection:RocksetCollection": {
            "description": "Manages a basic collection with no sources. Usually used for the write api.\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Text describing the collection.\n"
                },
                "fieldMappingQuery": {
                    "type": "string",
                    "description": "**Deprecated** use ingest_transformation instead\n",
                    "deprecationMessage": "Use ingest_transformation instead"
                },
                "ingestTransformation": {
                    "type": "string",
                    "description": "Ingest transformation SQL query. Turns the collection into insert_only mode.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique identifier for the collection. Can contain alphanumeric or dash characters.\n"
                },
                "retentionSecs": {
                    "type": "integer",
                    "description": "Number of seconds after which data is purged. Based on event time.\n"
                },
                "waitForCollection": {
                    "type": "boolean",
                    "description": "Wait until the collection is ready.\n"
                },
                "waitForDocuments": {
                    "type": "integer",
                    "description": "Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.\n"
                },
                "workspace": {
                    "type": "string",
                    "description": "The name of the workspace.\n"
                }
            },
            "required": [
                "name",
                "workspace"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Text describing the collection.\n",
                    "willReplaceOnChanges": true
                },
                "fieldMappingQuery": {
                    "type": "string",
                    "description": "**Deprecated** use ingest_transformation instead\n",
                    "deprecationMessage": "Use ingest_transformation instead",
                    "willReplaceOnChanges": true
                },
                "ingestTransformation": {
                    "type": "string",
                    "description": "Ingest transformation SQL query. Turns the collection into insert_only mode.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Unique identifier for the collection. Can contain alphanumeric or dash characters.\n",
                    "willReplaceOnChanges": true
                },
                "retentionSecs": {
                    "type": "integer",
                    "description": "Number of seconds after which data is purged. Based on event time.\n",
                    "willReplaceOnChanges": true
                },
                "waitForCollection": {
                    "type": "boolean",
                    "description": "Wait until the collection is ready.\n",
                    "willReplaceOnChanges": true
                },
                "waitForDocuments": {
                    "type": "integer",
                    "description": "Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.\n",
                    "willReplaceOnChanges": true
                },
                "workspace": {
                    "type": "string",
                    "description": "The name of the workspace.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "workspace"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RocksetCollection resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Text describing the collection.\n",
                        "willReplaceOnChanges": true
                    },
                    "fieldMappingQuery": {
                        "type": "string",
                        "description": "**Deprecated** use ingest_transformation instead\n",
                        "deprecationMessage": "Use ingest_transformation instead",
                        "willReplaceOnChanges": true
                    },
                    "ingestTransformation": {
                        "type": "string",
                        "description": "Ingest transformation SQL query. Turns the collection into insert_only mode.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Unique identifier for the collection. Can contain alphanumeric or dash characters.\n",
                        "willReplaceOnChanges": true
                    },
                    "retentionSecs": {
                        "type": "integer",
                        "description": "Number of seconds after which data is purged. Based on event time.\n",
                        "willReplaceOnChanges": true
                    },
                    "waitForCollection": {
                        "type": "boolean",
                        "description": "Wait until the collection is ready.\n",
                        "willReplaceOnChanges": true
                    },
                    "waitForDocuments": {
                        "type": "integer",
                        "description": "Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.\n",
                        "willReplaceOnChanges": true
                    },
                    "workspace": {
                        "type": "string",
                        "description": "The name of the workspace.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rockset:index/rocksetDynamodbCollection:RocksetDynamodbCollection": {
            "description": "Manages a collection with an DynamoDB source attached.\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Text describing the collection.\n"
                },
                "fieldMappingQuery": {
                    "type": "string",
                    "description": "**Deprecated** use ingest_transformation instead\n",
                    "deprecationMessage": "Use ingest_transformation instead"
                },
                "ingestTransformation": {
                    "type": "string",
                    "description": "Ingest transformation SQL query. Turns the collection into insert_only mode.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique identifier for the collection. Can contain alphanumeric or dash characters.\n"
                },
                "retentionSecs": {
                    "type": "integer",
                    "description": "Number of seconds after which data is purged. Based on event time.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rockset:index/RocksetDynamodbCollectionSource:RocksetDynamodbCollectionSource"
                    },
                    "description": "Defines a source for this collection.\n"
                },
                "waitForCollection": {
                    "type": "boolean",
                    "description": "Wait until the collection is ready.\n"
                },
                "waitForDocuments": {
                    "type": "integer",
                    "description": "Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.\n"
                },
                "workspace": {
                    "type": "string",
                    "description": "The name of the workspace.\n"
                }
            },
            "required": [
                "name",
                "workspace"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Text describing the collection.\n",
                    "willReplaceOnChanges": true
                },
                "fieldMappingQuery": {
                    "type": "string",
                    "description": "**Deprecated** use ingest_transformation instead\n",
                    "deprecationMessage": "Use ingest_transformation instead",
                    "willReplaceOnChanges": true
                },
                "ingestTransformation": {
                    "type": "string",
                    "description": "Ingest transformation SQL query. Turns the collection into insert_only mode.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Unique identifier for the collection. Can contain alphanumeric or dash characters.\n",
                    "willReplaceOnChanges": true
                },
                "retentionSecs": {
                    "type": "integer",
                    "description": "Number of seconds after which data is purged. Based on event time.\n",
                    "willReplaceOnChanges": true
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rockset:index/RocksetDynamodbCollectionSource:RocksetDynamodbCollectionSource"
                    },
                    "description": "Defines a source for this collection.\n",
                    "willReplaceOnChanges": true
                },
                "waitForCollection": {
                    "type": "boolean",
                    "description": "Wait until the collection is ready.\n",
                    "willReplaceOnChanges": true
                },
                "waitForDocuments": {
                    "type": "integer",
                    "description": "Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.\n",
                    "willReplaceOnChanges": true
                },
                "workspace": {
                    "type": "string",
                    "description": "The name of the workspace.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "workspace"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RocksetDynamodbCollection resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Text describing the collection.\n",
                        "willReplaceOnChanges": true
                    },
                    "fieldMappingQuery": {
                        "type": "string",
                        "description": "**Deprecated** use ingest_transformation instead\n",
                        "deprecationMessage": "Use ingest_transformation instead",
                        "willReplaceOnChanges": true
                    },
                    "ingestTransformation": {
                        "type": "string",
                        "description": "Ingest transformation SQL query. Turns the collection into insert_only mode.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Unique identifier for the collection. Can contain alphanumeric or dash characters.\n",
                        "willReplaceOnChanges": true
                    },
                    "retentionSecs": {
                        "type": "integer",
                        "description": "Number of seconds after which data is purged. Based on event time.\n",
                        "willReplaceOnChanges": true
                    },
                    "sources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rockset:index/RocksetDynamodbCollectionSource:RocksetDynamodbCollectionSource"
                        },
                        "description": "Defines a source for this collection.\n",
                        "willReplaceOnChanges": true
                    },
                    "waitForCollection": {
                        "type": "boolean",
                        "description": "Wait until the collection is ready.\n",
                        "willReplaceOnChanges": true
                    },
                    "waitForDocuments": {
                        "type": "integer",
                        "description": "Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.\n",
                        "willReplaceOnChanges": true
                    },
                    "workspace": {
                        "type": "string",
                        "description": "The name of the workspace.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rockset:index/rocksetDynamodbIntegration:RocksetDynamodbIntegration": {
            "description": "Manages a Rockset DynamoDB Integration.\n",
            "properties": {
                "awsRoleArn": {
                    "type": "string",
                    "description": "The AWS Role Arn to use for this integration.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Text describing the integration.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique identifier for the integration. Can contain alphanumeric or dash characters.\n"
                },
                "s3ExportBucketName": {
                    "type": "string",
                    "description": "AWS S3 bucket name used for exporting the DynamoDB tables.\n"
                }
            },
            "required": [
                "awsRoleArn",
                "name",
                "s3ExportBucketName"
            ],
            "inputProperties": {
                "awsRoleArn": {
                    "type": "string",
                    "description": "The AWS Role Arn to use for this integration.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Text describing the integration.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Unique identifier for the integration. Can contain alphanumeric or dash characters.\n",
                    "willReplaceOnChanges": true
                },
                "s3ExportBucketName": {
                    "type": "string",
                    "description": "AWS S3 bucket name used for exporting the DynamoDB tables.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "awsRoleArn",
                "s3ExportBucketName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RocksetDynamodbIntegration resources.\n",
                "properties": {
                    "awsRoleArn": {
                        "type": "string",
                        "description": "The AWS Role Arn to use for this integration.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Text describing the integration.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Unique identifier for the integration. Can contain alphanumeric or dash characters.\n",
                        "willReplaceOnChanges": true
                    },
                    "s3ExportBucketName": {
                        "type": "string",
                        "description": "AWS S3 bucket name used for exporting the DynamoDB tables.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rockset:index/rocksetGcsCollection:RocksetGcsCollection": {
            "description": "Manages a collection with an GCS source attached.\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Text describing the collection.\n"
                },
                "fieldMappingQuery": {
                    "type": "string",
                    "description": "**Deprecated** use ingest_transformation instead\n",
                    "deprecationMessage": "Use ingest_transformation instead"
                },
                "ingestTransformation": {
                    "type": "string",
                    "description": "Ingest transformation SQL query. Turns the collection into insert_only mode.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique identifier for the collection. Can contain alphanumeric or dash characters.\n"
                },
                "retentionSecs": {
                    "type": "integer",
                    "description": "Number of seconds after which data is purged. Based on event time.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rockset:index/RocksetGcsCollectionSource:RocksetGcsCollectionSource"
                    },
                    "description": "Defines a source for this collection.\n"
                },
                "waitForCollection": {
                    "type": "boolean",
                    "description": "Wait until the collection is ready.\n"
                },
                "waitForDocuments": {
                    "type": "integer",
                    "description": "Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.\n"
                },
                "workspace": {
                    "type": "string",
                    "description": "The name of the workspace.\n"
                }
            },
            "required": [
                "name",
                "workspace"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Text describing the collection.\n",
                    "willReplaceOnChanges": true
                },
                "fieldMappingQuery": {
                    "type": "string",
                    "description": "**Deprecated** use ingest_transformation instead\n",
                    "deprecationMessage": "Use ingest_transformation instead",
                    "willReplaceOnChanges": true
                },
                "ingestTransformation": {
                    "type": "string",
                    "description": "Ingest transformation SQL query. Turns the collection into insert_only mode.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Unique identifier for the collection. Can contain alphanumeric or dash characters.\n",
                    "willReplaceOnChanges": true
                },
                "retentionSecs": {
                    "type": "integer",
                    "description": "Number of seconds after which data is purged. Based on event time.\n",
                    "willReplaceOnChanges": true
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rockset:index/RocksetGcsCollectionSource:RocksetGcsCollectionSource"
                    },
                    "description": "Defines a source for this collection.\n",
                    "willReplaceOnChanges": true
                },
                "waitForCollection": {
                    "type": "boolean",
                    "description": "Wait until the collection is ready.\n",
                    "willReplaceOnChanges": true
                },
                "waitForDocuments": {
                    "type": "integer",
                    "description": "Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.\n",
                    "willReplaceOnChanges": true
                },
                "workspace": {
                    "type": "string",
                    "description": "The name of the workspace.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "workspace"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RocksetGcsCollection resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Text describing the collection.\n",
                        "willReplaceOnChanges": true
                    },
                    "fieldMappingQuery": {
                        "type": "string",
                        "description": "**Deprecated** use ingest_transformation instead\n",
                        "deprecationMessage": "Use ingest_transformation instead",
                        "willReplaceOnChanges": true
                    },
                    "ingestTransformation": {
                        "type": "string",
                        "description": "Ingest transformation SQL query. Turns the collection into insert_only mode.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Unique identifier for the collection. Can contain alphanumeric or dash characters.\n",
                        "willReplaceOnChanges": true
                    },
                    "retentionSecs": {
                        "type": "integer",
                        "description": "Number of seconds after which data is purged. Based on event time.\n",
                        "willReplaceOnChanges": true
                    },
                    "sources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rockset:index/RocksetGcsCollectionSource:RocksetGcsCollectionSource"
                        },
                        "description": "Defines a source for this collection.\n",
                        "willReplaceOnChanges": true
                    },
                    "waitForCollection": {
                        "type": "boolean",
                        "description": "Wait until the collection is ready.\n",
                        "willReplaceOnChanges": true
                    },
                    "waitForDocuments": {
                        "type": "integer",
                        "description": "Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.\n",
                        "willReplaceOnChanges": true
                    },
                    "workspace": {
                        "type": "string",
                        "description": "The name of the workspace.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rockset:index/rocksetGcsIntegration:RocksetGcsIntegration": {
            "description": "Manages a Rockset GCS Integration.\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Text describing the integration.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique identifier for the integration. Can contain alphanumeric or dash characters.\n"
                },
                "serviceAccountKey": {
                    "type": "string",
                    "description": "The GCP service account key JSON.\n"
                }
            },
            "required": [
                "name",
                "serviceAccountKey"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Text describing the integration.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Unique identifier for the integration. Can contain alphanumeric or dash characters.\n",
                    "willReplaceOnChanges": true
                },
                "serviceAccountKey": {
                    "type": "string",
                    "description": "The GCP service account key JSON.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "serviceAccountKey"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RocksetGcsIntegration resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Text describing the integration.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Unique identifier for the integration. Can contain alphanumeric or dash characters.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceAccountKey": {
                        "type": "string",
                        "description": "The GCP service account key JSON.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rockset:index/rocksetKafkaCollection:RocksetKafkaCollection": {
            "description": "Manages a collection created from a Kafka source. The `use_v3` field must match the integration which the collection is created from.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rockset from \"@pulumi/rockset\";\n\nconst config = new pulumi.Config();\nconst bootstrapServers = config.requireObject(\"bootstrapServers\");\nconst apikey = config.requireObject(\"apikey\");\nconst secret = config.requireObject(\"secret\");\nconst confluentRocksetKafkaIntegration = new rockset.RocksetKafkaIntegration(\"confluentRocksetKafkaIntegration\", {\n    description: \"Integration to ingest documents from Confluent Cloud\",\n    useV3: true,\n    bootstrapServers: bootstrapServers,\n    securityConfig: {\n        api_key: apikey,\n        secret: secret,\n    },\n});\nconst confluentRocksetWorkspace = new rockset.RocksetWorkspace(\"confluentRocksetWorkspace\", {description: \"Collections from Confluent Cloud topics.\"});\nconst test = new rockset.RocksetKafkaCollection(\"test\", {\n    workspace: confluentRocksetWorkspace.name,\n    description: \"Collection from a Confluent Cloud topic.\",\n    retentionSecs: 3600,\n    sources: [{\n        integrationName: confluentRocksetKafkaIntegration.name,\n        useV3: true,\n        topicName: \"test_json\",\n        offsetResetPolicy: \"EARLIEST\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_rockset as rockset\n\nconfig = pulumi.Config()\nbootstrap_servers = config.require_object(\"bootstrapServers\")\napikey = config.require_object(\"apikey\")\nsecret = config.require_object(\"secret\")\nconfluent_rockset_kafka_integration = rockset.RocksetKafkaIntegration(\"confluentRocksetKafkaIntegration\",\n    description=\"Integration to ingest documents from Confluent Cloud\",\n    use_v3=True,\n    bootstrap_servers=bootstrap_servers,\n    security_config={\n        \"api_key\": apikey,\n        \"secret\": secret,\n    })\nconfluent_rockset_workspace = rockset.RocksetWorkspace(\"confluentRocksetWorkspace\", description=\"Collections from Confluent Cloud topics.\")\ntest = rockset.RocksetKafkaCollection(\"test\",\n    workspace=confluent_rockset_workspace.name,\n    description=\"Collection from a Confluent Cloud topic.\",\n    retention_secs=3600,\n    sources=[rockset.RocksetKafkaCollectionSourceArgs(\n        integration_name=confluent_rockset_kafka_integration.name,\n        use_v3=True,\n        topic_name=\"test_json\",\n        offset_reset_policy=\"EARLIEST\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rockset = Pulumi.Rockset;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var config = new Config();\n    var bootstrapServers = config.RequireObject\u003cdynamic\u003e(\"bootstrapServers\");\n    var apikey = config.RequireObject\u003cdynamic\u003e(\"apikey\");\n    var secret = config.RequireObject\u003cdynamic\u003e(\"secret\");\n    var confluentRocksetKafkaIntegration = new Rockset.RocksetKafkaIntegration(\"confluentRocksetKafkaIntegration\", new()\n    {\n        Description = \"Integration to ingest documents from Confluent Cloud\",\n        UseV3 = true,\n        BootstrapServers = bootstrapServers,\n        SecurityConfig = \n        {\n            { \"api_key\", apikey },\n            { \"secret\", secret },\n        },\n    });\n\n    var confluentRocksetWorkspace = new Rockset.RocksetWorkspace(\"confluentRocksetWorkspace\", new()\n    {\n        Description = \"Collections from Confluent Cloud topics.\",\n    });\n\n    var test = new Rockset.RocksetKafkaCollection(\"test\", new()\n    {\n        Workspace = confluentRocksetWorkspace.Name,\n        Description = \"Collection from a Confluent Cloud topic.\",\n        RetentionSecs = 3600,\n        Sources = new[]\n        {\n            new Rockset.Inputs.RocksetKafkaCollectionSourceArgs\n            {\n                IntegrationName = confluentRocksetKafkaIntegration.Name,\n                UseV3 = true,\n                TopicName = \"test_json\",\n                OffsetResetPolicy = \"EARLIEST\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rockset/sdk/go/rockset\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcfg := config.New(ctx, \"\")\n\t\tbootstrapServers := cfg.RequireObject(\"bootstrapServers\")\n\t\tapikey := cfg.RequireObject(\"apikey\")\n\t\tsecret := cfg.RequireObject(\"secret\")\n\t\tconfluentRocksetKafkaIntegration, err := rockset.NewRocksetKafkaIntegration(ctx, \"confluentRocksetKafkaIntegration\", \u0026rockset.RocksetKafkaIntegrationArgs{\n\t\t\tDescription:      pulumi.String(\"Integration to ingest documents from Confluent Cloud\"),\n\t\t\tUseV3:            pulumi.Bool(true),\n\t\t\tBootstrapServers: pulumi.Any(bootstrapServers),\n\t\t\tSecurityConfig: pulumi.StringMap{\n\t\t\t\t\"api_key\": pulumi.Any(apikey),\n\t\t\t\t\"secret\":  pulumi.Any(secret),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tconfluentRocksetWorkspace, err := rockset.NewRocksetWorkspace(ctx, \"confluentRocksetWorkspace\", \u0026rockset.RocksetWorkspaceArgs{\n\t\t\tDescription: pulumi.String(\"Collections from Confluent Cloud topics.\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rockset.NewRocksetKafkaCollection(ctx, \"test\", \u0026rockset.RocksetKafkaCollectionArgs{\n\t\t\tWorkspace:     confluentRocksetWorkspace.Name,\n\t\t\tDescription:   pulumi.String(\"Collection from a Confluent Cloud topic.\"),\n\t\t\tRetentionSecs: pulumi.Int(3600),\n\t\t\tSources: rockset.RocksetKafkaCollectionSourceArray{\n\t\t\t\t\u0026rockset.RocksetKafkaCollectionSourceArgs{\n\t\t\t\t\tIntegrationName:   confluentRocksetKafkaIntegration.Name,\n\t\t\t\t\tUseV3:             pulumi.Bool(true),\n\t\t\t\t\tTopicName:         pulumi.String(\"test_json\"),\n\t\t\t\t\tOffsetResetPolicy: pulumi.String(\"EARLIEST\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rockset.RocksetKafkaIntegration;\nimport com.pulumi.rockset.RocksetKafkaIntegrationArgs;\nimport com.pulumi.rockset.RocksetWorkspace;\nimport com.pulumi.rockset.RocksetWorkspaceArgs;\nimport com.pulumi.rockset.RocksetKafkaCollection;\nimport com.pulumi.rockset.RocksetKafkaCollectionArgs;\nimport com.pulumi.rockset.inputs.RocksetKafkaCollectionSourceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var config = ctx.config();\n        final var bootstrapServers = config.get(\"bootstrapServers\");\n        final var apikey = config.get(\"apikey\");\n        final var secret = config.get(\"secret\");\n        var confluentRocksetKafkaIntegration = new RocksetKafkaIntegration(\"confluentRocksetKafkaIntegration\", RocksetKafkaIntegrationArgs.builder()        \n            .description(\"Integration to ingest documents from Confluent Cloud\")\n            .useV3(true)\n            .bootstrapServers(bootstrapServers)\n            .securityConfig(Map.ofEntries(\n                Map.entry(\"api_key\", apikey),\n                Map.entry(\"secret\", secret)\n            ))\n            .build());\n\n        var confluentRocksetWorkspace = new RocksetWorkspace(\"confluentRocksetWorkspace\", RocksetWorkspaceArgs.builder()        \n            .description(\"Collections from Confluent Cloud topics.\")\n            .build());\n\n        var test = new RocksetKafkaCollection(\"test\", RocksetKafkaCollectionArgs.builder()        \n            .workspace(confluentRocksetWorkspace.name())\n            .description(\"Collection from a Confluent Cloud topic.\")\n            .retentionSecs(3600)\n            .sources(RocksetKafkaCollectionSourceArgs.builder()\n                .integrationName(confluentRocksetKafkaIntegration.name())\n                .useV3(true)\n                .topicName(\"test_json\")\n                .offsetResetPolicy(\"EARLIEST\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nconfiguration:\n  bootstrapServers:\n    type: dynamic\n  apikey:\n    type: dynamic\n  secret:\n    type: dynamic\nresources:\n  confluentRocksetKafkaIntegration:\n    type: rockset:RocksetKafkaIntegration\n    properties:\n      description: Integration to ingest documents from Confluent Cloud\n      useV3: true\n      bootstrapServers: ${bootstrapServers}\n      securityConfig:\n        api_key: ${apikey}\n        secret: ${secret}\n  confluentRocksetWorkspace:\n    type: rockset:RocksetWorkspace\n    properties:\n      description: Collections from Confluent Cloud topics.\n  test:\n    type: rockset:RocksetKafkaCollection\n    properties:\n      workspace: ${confluentRocksetWorkspace.name}\n      description: Collection from a Confluent Cloud topic.\n      retentionSecs: 3600\n      sources:\n        - integrationName: ${confluentRocksetKafkaIntegration.name}\n          useV3: true\n          topicName: test_json\n          offsetResetPolicy: EARLIEST\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Text describing the collection.\n"
                },
                "fieldMappingQuery": {
                    "type": "string",
                    "description": "**Deprecated** use ingest_transformation instead\n",
                    "deprecationMessage": "Use ingest_transformation instead"
                },
                "ingestTransformation": {
                    "type": "string",
                    "description": "Ingest transformation SQL query. Turns the collection into insert_only mode.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique identifier for the collection. Can contain alphanumeric or dash characters.\n"
                },
                "retentionSecs": {
                    "type": "integer",
                    "description": "Number of seconds after which data is purged. Based on event time.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rockset:index/RocksetKafkaCollectionSource:RocksetKafkaCollectionSource"
                    },
                    "description": "Defines a source for this collection.\n"
                },
                "waitForCollection": {
                    "type": "boolean",
                    "description": "Wait until the collection is ready.\n"
                },
                "waitForDocuments": {
                    "type": "integer",
                    "description": "Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.\n"
                },
                "workspace": {
                    "type": "string",
                    "description": "The name of the workspace.\n"
                }
            },
            "required": [
                "name",
                "workspace"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Text describing the collection.\n",
                    "willReplaceOnChanges": true
                },
                "fieldMappingQuery": {
                    "type": "string",
                    "description": "**Deprecated** use ingest_transformation instead\n",
                    "deprecationMessage": "Use ingest_transformation instead",
                    "willReplaceOnChanges": true
                },
                "ingestTransformation": {
                    "type": "string",
                    "description": "Ingest transformation SQL query. Turns the collection into insert_only mode.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Unique identifier for the collection. Can contain alphanumeric or dash characters.\n",
                    "willReplaceOnChanges": true
                },
                "retentionSecs": {
                    "type": "integer",
                    "description": "Number of seconds after which data is purged. Based on event time.\n",
                    "willReplaceOnChanges": true
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rockset:index/RocksetKafkaCollectionSource:RocksetKafkaCollectionSource"
                    },
                    "description": "Defines a source for this collection.\n",
                    "willReplaceOnChanges": true
                },
                "waitForCollection": {
                    "type": "boolean",
                    "description": "Wait until the collection is ready.\n",
                    "willReplaceOnChanges": true
                },
                "waitForDocuments": {
                    "type": "integer",
                    "description": "Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.\n",
                    "willReplaceOnChanges": true
                },
                "workspace": {
                    "type": "string",
                    "description": "The name of the workspace.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "workspace"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RocksetKafkaCollection resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Text describing the collection.\n",
                        "willReplaceOnChanges": true
                    },
                    "fieldMappingQuery": {
                        "type": "string",
                        "description": "**Deprecated** use ingest_transformation instead\n",
                        "deprecationMessage": "Use ingest_transformation instead",
                        "willReplaceOnChanges": true
                    },
                    "ingestTransformation": {
                        "type": "string",
                        "description": "Ingest transformation SQL query. Turns the collection into insert_only mode.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Unique identifier for the collection. Can contain alphanumeric or dash characters.\n",
                        "willReplaceOnChanges": true
                    },
                    "retentionSecs": {
                        "type": "integer",
                        "description": "Number of seconds after which data is purged. Based on event time.\n",
                        "willReplaceOnChanges": true
                    },
                    "sources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rockset:index/RocksetKafkaCollectionSource:RocksetKafkaCollectionSource"
                        },
                        "description": "Defines a source for this collection.\n",
                        "willReplaceOnChanges": true
                    },
                    "waitForCollection": {
                        "type": "boolean",
                        "description": "Wait until the collection is ready.\n",
                        "willReplaceOnChanges": true
                    },
                    "waitForDocuments": {
                        "type": "integer",
                        "description": "Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.\n",
                        "willReplaceOnChanges": true
                    },
                    "workspace": {
                        "type": "string",
                        "description": "The name of the workspace.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rockset:index/rocksetKafkaIntegration:RocksetKafkaIntegration": {
            "properties": {
                "bootstrapServers": {
                    "type": "string",
                    "description": "The Kafka bootstrap server url(s). Required only for V3 integration.\n"
                },
                "connectionString": {
                    "type": "string",
                    "description": "Kafka connection string.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Text describing the integration.\n"
                },
                "kafkaDataFormat": {
                    "type": "string",
                    "description": "The format of the Kafka topics being tailed. Possible values: JSON, AVRO.\n"
                },
                "kafkaTopicNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Kafka topics to tail.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique identifier for the integration. Can contain alphanumeric or dash characters.\n"
                },
                "schemaRegistryConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Kafka configuration for schema registry. Required only for V3 integration.\n"
                },
                "securityConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Kafka security configurations. Required only for V3 integration.\n"
                },
                "useV3": {
                    "type": "boolean",
                    "description": "Use v3 for Confluent Cloud.\n"
                },
                "waitForIntegration": {
                    "type": "boolean",
                    "description": "Wait until the integration is active.\n"
                }
            },
            "required": [
                "connectionString",
                "name"
            ],
            "inputProperties": {
                "bootstrapServers": {
                    "type": "string",
                    "description": "The Kafka bootstrap server url(s). Required only for V3 integration.\n",
                    "willReplaceOnChanges": true
                },
                "connectionString": {
                    "type": "string",
                    "description": "Kafka connection string.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Text describing the integration.\n",
                    "willReplaceOnChanges": true
                },
                "kafkaDataFormat": {
                    "type": "string",
                    "description": "The format of the Kafka topics being tailed. Possible values: JSON, AVRO.\n",
                    "willReplaceOnChanges": true
                },
                "kafkaTopicNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Kafka topics to tail.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Unique identifier for the integration. Can contain alphanumeric or dash characters.\n",
                    "willReplaceOnChanges": true
                },
                "schemaRegistryConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Kafka configuration for schema registry. Required only for V3 integration.\n",
                    "willReplaceOnChanges": true
                },
                "securityConfig": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Kafka security configurations. Required only for V3 integration.\n",
                    "willReplaceOnChanges": true
                },
                "useV3": {
                    "type": "boolean",
                    "description": "Use v3 for Confluent Cloud.\n",
                    "willReplaceOnChanges": true
                },
                "waitForIntegration": {
                    "type": "boolean",
                    "description": "Wait until the integration is active.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RocksetKafkaIntegration resources.\n",
                "properties": {
                    "bootstrapServers": {
                        "type": "string",
                        "description": "The Kafka bootstrap server url(s). Required only for V3 integration.\n",
                        "willReplaceOnChanges": true
                    },
                    "connectionString": {
                        "type": "string",
                        "description": "Kafka connection string.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Text describing the integration.\n",
                        "willReplaceOnChanges": true
                    },
                    "kafkaDataFormat": {
                        "type": "string",
                        "description": "The format of the Kafka topics being tailed. Possible values: JSON, AVRO.\n",
                        "willReplaceOnChanges": true
                    },
                    "kafkaTopicNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Kafka topics to tail.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Unique identifier for the integration. Can contain alphanumeric or dash characters.\n",
                        "willReplaceOnChanges": true
                    },
                    "schemaRegistryConfig": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Kafka configuration for schema registry. Required only for V3 integration.\n",
                        "willReplaceOnChanges": true
                    },
                    "securityConfig": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Kafka security configurations. Required only for V3 integration.\n",
                        "willReplaceOnChanges": true
                    },
                    "useV3": {
                        "type": "boolean",
                        "description": "Use v3 for Confluent Cloud.\n",
                        "willReplaceOnChanges": true
                    },
                    "waitForIntegration": {
                        "type": "boolean",
                        "description": "Wait until the integration is active.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rockset:index/rocksetKinesisCollection:RocksetKinesisCollection": {
            "description": "Manages a collection with an Kinesis source attached.\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Text describing the collection.\n"
                },
                "fieldMappingQuery": {
                    "type": "string",
                    "description": "**Deprecated** use ingest_transformation instead\n",
                    "deprecationMessage": "Use ingest_transformation instead"
                },
                "ingestTransformation": {
                    "type": "string",
                    "description": "Ingest transformation SQL query. Turns the collection into insert_only mode.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique identifier for the collection. Can contain alphanumeric or dash characters.\n"
                },
                "retentionSecs": {
                    "type": "integer",
                    "description": "Number of seconds after which data is purged. Based on event time.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rockset:index/RocksetKinesisCollectionSource:RocksetKinesisCollectionSource"
                    },
                    "description": "Defines a source for this collection.\n"
                },
                "waitForCollection": {
                    "type": "boolean",
                    "description": "Wait until the collection is ready.\n"
                },
                "waitForDocuments": {
                    "type": "integer",
                    "description": "Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.\n"
                },
                "workspace": {
                    "type": "string",
                    "description": "The name of the workspace.\n"
                }
            },
            "required": [
                "name",
                "workspace"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Text describing the collection.\n",
                    "willReplaceOnChanges": true
                },
                "fieldMappingQuery": {
                    "type": "string",
                    "description": "**Deprecated** use ingest_transformation instead\n",
                    "deprecationMessage": "Use ingest_transformation instead",
                    "willReplaceOnChanges": true
                },
                "ingestTransformation": {
                    "type": "string",
                    "description": "Ingest transformation SQL query. Turns the collection into insert_only mode.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Unique identifier for the collection. Can contain alphanumeric or dash characters.\n",
                    "willReplaceOnChanges": true
                },
                "retentionSecs": {
                    "type": "integer",
                    "description": "Number of seconds after which data is purged. Based on event time.\n",
                    "willReplaceOnChanges": true
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rockset:index/RocksetKinesisCollectionSource:RocksetKinesisCollectionSource"
                    },
                    "description": "Defines a source for this collection.\n",
                    "willReplaceOnChanges": true
                },
                "waitForCollection": {
                    "type": "boolean",
                    "description": "Wait until the collection is ready.\n",
                    "willReplaceOnChanges": true
                },
                "waitForDocuments": {
                    "type": "integer",
                    "description": "Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.\n",
                    "willReplaceOnChanges": true
                },
                "workspace": {
                    "type": "string",
                    "description": "The name of the workspace.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "workspace"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RocksetKinesisCollection resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Text describing the collection.\n",
                        "willReplaceOnChanges": true
                    },
                    "fieldMappingQuery": {
                        "type": "string",
                        "description": "**Deprecated** use ingest_transformation instead\n",
                        "deprecationMessage": "Use ingest_transformation instead",
                        "willReplaceOnChanges": true
                    },
                    "ingestTransformation": {
                        "type": "string",
                        "description": "Ingest transformation SQL query. Turns the collection into insert_only mode.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Unique identifier for the collection. Can contain alphanumeric or dash characters.\n",
                        "willReplaceOnChanges": true
                    },
                    "retentionSecs": {
                        "type": "integer",
                        "description": "Number of seconds after which data is purged. Based on event time.\n",
                        "willReplaceOnChanges": true
                    },
                    "sources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rockset:index/RocksetKinesisCollectionSource:RocksetKinesisCollectionSource"
                        },
                        "description": "Defines a source for this collection.\n",
                        "willReplaceOnChanges": true
                    },
                    "waitForCollection": {
                        "type": "boolean",
                        "description": "Wait until the collection is ready.\n",
                        "willReplaceOnChanges": true
                    },
                    "waitForDocuments": {
                        "type": "integer",
                        "description": "Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.\n",
                        "willReplaceOnChanges": true
                    },
                    "workspace": {
                        "type": "string",
                        "description": "The name of the workspace.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rockset:index/rocksetKinesisIntegration:RocksetKinesisIntegration": {
            "description": "Manages a Rockset Kinesis Integration.\n",
            "properties": {
                "awsRoleArn": {
                    "type": "string",
                    "description": "The AWS Role Arn to use for this integration.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Text describing the integration.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique identifier for the integration. Can contain alphanumeric or dash characters.\n"
                }
            },
            "required": [
                "awsRoleArn",
                "name"
            ],
            "inputProperties": {
                "awsRoleArn": {
                    "type": "string",
                    "description": "The AWS Role Arn to use for this integration.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Text describing the integration.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Unique identifier for the integration. Can contain alphanumeric or dash characters.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "awsRoleArn"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RocksetKinesisIntegration resources.\n",
                "properties": {
                    "awsRoleArn": {
                        "type": "string",
                        "description": "The AWS Role Arn to use for this integration.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Text describing the integration.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Unique identifier for the integration. Can contain alphanumeric or dash characters.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rockset:index/rocksetMongodbCollection:RocksetMongodbCollection": {
            "description": "Manages a collection with an MongoDB source attached.\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Text describing the collection.\n"
                },
                "fieldMappingQuery": {
                    "type": "string",
                    "description": "**Deprecated** use ingest_transformation instead\n",
                    "deprecationMessage": "Use ingest_transformation instead"
                },
                "ingestTransformation": {
                    "type": "string",
                    "description": "Ingest transformation SQL query. Turns the collection into insert_only mode.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique identifier for the collection. Can contain alphanumeric or dash characters.\n"
                },
                "retentionSecs": {
                    "type": "integer",
                    "description": "Number of seconds after which data is purged. Based on event time.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rockset:index/RocksetMongodbCollectionSource:RocksetMongodbCollectionSource"
                    },
                    "description": "Defines a source for this collection.\n"
                },
                "waitForCollection": {
                    "type": "boolean",
                    "description": "Wait until the collection is ready.\n"
                },
                "waitForDocuments": {
                    "type": "integer",
                    "description": "Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.\n"
                },
                "workspace": {
                    "type": "string",
                    "description": "The name of the workspace.\n"
                }
            },
            "required": [
                "name",
                "workspace"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Text describing the collection.\n",
                    "willReplaceOnChanges": true
                },
                "fieldMappingQuery": {
                    "type": "string",
                    "description": "**Deprecated** use ingest_transformation instead\n",
                    "deprecationMessage": "Use ingest_transformation instead",
                    "willReplaceOnChanges": true
                },
                "ingestTransformation": {
                    "type": "string",
                    "description": "Ingest transformation SQL query. Turns the collection into insert_only mode.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Unique identifier for the collection. Can contain alphanumeric or dash characters.\n",
                    "willReplaceOnChanges": true
                },
                "retentionSecs": {
                    "type": "integer",
                    "description": "Number of seconds after which data is purged. Based on event time.\n",
                    "willReplaceOnChanges": true
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rockset:index/RocksetMongodbCollectionSource:RocksetMongodbCollectionSource"
                    },
                    "description": "Defines a source for this collection.\n",
                    "willReplaceOnChanges": true
                },
                "waitForCollection": {
                    "type": "boolean",
                    "description": "Wait until the collection is ready.\n",
                    "willReplaceOnChanges": true
                },
                "waitForDocuments": {
                    "type": "integer",
                    "description": "Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.\n",
                    "willReplaceOnChanges": true
                },
                "workspace": {
                    "type": "string",
                    "description": "The name of the workspace.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "workspace"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RocksetMongodbCollection resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Text describing the collection.\n",
                        "willReplaceOnChanges": true
                    },
                    "fieldMappingQuery": {
                        "type": "string",
                        "description": "**Deprecated** use ingest_transformation instead\n",
                        "deprecationMessage": "Use ingest_transformation instead",
                        "willReplaceOnChanges": true
                    },
                    "ingestTransformation": {
                        "type": "string",
                        "description": "Ingest transformation SQL query. Turns the collection into insert_only mode.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Unique identifier for the collection. Can contain alphanumeric or dash characters.\n",
                        "willReplaceOnChanges": true
                    },
                    "retentionSecs": {
                        "type": "integer",
                        "description": "Number of seconds after which data is purged. Based on event time.\n",
                        "willReplaceOnChanges": true
                    },
                    "sources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rockset:index/RocksetMongodbCollectionSource:RocksetMongodbCollectionSource"
                        },
                        "description": "Defines a source for this collection.\n",
                        "willReplaceOnChanges": true
                    },
                    "waitForCollection": {
                        "type": "boolean",
                        "description": "Wait until the collection is ready.\n",
                        "willReplaceOnChanges": true
                    },
                    "waitForDocuments": {
                        "type": "integer",
                        "description": "Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.\n",
                        "willReplaceOnChanges": true
                    },
                    "workspace": {
                        "type": "string",
                        "description": "The name of the workspace.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rockset:index/rocksetMongodbIntegration:RocksetMongodbIntegration": {
            "description": "Manages a Rockset MongoDB Integration.\n",
            "properties": {
                "connectionUri": {
                    "type": "string",
                    "description": "MongoDB connection URI string. The password is scrubbed from the URI when fetched by the API so this field is NOT set on imports and reads.\n",
                    "secret": true
                },
                "description": {
                    "type": "string",
                    "description": "Text describing the integration.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique identifier for the integration. Can contain alphanumeric or dash characters.\n"
                }
            },
            "required": [
                "connectionUri",
                "name"
            ],
            "inputProperties": {
                "connectionUri": {
                    "type": "string",
                    "description": "MongoDB connection URI string. The password is scrubbed from the URI when fetched by the API so this field is NOT set on imports and reads.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Text describing the integration.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Unique identifier for the integration. Can contain alphanumeric or dash characters.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "connectionUri"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RocksetMongodbIntegration resources.\n",
                "properties": {
                    "connectionUri": {
                        "type": "string",
                        "description": "MongoDB connection URI string. The password is scrubbed from the URI when fetched by the API so this field is NOT set on imports and reads.\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Text describing the integration.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Unique identifier for the integration. Can contain alphanumeric or dash characters.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rockset:index/rocksetQueryLambda:RocksetQueryLambda": {
            "description": "Manages a Rockset Query Lambda.\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Text describing the query lambda.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique identifier for the query lambda. Can contain alphanumeric or dash characters.\n"
                },
                "sqls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rockset:index/RocksetQueryLambdaSql:RocksetQueryLambdaSql"
                    }
                },
                "state": {
                    "type": "string",
                    "description": "The latest state of this query lambda.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The latest version string of this query lambda.\n"
                },
                "workspace": {
                    "type": "string",
                    "description": "The name of the workspace.\n"
                }
            },
            "required": [
                "name",
                "sqls",
                "state",
                "version",
                "workspace"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Text describing the query lambda.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique identifier for the query lambda. Can contain alphanumeric or dash characters.\n",
                    "willReplaceOnChanges": true
                },
                "sqls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rockset:index/RocksetQueryLambdaSql:RocksetQueryLambdaSql"
                    }
                },
                "workspace": {
                    "type": "string",
                    "description": "The name of the workspace.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "sqls",
                "workspace"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RocksetQueryLambda resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Text describing the query lambda.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Unique identifier for the query lambda. Can contain alphanumeric or dash characters.\n",
                        "willReplaceOnChanges": true
                    },
                    "sqls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rockset:index/RocksetQueryLambdaSql:RocksetQueryLambdaSql"
                        }
                    },
                    "state": {
                        "type": "string",
                        "description": "The latest state of this query lambda.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "The latest version string of this query lambda.\n"
                    },
                    "workspace": {
                        "type": "string",
                        "description": "The name of the workspace.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rockset:index/rocksetQueryLambdaTag:RocksetQueryLambdaTag": {
            "description": "Manages a Rockset Query Lambda Tag.\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Unique identifier for the tag. Can contain alphanumeric or dash characters.\n"
                },
                "queryLambda": {
                    "type": "string",
                    "description": "Unique identifier for the query lambda. Can contain alphanumeric or dash characters.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of the query lambda this tag should point to.\n"
                },
                "workspace": {
                    "type": "string",
                    "description": "The name of the workspace the query lambda is in.\n"
                }
            },
            "required": [
                "name",
                "queryLambda",
                "version",
                "workspace"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Unique identifier for the tag. Can contain alphanumeric or dash characters.\n",
                    "willReplaceOnChanges": true
                },
                "queryLambda": {
                    "type": "string",
                    "description": "Unique identifier for the query lambda. Can contain alphanumeric or dash characters.\n",
                    "willReplaceOnChanges": true
                },
                "version": {
                    "type": "string",
                    "description": "Version of the query lambda this tag should point to.\n"
                },
                "workspace": {
                    "type": "string",
                    "description": "The name of the workspace the query lambda is in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "queryLambda",
                "version",
                "workspace"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RocksetQueryLambdaTag resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Unique identifier for the tag. Can contain alphanumeric or dash characters.\n",
                        "willReplaceOnChanges": true
                    },
                    "queryLambda": {
                        "type": "string",
                        "description": "Unique identifier for the query lambda. Can contain alphanumeric or dash characters.\n",
                        "willReplaceOnChanges": true
                    },
                    "version": {
                        "type": "string",
                        "description": "Version of the query lambda this tag should point to.\n"
                    },
                    "workspace": {
                        "type": "string",
                        "description": "The name of the workspace the query lambda is in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rockset:index/rocksetRole:RocksetRole": {
            "description": "Manages a Rockset [Role](https://rockset.com/docs/iam/).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rockset from \"@pulumi/rockset\";\n\nconst query_onlyRocksetRole = new rockset.RocksetRole(\"query-onlyRocksetRole\", {\n    description: \"This role can only query collections in the prod workspace in the usw2a1 cluster\",\n    privileges: [\n        {\n            action: \"QUERY_DATA_WS\",\n            resourceName: \"prod\",\n            cluster: \"usw2a1\",\n        },\n        {\n            action: \"EXECUTE_QUERY_LAMBDA_WS\",\n            resourceName: \"prod\",\n            cluster: \"usw2a1\",\n        },\n    ],\n});\nconst query_onlyRocksetApiKey = new rockset.RocksetApiKey(\"query-onlyRocksetApiKey\", {role: query_onlyRocksetRole.name});\n```\n```python\nimport pulumi\nimport pulumi_rockset as rockset\n\nquery_only_rockset_role = rockset.RocksetRole(\"query-onlyRocksetRole\",\n    description=\"This role can only query collections in the prod workspace in the usw2a1 cluster\",\n    privileges=[\n        rockset.RocksetRolePrivilegeArgs(\n            action=\"QUERY_DATA_WS\",\n            resource_name=\"prod\",\n            cluster=\"usw2a1\",\n        ),\n        rockset.RocksetRolePrivilegeArgs(\n            action=\"EXECUTE_QUERY_LAMBDA_WS\",\n            resource_name=\"prod\",\n            cluster=\"usw2a1\",\n        ),\n    ])\nquery_only_rockset_api_key = rockset.RocksetApiKey(\"query-onlyRocksetApiKey\", role=query_only_rockset_role.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rockset = Pulumi.Rockset;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var query_onlyRocksetRole = new Rockset.RocksetRole(\"query-onlyRocksetRole\", new()\n    {\n        Description = \"This role can only query collections in the prod workspace in the usw2a1 cluster\",\n        Privileges = new[]\n        {\n            new Rockset.Inputs.RocksetRolePrivilegeArgs\n            {\n                Action = \"QUERY_DATA_WS\",\n                ResourceName = \"prod\",\n                Cluster = \"usw2a1\",\n            },\n            new Rockset.Inputs.RocksetRolePrivilegeArgs\n            {\n                Action = \"EXECUTE_QUERY_LAMBDA_WS\",\n                ResourceName = \"prod\",\n                Cluster = \"usw2a1\",\n            },\n        },\n    });\n\n    var query_onlyRocksetApiKey = new Rockset.RocksetApiKey(\"query-onlyRocksetApiKey\", new()\n    {\n        Role = query_onlyRocksetRole.Name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rockset/sdk/go/rockset\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rockset.NewRocksetRole(ctx, \"query-onlyRocksetRole\", \u0026rockset.RocksetRoleArgs{\n\t\t\tDescription: pulumi.String(\"This role can only query collections in the prod workspace in the usw2a1 cluster\"),\n\t\t\tPrivileges: rockset.RocksetRolePrivilegeArray{\n\t\t\t\t\u0026rockset.RocksetRolePrivilegeArgs{\n\t\t\t\t\tAction:       pulumi.String(\"QUERY_DATA_WS\"),\n\t\t\t\t\tResourceName: pulumi.String(\"prod\"),\n\t\t\t\t\tCluster:      pulumi.String(\"usw2a1\"),\n\t\t\t\t},\n\t\t\t\t\u0026rockset.RocksetRolePrivilegeArgs{\n\t\t\t\t\tAction:       pulumi.String(\"EXECUTE_QUERY_LAMBDA_WS\"),\n\t\t\t\t\tResourceName: pulumi.String(\"prod\"),\n\t\t\t\t\tCluster:      pulumi.String(\"usw2a1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rockset.NewRocksetApiKey(ctx, \"query-onlyRocksetApiKey\", \u0026rockset.RocksetApiKeyArgs{\n\t\t\tRole: query_onlyRocksetRole.Name,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rockset.RocksetRole;\nimport com.pulumi.rockset.RocksetRoleArgs;\nimport com.pulumi.rockset.inputs.RocksetRolePrivilegeArgs;\nimport com.pulumi.rockset.RocksetApiKey;\nimport com.pulumi.rockset.RocksetApiKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var query_onlyRocksetRole = new RocksetRole(\"query-onlyRocksetRole\", RocksetRoleArgs.builder()        \n            .description(\"This role can only query collections in the prod workspace in the usw2a1 cluster\")\n            .privileges(            \n                RocksetRolePrivilegeArgs.builder()\n                    .action(\"QUERY_DATA_WS\")\n                    .resourceName(\"prod\")\n                    .cluster(\"usw2a1\")\n                    .build(),\n                RocksetRolePrivilegeArgs.builder()\n                    .action(\"EXECUTE_QUERY_LAMBDA_WS\")\n                    .resourceName(\"prod\")\n                    .cluster(\"usw2a1\")\n                    .build())\n            .build());\n\n        var query_onlyRocksetApiKey = new RocksetApiKey(\"query-onlyRocksetApiKey\", RocksetApiKeyArgs.builder()        \n            .role(query_onlyRocksetRole.name())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  query-onlyRocksetRole:\n    type: rockset:RocksetRole\n    properties:\n      description: This role can only query collections in the prod workspace in the usw2a1 cluster\n      privileges:\n        - action: QUERY_DATA_WS\n          resourceName: prod\n          cluster: usw2a1\n        - action: EXECUTE_QUERY_LAMBDA_WS\n          resourceName: prod\n          cluster: usw2a1\n  query-onlyRocksetApiKey:\n    type: rockset:RocksetApiKey\n    properties:\n      role: ${[\"query-onlyRocksetRole\"].name}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "When the role was created.\n"
                },
                "createdBy": {
                    "type": "string",
                    "description": "Who created the role.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Role description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Role name.\n"
                },
                "ownerEmail": {
                    "type": "string",
                    "description": "The email of the user who currently owns the role.\n"
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rockset:index/RocksetRolePrivilege:RocksetRolePrivilege"
                    },
                    "description": "Privileges associated with the role. For a full list see [API documentation](https://rockset.com/docs/iam/#supported-privileges)\n"
                }
            },
            "required": [
                "createdAt",
                "createdBy",
                "name",
                "ownerEmail"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Role description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Role name.\n",
                    "willReplaceOnChanges": true
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rockset:index/RocksetRolePrivilege:RocksetRolePrivilege"
                    },
                    "description": "Privileges associated with the role. For a full list see [API documentation](https://rockset.com/docs/iam/#supported-privileges)\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RocksetRole resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "When the role was created.\n"
                    },
                    "createdBy": {
                        "type": "string",
                        "description": "Who created the role.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Role description.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Role name.\n",
                        "willReplaceOnChanges": true
                    },
                    "ownerEmail": {
                        "type": "string",
                        "description": "The email of the user who currently owns the role.\n"
                    },
                    "privileges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rockset:index/RocksetRolePrivilege:RocksetRolePrivilege"
                        },
                        "description": "Privileges associated with the role. For a full list see [API documentation](https://rockset.com/docs/iam/#supported-privileges)\n"
                    }
                },
                "type": "object"
            }
        },
        "rockset:index/rocksetS3Collection:RocksetS3Collection": {
            "description": "Manages a collection with on or more S3 sources attached. Uses an S3 integration to access the S3 bucket. If no integration is provided, only data in public buckets are accessible.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rockset from \"@pulumi/rockset\";\n\nconst sample = new rockset.RocksetWorkspace(\"sample\", {description: \"sample datasets\"});\nconst _public = new rockset.RocksetS3Integration(\"public\", {\n    description: \"Integration to access Rockset's public datasets\",\n    awsRoleArn: \"arn:aws:iam::469279130686:role/rockset-public-datasets\",\n});\nconst cities = new rockset.RocksetS3Collection(\"cities\", {\n    workspace: sample.name,\n    sources: [{\n        bucket: \"rockset-public-datasets\",\n        integrationName: _public.name,\n        pattern: \"cities/*.json\",\n        format: \"json\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_rockset as rockset\n\nsample = rockset.RocksetWorkspace(\"sample\", description=\"sample datasets\")\npublic = rockset.RocksetS3Integration(\"public\",\n    description=\"Integration to access Rockset's public datasets\",\n    aws_role_arn=\"arn:aws:iam::469279130686:role/rockset-public-datasets\")\ncities = rockset.RocksetS3Collection(\"cities\",\n    workspace=sample.name,\n    sources=[rockset.RocksetS3CollectionSourceArgs(\n        bucket=\"rockset-public-datasets\",\n        integration_name=public.name,\n        pattern=\"cities/*.json\",\n        format=\"json\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rockset = Pulumi.Rockset;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sample = new Rockset.RocksetWorkspace(\"sample\", new()\n    {\n        Description = \"sample datasets\",\n    });\n\n    var @public = new Rockset.RocksetS3Integration(\"public\", new()\n    {\n        Description = \"Integration to access Rockset's public datasets\",\n        AwsRoleArn = \"arn:aws:iam::469279130686:role/rockset-public-datasets\",\n    });\n\n    var cities = new Rockset.RocksetS3Collection(\"cities\", new()\n    {\n        Workspace = sample.Name,\n        Sources = new[]\n        {\n            new Rockset.Inputs.RocksetS3CollectionSourceArgs\n            {\n                Bucket = \"rockset-public-datasets\",\n                IntegrationName = @public.Name,\n                Pattern = \"cities/*.json\",\n                Format = \"json\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rockset/sdk/go/rockset\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsample, err := rockset.NewRocksetWorkspace(ctx, \"sample\", \u0026rockset.RocksetWorkspaceArgs{\n\t\t\tDescription: pulumi.String(\"sample datasets\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpublic, err := rockset.NewRocksetS3Integration(ctx, \"public\", \u0026rockset.RocksetS3IntegrationArgs{\n\t\t\tDescription: pulumi.String(\"Integration to access Rockset's public datasets\"),\n\t\t\tAwsRoleArn:  pulumi.String(\"arn:aws:iam::469279130686:role/rockset-public-datasets\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rockset.NewRocksetS3Collection(ctx, \"cities\", \u0026rockset.RocksetS3CollectionArgs{\n\t\t\tWorkspace: sample.Name,\n\t\t\tSources: rockset.RocksetS3CollectionSourceArray{\n\t\t\t\t\u0026rockset.RocksetS3CollectionSourceArgs{\n\t\t\t\t\tBucket:          pulumi.String(\"rockset-public-datasets\"),\n\t\t\t\t\tIntegrationName: public.Name,\n\t\t\t\t\tPattern:         pulumi.String(\"cities/*.json\"),\n\t\t\t\t\tFormat:          pulumi.String(\"json\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rockset.RocksetWorkspace;\nimport com.pulumi.rockset.RocksetWorkspaceArgs;\nimport com.pulumi.rockset.RocksetS3Integration;\nimport com.pulumi.rockset.RocksetS3IntegrationArgs;\nimport com.pulumi.rockset.RocksetS3Collection;\nimport com.pulumi.rockset.RocksetS3CollectionArgs;\nimport com.pulumi.rockset.inputs.RocksetS3CollectionSourceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var sample = new RocksetWorkspace(\"sample\", RocksetWorkspaceArgs.builder()        \n            .description(\"sample datasets\")\n            .build());\n\n        var public_ = new RocksetS3Integration(\"public\", RocksetS3IntegrationArgs.builder()        \n            .description(\"Integration to access Rockset's public datasets\")\n            .awsRoleArn(\"arn:aws:iam::469279130686:role/rockset-public-datasets\")\n            .build());\n\n        var cities = new RocksetS3Collection(\"cities\", RocksetS3CollectionArgs.builder()        \n            .workspace(sample.name())\n            .sources(RocksetS3CollectionSourceArgs.builder()\n                .bucket(\"rockset-public-datasets\")\n                .integrationName(public_.name())\n                .pattern(\"cities/*.json\")\n                .format(\"json\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  sample:\n    type: rockset:RocksetWorkspace\n    properties:\n      description: sample datasets\n  public:\n    type: rockset:RocksetS3Integration\n    properties:\n      description: Integration to access Rockset's public datasets\n      awsRoleArn: arn:aws:iam::469279130686:role/rockset-public-datasets\n  cities:\n    type: rockset:RocksetS3Collection\n    properties:\n      workspace: ${sample.name}\n      sources:\n        - bucket: rockset-public-datasets\n          integrationName: ${public.name}\n          pattern: cities/*.json\n          format: json\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Text describing the collection.\n"
                },
                "fieldMappingQuery": {
                    "type": "string",
                    "description": "**Deprecated** use ingest_transformation instead\n",
                    "deprecationMessage": "Use ingest_transformation instead"
                },
                "ingestTransformation": {
                    "type": "string",
                    "description": "Ingest transformation SQL query. Turns the collection into insert_only mode.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique identifier for the collection. Can contain alphanumeric or dash characters.\n"
                },
                "retentionSecs": {
                    "type": "integer",
                    "description": "Number of seconds after which data is purged. Based on event time.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rockset:index/RocksetS3CollectionSource:RocksetS3CollectionSource"
                    },
                    "description": "Defines a source for this collection.\n"
                },
                "waitForCollection": {
                    "type": "boolean",
                    "description": "Wait until the collection is ready.\n"
                },
                "waitForDocuments": {
                    "type": "integer",
                    "description": "Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.\n"
                },
                "workspace": {
                    "type": "string",
                    "description": "The name of the workspace.\n"
                }
            },
            "required": [
                "name",
                "workspace"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Text describing the collection.\n",
                    "willReplaceOnChanges": true
                },
                "fieldMappingQuery": {
                    "type": "string",
                    "description": "**Deprecated** use ingest_transformation instead\n",
                    "deprecationMessage": "Use ingest_transformation instead",
                    "willReplaceOnChanges": true
                },
                "ingestTransformation": {
                    "type": "string",
                    "description": "Ingest transformation SQL query. Turns the collection into insert_only mode.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Unique identifier for the collection. Can contain alphanumeric or dash characters.\n",
                    "willReplaceOnChanges": true
                },
                "retentionSecs": {
                    "type": "integer",
                    "description": "Number of seconds after which data is purged. Based on event time.\n",
                    "willReplaceOnChanges": true
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rockset:index/RocksetS3CollectionSource:RocksetS3CollectionSource"
                    },
                    "description": "Defines a source for this collection.\n",
                    "willReplaceOnChanges": true
                },
                "waitForCollection": {
                    "type": "boolean",
                    "description": "Wait until the collection is ready.\n",
                    "willReplaceOnChanges": true
                },
                "waitForDocuments": {
                    "type": "integer",
                    "description": "Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.\n",
                    "willReplaceOnChanges": true
                },
                "workspace": {
                    "type": "string",
                    "description": "The name of the workspace.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "workspace"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RocksetS3Collection resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Text describing the collection.\n",
                        "willReplaceOnChanges": true
                    },
                    "fieldMappingQuery": {
                        "type": "string",
                        "description": "**Deprecated** use ingest_transformation instead\n",
                        "deprecationMessage": "Use ingest_transformation instead",
                        "willReplaceOnChanges": true
                    },
                    "ingestTransformation": {
                        "type": "string",
                        "description": "Ingest transformation SQL query. Turns the collection into insert_only mode.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Unique identifier for the collection. Can contain alphanumeric or dash characters.\n",
                        "willReplaceOnChanges": true
                    },
                    "retentionSecs": {
                        "type": "integer",
                        "description": "Number of seconds after which data is purged. Based on event time.\n",
                        "willReplaceOnChanges": true
                    },
                    "sources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rockset:index/RocksetS3CollectionSource:RocksetS3CollectionSource"
                        },
                        "description": "Defines a source for this collection.\n",
                        "willReplaceOnChanges": true
                    },
                    "waitForCollection": {
                        "type": "boolean",
                        "description": "Wait until the collection is ready.\n",
                        "willReplaceOnChanges": true
                    },
                    "waitForDocuments": {
                        "type": "integer",
                        "description": "Wait until the collection has documents. The default is to wait for 0 documents, which means it doesn't wait.\n",
                        "willReplaceOnChanges": true
                    },
                    "workspace": {
                        "type": "string",
                        "description": "The name of the workspace.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rockset:index/rocksetS3Integration:RocksetS3Integration": {
            "description": "Manages a Rockset S3 Integration.\n",
            "properties": {
                "awsRoleArn": {
                    "type": "string",
                    "description": "The AWS Role Arn to use for this integration.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Text describing the integration.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique identifier for the integration. Can contain alphanumeric or dash characters.\n"
                }
            },
            "required": [
                "awsRoleArn",
                "name"
            ],
            "inputProperties": {
                "awsRoleArn": {
                    "type": "string",
                    "description": "The AWS Role Arn to use for this integration.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Text describing the integration.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Unique identifier for the integration. Can contain alphanumeric or dash characters.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "awsRoleArn"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RocksetS3Integration resources.\n",
                "properties": {
                    "awsRoleArn": {
                        "type": "string",
                        "description": "The AWS Role Arn to use for this integration.\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "Text describing the integration.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Unique identifier for the integration. Can contain alphanumeric or dash characters.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rockset:index/rocksetUser:RocksetUser": {
            "description": "Manages a Rockset User.\n\nFirst and last name can only be managed for users who have accepted the invite,\ni.e. when the state is ACCEPTED.\n",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "The ISO-8601 time of when the user was created.\n"
                },
                "email": {
                    "type": "string",
                    "description": "Email address of the user. Also used to identify the user.\n"
                },
                "firstName": {
                    "type": "string",
                    "description": "User's first name. This can only be set once the state is ACTIVE, i.e after the user has accepted the invite.\n"
                },
                "lastName": {
                    "type": "string",
                    "description": "User's last name. This can only be set once the state is ACTIVE, i.e after the user has accepted the invite.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of roles for the user. E.g. 'admin', 'member', 'read-only'.\n"
                },
                "state": {
                    "type": "string",
                    "description": "State of the user, either NEW or ACTIVE.\n"
                }
            },
            "required": [
                "createdAt",
                "email",
                "roles",
                "state"
            ],
            "inputProperties": {
                "email": {
                    "type": "string",
                    "description": "Email address of the user. Also used to identify the user.\n",
                    "willReplaceOnChanges": true
                },
                "firstName": {
                    "type": "string",
                    "description": "User's first name. This can only be set once the state is ACTIVE, i.e after the user has accepted the invite.\n"
                },
                "lastName": {
                    "type": "string",
                    "description": "User's last name. This can only be set once the state is ACTIVE, i.e after the user has accepted the invite.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of roles for the user. E.g. 'admin', 'member', 'read-only'.\n"
                }
            },
            "requiredInputs": [
                "email",
                "roles"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RocksetUser resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "The ISO-8601 time of when the user was created.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email address of the user. Also used to identify the user.\n",
                        "willReplaceOnChanges": true
                    },
                    "firstName": {
                        "type": "string",
                        "description": "User's first name. This can only be set once the state is ACTIVE, i.e after the user has accepted the invite.\n"
                    },
                    "lastName": {
                        "type": "string",
                        "description": "User's last name. This can only be set once the state is ACTIVE, i.e after the user has accepted the invite.\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of roles for the user. E.g. 'admin', 'member', 'read-only'.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the user, either NEW or ACTIVE.\n"
                    }
                },
                "type": "object"
            }
        },
        "rockset:index/rocksetView:RocksetView": {
            "description": "Manages a Rockset view.\n",
            "properties": {
                "createdBy": {
                    "type": "string",
                    "description": "The user who created the view.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Text describing the collection.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique name for the view in the workspace. Can contain alphanumeric or dash characters.\n"
                },
                "query": {
                    "type": "string",
                    "description": "SQL query used for thw view.\n"
                },
                "workspace": {
                    "type": "string",
                    "description": "Workspace name.\n"
                }
            },
            "required": [
                "createdBy",
                "name",
                "query",
                "workspace"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Text describing the collection.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Unique name for the view in the workspace. Can contain alphanumeric or dash characters.\n",
                    "willReplaceOnChanges": true
                },
                "query": {
                    "type": "string",
                    "description": "SQL query used for thw view.\n"
                },
                "workspace": {
                    "type": "string",
                    "description": "Workspace name.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "query",
                "workspace"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RocksetView resources.\n",
                "properties": {
                    "createdBy": {
                        "type": "string",
                        "description": "The user who created the view.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Text describing the collection.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Unique name for the view in the workspace. Can contain alphanumeric or dash characters.\n",
                        "willReplaceOnChanges": true
                    },
                    "query": {
                        "type": "string",
                        "description": "SQL query used for thw view.\n"
                    },
                    "workspace": {
                        "type": "string",
                        "description": "Workspace name.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rockset:index/rocksetWorkspace:RocksetWorkspace": {
            "description": "Manages a Rockset workspace.\n",
            "properties": {
                "createdBy": {
                    "type": "string",
                    "description": "The user who created the workspace.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Text describing the collection.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique identifier for workspace. Can contain alphanumeric or dash characters.\n"
                }
            },
            "required": [
                "createdBy",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Text describing the collection.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Unique identifier for workspace. Can contain alphanumeric or dash characters.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RocksetWorkspace resources.\n",
                "properties": {
                    "createdBy": {
                        "type": "string",
                        "description": "The user who created the workspace.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Text describing the collection.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Unique identifier for workspace. Can contain alphanumeric or dash characters.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "rockset:index/getAccount:getAccount": {
            "description": "Gets information about the Rockset deployment for the specified api server.\n",
            "outputs": {
                "description": "A collection of values returned by getAccount.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "The AWS account ID to reference in AWS policies.\n"
                    },
                    "clusters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rockset:index/getAccountCluster:getAccountCluster"
                        },
                        "description": "The Rockset clusters available to this API key.\n"
                    },
                    "externalId": {
                        "type": "string",
                        "description": "The external ID to use in AWS trust policies.\n",
                        "secret": true
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "organization": {
                        "type": "string",
                        "description": "The name of the organization for the API key.\n"
                    },
                    "rocksetUser": {
                        "type": "string",
                        "description": "The name of the Rockset user used for AWS trust policies.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "clusters",
                    "externalId",
                    "organization",
                    "rocksetUser",
                    "id"
                ]
            }
        }
    }
}